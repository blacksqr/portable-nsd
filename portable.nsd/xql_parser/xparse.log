$VAR1 = {
          'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/elements-by-group-type.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/elements-by-group-type.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/add.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/add.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/security-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/security-procs.xql',
          'c:/temp/openacs5/packages/acs-mail/tcl/acs-mail-procs.tcl' => 'c:/temp/openacs5/packages/acs-mail/tcl/acs-mail-procs.xql',
          'c:/temp/openacs5/packages/acs-lang/tcl/lang-util-procs.tcl' => 'c:/temp/openacs5/packages/acs-lang/tcl/lang-util-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/instance-delete.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/instance-delete.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/index.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/apm/index.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/rel-type-add-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/rel-type-add-2.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/one.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/one.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/new.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/new.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/write-all-specs.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/apm/write-all-specs.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/version-tag.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/apm/version-tag.xql',
          'c:/temp/openacs5/packages/acs-admin/www/auth/batch-job.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/auth/batch-job.xql',
          'c:/temp/openacs5/packages/acs-messaging/tcl/acs-messaging-procs.tcl' => 'c:/temp/openacs5/packages/acs-messaging/tcl/acs-messaging-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/groups-list.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/groups-list.xql',
          'c:/temp/openacs5/packages/acs-templating/www/doc/demo/user-edit.tcl' => 'c:/temp/openacs5/packages/acs-templating/www/doc/demo/user-edit.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/rel-type-remove-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/rel-type-remove-2.xql',
          'c:/temp/openacs5/packages/acs-content-repository/tcl/keyword-procs.tcl' => 'c:/temp/openacs5/packages/acs-content-repository/tcl/keyword-procs.xql',
          'c:/temp/openacs5/packages/acs-service-contract/tcl/implementation-procs.tcl' => 'c:/temp/openacs5/packages/acs-service-contract/tcl/implementation-procs.xql',
          'c:/temp/openacs5/packages/acs-content-repository/tcl/revision-procs.tcl' => 'c:/temp/openacs5/packages/acs-content-repository/tcl/revision-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/host-node-map/index.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/host-node-map/index.xql',
          'c:/temp/openacs5/packages/acs-subsite/tcl/subsite-procs.tcl' => 'c:/temp/openacs5/packages/acs-subsite/tcl/subsite-procs.xql',
          'c:/temp/openacs5/packages/acs-lang/tcl/lang-catalog-procs.tcl' => 'c:/temp/openacs5/packages/acs-lang/tcl/lang-catalog-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/change-join-policy-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/change-join-policy-2.xql',
          'c:/temp/openacs5/packages/acs-templating/www/doc/demo/form.tcl' => 'c:/temp/openacs5/packages/acs-templating/www/doc/demo/form.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/version-edit.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/apm/version-edit.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/delete-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/delete-2.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/pvt/home.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/pvt/home.xql',
          'c:/temp/openacs5/packages/acs-admin/www/index.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/index.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/enum-add-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/enum-add-2.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/edit-one.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/edit-one.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/delete-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/delete-2.xql',
          'c:/temp/openacs5/packages/acs-subsite/tcl/relation-procs.tcl' => 'c:/temp/openacs5/packages/acs-subsite/tcl/relation-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/register/user-new.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/register/user-new.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/rel-type-add.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/rel-type-add.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/version-dependency-add-2.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/apm/version-dependency-add-2.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/version-view.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/apm/version-view.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/admin-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/admin-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/index.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/index.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/apm-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/apm-procs.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/version-dependency-add.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/apm/version-dependency-add.xql',
          'c:/temp/openacs5/packages/acs-subsite/tcl/package-procs.tcl' => 'c:/temp/openacs5/packages/acs-subsite/tcl/package-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/delete.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/delete.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/host-node-map/add.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/host-node-map/add.xql',
          'c:/temp/openacs5/packages/acs-content-repository/tcl/filter-procs.tcl' => 'c:/temp/openacs5/packages/acs-content-repository/tcl/filter-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/delete.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/delete.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/permissions/one.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/permissions/one.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/parameter-add-2.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/apm/parameter-add-2.xql',
          'c:/temp/openacs5/packages/acs-admin/www/users/member-state-change.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/users/member-state-change.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/one.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/one.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/pvt/set-on-vacation-to-null.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/pvt/set-on-vacation-to-null.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/new.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/new.xql',
          'c:/temp/openacs5/packages/acs-lang/tcl/locale-procs.tcl' => 'c:/temp/openacs5/packages/acs-lang/tcl/locale-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/user/basic-info-update.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/user/basic-info-update.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/new-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/new-2.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/change-join-policy-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/change-join-policy-2.xql',
          'c:/temp/openacs5/packages/acs-authentication/tcl/driver-procs.tcl' => 'c:/temp/openacs5/packages/acs-authentication/tcl/driver-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/shared/parameters.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/shared/parameters.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/one.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/one.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/rel-type-add-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/rel-type-add-2.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/constraints/delete.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/constraints/delete.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/user-extensions-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/user-extensions-procs.xql',
          'c:/temp/openacs5/packages/acs-authentication/tcl/authority-procs.tcl' => 'c:/temp/openacs5/packages/acs-authentication/tcl/authority-procs.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/apm-install-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/apm-install-procs.xql',
          'c:/temp/openacs5/packages/acs-reference/www/view-one-reference.tcl' => 'c:/temp/openacs5/packages/acs-reference/www/view-one-reference.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/parameter-set-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/parameter-set-2.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/one.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/one.xql',
          'c:/temp/openacs5/packages/search/tcl/search-procs.tcl' => 'c:/temp/openacs5/packages/search/tcl/search-procs.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/cvs-status.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/apm/cvs-status.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/request-processor-init.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/request-processor-init.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/members/index.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/members/index.xql',
          'c:/temp/openacs5/packages/acs-admin/www/test/signed-cookies-test-2.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/test/signed-cookies-test-2.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/object-types/one.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/object-types/one.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/new-3.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/new-3.xql',
          'c:/temp/openacs5/packages/acs-subsite/tcl/application-group-procs.tcl' => 'c:/temp/openacs5/packages/acs-subsite/tcl/application-group-procs.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/site-node-object-map-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/site-node-object-map-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/package-new.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/package-new.xql',
          'c:/temp/openacs5/packages/acs-content-repository/tcl/symlink-procs.tcl' => 'c:/temp/openacs5/packages/acs-content-repository/tcl/symlink-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/index.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/index.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/permissions/perm-user-add-include.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/permissions/perm-user-add-include.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/constraints/new.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/constraints/new.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/index.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/index.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/constraints/delete-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/constraints/delete-2.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/defs-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/defs-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/delete.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/delete.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/delete-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/delete-2.xql',
          'c:/temp/openacs5/packages/acs-lang/www/admin/edit-description.tcl' => 'c:/temp/openacs5/packages/acs-lang/www/admin/edit-description.xql',
          'c:/temp/openacs5/packages/acs-admin/www/users/become.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/users/become.xql',
          'c:/temp/openacs5/packages/acs-authentication/tcl/sync-procs.tcl' => 'c:/temp/openacs5/packages/acs-authentication/tcl/sync-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/mapping-remove-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/mapping-remove-2.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/package-add-2.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/apm/package-add-2.xql',
          'c:/temp/openacs5/packages/acs-service-contract/tcl/msg-type-procs.tcl' => 'c:/temp/openacs5/packages/acs-service-contract/tcl/msg-type-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/add.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/add.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/change-join-policy.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/change-join-policy.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/shared/portrait-bits.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/shared/portrait-bits.xql',
          'c:/temp/openacs5/packages/acs-content-repository/tcl/acs-content-repository-procs.tcl' => 'c:/temp/openacs5/packages/acs-content-repository/tcl/acs-content-repository-procs.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/community-core-2-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/community-core-2-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/relations/change-member-state.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/relations/change-member-state.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/site-nodes-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/site-nodes-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/add-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/add-2.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/one.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/one.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/delete-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/delete-2.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/value-delete.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/value-delete.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/version-parameter-values.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/apm/version-parameter-values.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/relations/add.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/relations/add.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/acs-permissions-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/acs-permissions-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/tcl/group-type-procs.tcl' => 'c:/temp/openacs5/packages/acs-subsite/tcl/group-type-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/delete.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/delete.xql',
          'c:/temp/openacs5/packages/acs-admin/www/users/user-add-3.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/users/user-add-3.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/users/new.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/users/new.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/pvt/unsubscribe.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/pvt/unsubscribe.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/object-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/object-procs.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/object-type-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/object-type-procs.xql',
          'c:/temp/openacs5/packages/acs-admin/tcl/apm-admin-procs.tcl' => 'c:/temp/openacs5/packages/acs-admin/tcl/apm-admin-procs.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/community-core-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/community-core-procs.xql',
          'c:/temp/openacs5/packages/acs-admin/www/users/one.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/users/one.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/deprecated-utilities-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/deprecated-utilities-procs.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/apm-xml-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/apm-xml-procs.xql',
          'c:/temp/openacs5/packages/acs-admin/www/users/search.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/users/search.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/parameter-edit.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/apm/parameter-edit.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/mapping-remove.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/mapping-remove.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/pvt/alerts.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/pvt/alerts.xql',
          'c:/temp/openacs5/packages/acs-subsite/tcl/party-procs.tcl' => 'c:/temp/openacs5/packages/acs-subsite/tcl/party-procs.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/widgets-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/widgets-procs.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/utilities-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/utilities-procs.xql',
          'c:/temp/openacs5/packages/acs-lang/tcl/localization-procs.tcl' => 'c:/temp/openacs5/packages/acs-lang/tcl/localization-procs.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/version-edit-2.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/apm/version-edit-2.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/enum-add.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/enum-add.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/request-processor-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/request-processor-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/elements-display-list.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/elements-display-list.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/parties/new.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/parties/new.xql',
          'c:/temp/openacs5/packages/acs-subsite/tcl/rel-types-procs.tcl' => 'c:/temp/openacs5/packages/acs-subsite/tcl/rel-types-procs.xql',
          'c:/temp/openacs5/packages/acs-admin/www/users/complex-search.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/users/complex-search.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/version-generate-diffs.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/apm/version-generate-diffs.xql',
          'c:/temp/openacs5/packages/acs-lang/www/change-locale-include.tcl' => 'c:/temp/openacs5/packages/acs-lang/www/change-locale-include.xql',
          'c:/temp/openacs5/packages/acs-admin/www/users/user-add-2.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/users/user-add-2.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/members/make-member.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/members/make-member.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/pvt/set-on-vacation-until.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/pvt/set-on-vacation-until.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/user/portrait/upload-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/user/portrait/upload-2.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/object-types/alphabetical-index.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/object-types/alphabetical-index.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/package-add.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/apm/package-add.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/apm-file-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/apm-file-procs.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/version-parameters.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/apm/version-parameters.xql',
          'c:/temp/openacs5/packages/acs-subsite/tcl/group-procs.tcl' => 'c:/temp/openacs5/packages/acs-subsite/tcl/group-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/permissions/grant.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/permissions/grant.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/security-init.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/security-init.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/permissions/perm-modify.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/permissions/perm-modify.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/rel-type-remove-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/rel-type-remove-2.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/site-node-apm-integration-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/site-node-apm-integration-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/tcl/rel-segments-procs.tcl' => 'c:/temp/openacs5/packages/acs-subsite/tcl/rel-segments-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/host-node-map/delete.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/host-node-map/delete.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/constraints/index.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/constraints/index.xql',
          'c:/temp/openacs5/packages/acs-service-contract/www/index.tcl' => 'c:/temp/openacs5/packages/acs-service-contract/www/index.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/version-dependencies.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/apm/version-dependencies.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/bulk-intall.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/apm/bulk-intall.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/membership-rel-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/membership-rel-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/edit.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/edit.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/rels-list.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/rels-list.xql',
          'c:/temp/openacs5/packages/acs-content-repository/tcl/publish-procs.tcl' => 'c:/temp/openacs5/packages/acs-content-repository/tcl/publish-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/rel-type-remove.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/rel-type-remove.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/delete.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/delete.xql',
          'c:/temp/openacs5/packages/acs-subsite/tcl/attribute-procs.tcl' => 'c:/temp/openacs5/packages/acs-subsite/tcl/attribute-procs.xql',
          'c:/temp/openacs5/packages/acs-content-repository/tcl/extlink-procs.tcl' => 'c:/temp/openacs5/packages/acs-content-repository/tcl/extlink-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/relations/one.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/relations/one.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/acs-kernel-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/acs-kernel-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/tcl/subsite-callback-procs.tcl' => 'c:/temp/openacs5/packages/acs-subsite/tcl/subsite-callback-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/new.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/new.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/one.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/one.xql',
          'c:/temp/openacs5/packages/acs-content-repository/www/index.vuh' => 'c:/temp/openacs5/packages/acs-content-repository/www/index.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/parameter-add.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/apm/parameter-add.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/groups-display.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/groups-display.xql',
          'c:/temp/openacs5/packages/acs-content-repository/tcl/item-procs.tcl' => 'c:/temp/openacs5/packages/acs-content-repository/tcl/item-procs.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/change-join-policy.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/change-join-policy.xql',
          'c:/temp/openacs5/packages/acs-admin/www/users/index.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/users/index.xql',
          'c:/temp/openacs5/packages/acs-lang/tcl/lang-message-procs.tcl' => 'c:/temp/openacs5/packages/acs-lang/tcl/lang-message-procs.xql'
        };
 $VAR2 = {
          'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/elements-by-group-type.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/elements-by-group-type-postgresql.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/security-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/security-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-lang/www/admin/test/test.tcl' => 'c:/temp/openacs5/packages/acs-lang/www/admin/test/test-postgresql.xql',
          'c:/temp/openacs5/packages/acs-mail/tcl/acs-mail-procs.tcl' => 'c:/temp/openacs5/packages/acs-mail/tcl/acs-mail-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/new.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/new-postgresql.xql',
          'c:/temp/openacs5/packages/acs-lang/tcl/lang-util-procs.tcl' => 'c:/temp/openacs5/packages/acs-lang/tcl/lang-util-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/elements.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/elements-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/unmounted.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/unmounted-postgresql.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/index.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/apm/index-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/rel-type-add-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/rel-type-add-2-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/new.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/new-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/tcl/approval-expiration-procs.tcl' => 'c:/temp/openacs5/packages/acs-subsite/tcl/approval-expiration-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-messaging/tcl/acs-messaging-procs.tcl' => 'c:/temp/openacs5/packages/acs-messaging/tcl/acs-messaging-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/elements-by-rel-type.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/elements-by-rel-type-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/groups-list.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/groups-list-postgresql.xql',
          'c:/temp/openacs5/packages/acs-content-repository/tcl/keyword-procs.tcl' => 'c:/temp/openacs5/packages/acs-content-repository/tcl/keyword-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-service-contract/tcl/implementation-procs.tcl' => 'c:/temp/openacs5/packages/acs-service-contract/tcl/implementation-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-content-repository/tcl/revision-procs.tcl' => 'c:/temp/openacs5/packages/acs-content-repository/tcl/revision-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/admin-init.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/admin-init-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/host-node-map/index.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/host-node-map/index-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/tcl/subsite-procs.tcl' => 'c:/temp/openacs5/packages/acs-subsite/tcl/subsite-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/rel-type-add.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/rel-type-add-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/permissions/perm-include.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/permissions/perm-include-postgresql.xql',
          'c:/temp/openacs5/packages/acs-admin/www/auth/authority.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/auth/authority-postgresql.xql',
          'c:/temp/openacs5/packages/acs-lang/tcl/lang-catalog-procs.tcl' => 'c:/temp/openacs5/packages/acs-lang/tcl/lang-catalog-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/constraints-create.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/constraints-create-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/delete-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/delete-2-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/index.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/index-postgresql.xql',
          'c:/temp/openacs5/packages/acs-admin/www/index.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/index-postgresql.xql',
          'c:/temp/openacs5/packages/acs-lang/www/admin/test/format-test.tcl' => 'c:/temp/openacs5/packages/acs-lang/www/admin/test/format-test-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/enum-add-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/enum-add-2-postgresql.xql',
          'c:/temp/openacs5/packages/acs-templating/tcl/widget-procs.tcl' => 'c:/temp/openacs5/packages/acs-templating/tcl/widget-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-lang/www/admin/message-list.tcl' => 'c:/temp/openacs5/packages/acs-lang/www/admin/message-list-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/tcl/relation-procs.tcl' => 'c:/temp/openacs5/packages/acs-subsite/tcl/relation-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/rel-type-add.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/rel-type-add-postgresql.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/version-view.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/apm/version-view-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/index.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/index-postgresql.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/apm-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/apm-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/version-dependency-add.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/apm/version-dependency-add-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/tcl/package-procs.tcl' => 'c:/temp/openacs5/packages/acs-subsite/tcl/package-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/packages-install-3.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/apm/packages-install-3-postgresql.xql',
          'c:/temp/openacs5/packages/acs-service-contract/www/binding-uninstall.tcl' => 'c:/temp/openacs5/packages/acs-service-contract/www/binding-uninstall-postgresql.xql',
          'c:/temp/openacs5/packages/acs-content-repository/tcl/filter-procs.tcl' => 'c:/temp/openacs5/packages/acs-content-repository/tcl/filter-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-api-browser/www/plsql-subprograms-all.tcl' => 'c:/temp/openacs5/packages/acs-api-browser/www/plsql-subprograms-all-postgresql.xql',
          'c:/temp/openacs5/packages/acs-content-repository/tcl/acs-content-repository-init.tcl' => 'c:/temp/openacs5/packages/acs-content-repository/tcl/acs-content-repository-init-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/permissions/one.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/permissions/one-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/delete.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/delete-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/shared/community-member.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/shared/community-member-postgresql.xql',
          'c:/temp/openacs5/packages/acs-admin/www/users/member-state-change.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/users/member-state-change-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/one.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/one-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/new.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/new-postgresql.xql',
          'c:/temp/openacs5/packages/acs-lang/tcl/locale-procs.tcl' => 'c:/temp/openacs5/packages/acs-lang/tcl/locale-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/00-database-procs-postgresql.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/00-database-procs-postgresql-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/user/basic-info-update.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/user/basic-info-update-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/pvt/unsubscribe-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/pvt/unsubscribe-2-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/new-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/new-2-postgresql.xql',
          'c:/temp/openacs5/packages/acs-admin/www/users/modify-admin-privileges.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/users/modify-admin-privileges-postgresql.xql',
          'c:/temp/openacs5/packages/acs-authentication/tcl/driver-procs.tcl' => 'c:/temp/openacs5/packages/acs-authentication/tcl/driver-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/shared/parameters.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/shared/parameters-postgresql.xql',
          'c:/temp/openacs5/packages/acs-automated-testing/www/admin/testcase.tcl' => 'c:/temp/openacs5/packages/acs-automated-testing/www/admin/testcase-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/rel-type-add-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/rel-type-add-2-postgresql.xql',
          'c:/temp/openacs5/packages/acs-authentication/tcl/test/acs-authentication-procs.tcl' => 'c:/temp/openacs5/packages/acs-authentication/tcl/test/acs-authentication-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-authentication/tcl/authority-procs.tcl' => 'c:/temp/openacs5/packages/acs-authentication/tcl/authority-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/apm-install-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/apm-install-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/index.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/index-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/one.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/one-postgresql.xql',
          'c:/temp/openacs5/packages/search/tcl/search-procs.tcl' => 'c:/temp/openacs5/packages/search/tcl/search-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/object-types/one.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/object-types/one-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/new-3.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/new-3-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/tcl/application-group-procs.tcl' => 'c:/temp/openacs5/packages/acs-subsite/tcl/application-group-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/site-node-object-map-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/site-node-object-map-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/new.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/new-postgresql.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/parameter-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/parameter-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-content-repository/tcl/symlink-procs.tcl' => 'c:/temp/openacs5/packages/acs-content-repository/tcl/symlink-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/permissions/perm-user-add-include.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/permissions/perm-user-add-include-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/constraints/new.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/constraints/new-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/constraints/delete-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/constraints/delete-2-postgresql.xql',
          'c:/temp/openacs5/packages/acs-admin/www/users/registration-history.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/users/registration-history-postgresql.xql',
          'c:/temp/openacs5/packages/acs-api-browser/www/plsql-subprogram-one.tcl' => 'c:/temp/openacs5/packages/acs-api-browser/www/plsql-subprogram-one-postgresql.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/defs-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/defs-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/index.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/index-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/permissions/index.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/permissions/index-postgresql.xql',
          'c:/temp/openacs5/packages/acs-authentication/tcl/authentication-procs.tcl' => 'c:/temp/openacs5/packages/acs-authentication/tcl/authentication-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-service-contract/tcl/acs-service-contract-procs.tcl' => 'c:/temp/openacs5/packages/acs-service-contract/tcl/acs-service-contract-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-authentication/tcl/sync-procs.tcl' => 'c:/temp/openacs5/packages/acs-authentication/tcl/sync-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-service-contract/tcl/msg-type-procs.tcl' => 'c:/temp/openacs5/packages/acs-service-contract/tcl/msg-type-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/parties/one.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/parties/one-postgresql.xql',
          'c:/temp/openacs5/packages/acs-automated-testing/www/admin/index.tcl' => 'c:/temp/openacs5/packages/acs-automated-testing/www/admin/index-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/shared/portrait-bits.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/shared/portrait-bits-postgresql.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/site-nodes-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/site-nodes-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/permissions/perm-user-add-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/permissions/perm-user-add-2-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/delete-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/delete-2-postgresql.xql',
          'c:/temp/openacs5/packages/acs-lang/www/admin/batch-editor.tcl' => 'c:/temp/openacs5/packages/acs-lang/www/admin/batch-editor-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/relations/add.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/relations/add-postgresql.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/acs-permissions-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/acs-permissions-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/constraints/one.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/constraints/one-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/tcl/group-type-procs.tcl' => 'c:/temp/openacs5/packages/acs-subsite/tcl/group-type-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/application-new.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/application-new-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/delete.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/delete-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/users/new.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/users/new-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/pvt/unsubscribe.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/pvt/unsubscribe-postgresql.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/object-type-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/object-type-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/object-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/object-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-admin/tcl/apm-admin-procs.tcl' => 'c:/temp/openacs5/packages/acs-admin/tcl/apm-admin-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/community-core-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/community-core-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-admin/www/users/one.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/users/one-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/relations/remove.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/relations/remove-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/tcl/plpgsql-utility-procs.tcl' => 'c:/temp/openacs5/packages/acs-subsite/tcl/plpgsql-utility-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/mount.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/mount-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/pvt/toggle-dont-spam-me-p.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/pvt/toggle-dont-spam-me-p-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/members/member-invite.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/members/member-invite-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/pvt/alerts.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/pvt/alerts-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/tcl/party-procs.tcl' => 'c:/temp/openacs5/packages/acs-subsite/tcl/party-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-lang/tcl/localization-procs.tcl' => 'c:/temp/openacs5/packages/acs-lang/tcl/localization-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-lang/tcl/lang-audit-procs.tcl' => 'c:/temp/openacs5/packages/acs-lang/tcl/lang-audit-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-admin/lib/service-parameters.tcl' => 'c:/temp/openacs5/packages/acs-admin/lib/service-parameters-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/permissions/revoke.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/permissions/revoke-postgresql.xql',
          'c:/temp/openacs5/packages/acs-service-contract/www/contract-display.tcl' => 'c:/temp/openacs5/packages/acs-service-contract/www/contract-display-postgresql.xql',
          'c:/temp/openacs5/packages/acs-service-contract/tcl/contract-procs.tcl' => 'c:/temp/openacs5/packages/acs-service-contract/tcl/contract-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-content-repository/tcl/doc-procs.tcl' => 'c:/temp/openacs5/packages/acs-content-repository/tcl/doc-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/request-processor-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/request-processor-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/elements-display-list.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/elements-display-list-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/parties/new.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/parties/new-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/tcl/rel-types-procs.tcl' => 'c:/temp/openacs5/packages/acs-subsite/tcl/rel-types-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-admin/www/users/complex-search.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/users/complex-search-postgresql.xql',
          'c:/temp/openacs5/packages/acs-service-contract/tcl/acs-service-contract-init.tcl' => 'c:/temp/openacs5/packages/acs-service-contract/tcl/acs-service-contract-init-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/tcl/plsql-utility-procs.tcl' => 'c:/temp/openacs5/packages/acs-subsite/tcl/plsql-utility-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-automated-testing/tcl/aa-test-procs.tcl' => 'c:/temp/openacs5/packages/acs-automated-testing/tcl/aa-test-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/user/portrait/upload-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/user/portrait/upload-2-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/index.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/index-postgresql.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/apm-file-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/apm-file-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/version-parameters.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/apm/version-parameters-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/tcl/group-procs.tcl' => 'c:/temp/openacs5/packages/acs-subsite/tcl/group-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/permissions/perm-modify.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/permissions/perm-modify-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/tcl/rel-segments-procs.tcl' => 'c:/temp/openacs5/packages/acs-subsite/tcl/rel-segments-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-service-contract/www/index.tcl' => 'c:/temp/openacs5/packages/acs-service-contract/www/index-postgresql.xql',
          'c:/temp/openacs5/packages/acs-lang/www/admin/set-system-timezone.tcl' => 'c:/temp/openacs5/packages/acs-lang/www/admin/set-system-timezone-postgresql.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/version-dependencies.tcl' => 'c:/temp/openacs5/packages/acs-admin/www/apm/version-dependencies-postgresql.xql',
          'c:/temp/openacs5/packages/acs-tcl/tcl/membership-rel-procs.tcl' => 'c:/temp/openacs5/packages/acs-tcl/tcl/membership-rel-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/elements-display.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/elements-display-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/rels-list.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/rels-list-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/new-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/new-2-postgresql.xql',
          'c:/temp/openacs5/packages/acs-content-repository/tcl/publish-procs.tcl' => 'c:/temp/openacs5/packages/acs-content-repository/tcl/publish-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-lang/www/admin/message-search.tcl' => 'c:/temp/openacs5/packages/acs-lang/www/admin/message-search-postgresql.xql',
          'c:/temp/openacs5/packages/acs-admin/www/apm/packages/index.vuh' => 'c:/temp/openacs5/packages/acs-admin/www/apm/packages/index-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/delete.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/delete-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/tcl/attribute-procs.tcl' => 'c:/temp/openacs5/packages/acs-subsite/tcl/attribute-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/relations/one.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/relations/one-postgresql.xql',
          'c:/temp/openacs5/packages/acs-content-repository/tcl/extlink-procs.tcl' => 'c:/temp/openacs5/packages/acs-content-repository/tcl/extlink-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-service-contract/www/binding-install.tcl' => 'c:/temp/openacs5/packages/acs-service-contract/www/binding-install-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/tcl/subsite-callback-procs.tcl' => 'c:/temp/openacs5/packages/acs-subsite/tcl/subsite-callback-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-reference/www/reference-data-list.tcl' => 'c:/temp/openacs5/packages/acs-reference/www/reference-data-list-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/one.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/one-postgresql.xql',
          'c:/temp/openacs5/packages/acs-content-repository/www/index.vuh' => 'c:/temp/openacs5/packages/acs-content-repository/www/index-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/parameter-set.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/parameter-set-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/new.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/new-postgresql.xql',
          'c:/temp/openacs5/packages/acs-lang/www/admin/test/timezone.tcl' => 'c:/temp/openacs5/packages/acs-lang/www/admin/test/timezone-postgresql.xql',
          'c:/temp/openacs5/packages/acs-content-repository/tcl/item-procs.tcl' => 'c:/temp/openacs5/packages/acs-content-repository/tcl/item-procs-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/delete-2.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/delete-2-postgresql.xql',
          'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/rel-type-remove.tcl' => 'c:/temp/openacs5/packages/acs-subsite/www/admin/groups/rel-type-remove-postgresql.xql',
          'c:/temp/openacs5/packages/acs-lang/tcl/lang-message-procs.tcl' => 'c:/temp/openacs5/packages/acs-lang/tcl/lang-message-procs-postgresql.xql'
        };
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/elements-by-group-type.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/elements-by-group-type.xql)b(select_group_types):[db_foreach]
 {


    select
           t.object_type, t.pretty_name, count(g.group_id) as number_groups
      from groups g, acs_objects o, acs_object_types t,
           application_group_element_map app_group
     where o.object_id = g.group_id
       and o.object_type = t.object_type
       and app_group.package_id = :package_id
       and app_group.element_id = g.group_id
     group by t.object_type, t.pretty_name
     order by lower(t.pretty_name)

      
} 
 ------------ 

    select
           t.object_type, t.pretty_name, count(g.group_id) as number_groups
      from groups g, acs_objects o, acs_object_types t,
           application_group_element_map app_group
     where o.object_id = g.group_id
       and o.object_type = t.object_type
       and app_group.package_id = :package_id
       and app_group.element_id = g.group_id
     group by t.object_type, t.pretty_name
     order by lower(t.pretty_name)

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/add.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/add.xql)b(select_primary_relations):[db_multirow]
 {

      
    select o.object_type as rel_type, o.pretty_name
      from acs_object_types o
     where o.object_type in ('composition_rel','membership_rel')
       and o.object_type not in (select g.rel_type from group_type_allowed_rels g where g.group_type = :object_type)

      
} 
 ------------ 
      
    select o.object_type as rel_type, o.pretty_name
      from acs_object_types o
     where o.object_type in ('composition_rel','membership_rel')
       and o.object_type not in (select g.rel_type from group_type_allowed_rels g where g.group_type = :object_type)

       
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/security-procs.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/security-procs.xql)b(prop_insert_dml):[db_dml]
 {

	insert into sec_session_properties
	  (session_id, module, property_name, secure_p, last_hit)
	select :session_id, :module, :name, :secure, :last_hit
        from dual
        where not exists (select 1
                          from sec_session_properties
                          where session_id = :session_id and
                          module = :module and
                          property_name = :name)
      
} 
 ------------ 
	insert into sec_session_properties
	  (session_id, module, property_name, secure_p, last_hit)
	select :session_id, :module, :name, :secure, :last_hit
        from dual
        where not exists (select 1
                          from sec_session_properties
                          where session_id = :session_id and
                          module = :module and
                          property_name = :name)
       
b(password_select):[db_0or1row]
 {

      select password, salt from users where user_id = :user_id
      
} 
 ------------ 
      select password, salt from users where user_id = :user_id
       
b(sessions_sweep):[db_dml]
 {

      
	delete from sec_session_properties
	where last_hit < :expires
    
      
} 
 ------------ 
      
	delete from sec_session_properties
	where last_hit < :expires
    
       
b(get_token):[db_string]
 {

      select token from secret_tokens
                       	                 where token_id = :token_id
      
} 
 ------------ 
      select token from secret_tokens
                       	                 where token_id = :token_id
       
b(property_lookup_sec):[db_0or1row]
 {

      
	    select property_value, secure_p
	    from sec_session_properties
	    where session_id = :id
	    and module = :module
	    and property_name = :name
	
      
} 
 ------------ 
      
	    select property_value, secure_p
	    from sec_session_properties
	    where session_id = :id
	    and module = :module
	    and property_name = :name
	
       
b(update_last_hit_dml):[db_dml]
 {

	update sec_session_properties
	   set last_hit = :new_last_hit
	 where session_id = :id and
               property_name = :name
      
} 
 ------------ 
	update sec_session_properties
	   set last_hit = :new_last_hit
	 where session_id = :id and
               property_name = :name
       
FILES: TCL(c:/temp/openacs5/packages/acs-mail/tcl/acs-mail-procs.tcl) XML(c:/temp/openacs5/packages/acs-mail/tcl/acs-mail-procs.xql)b(acs_message_cleanup_queue):[db_dml]
 {

      
delete from acs_mail_queue_messages
  where message_id not in
  (select message_id from acs_mail_queue_outgoing)
  and message_id not in
  (select message_id from acs_mail_queue_incoming)
    

} 
 ------------ 
      
delete from acs_mail_queue_messages
  where message_id not in
  (select message_id from acs_mail_queue_outgoing)
  and message_id not in
  (select message_id from acs_mail_queue_incoming)
    
 
b(acs_mail_link_get_body_id):[db_string]
 {

      
select body_id from acs_mail_links where mail_link_id = :link_id
    

} 
 ------------ 
      
select body_id from acs_mail_links where mail_link_id = :link_id
    
 
b(acs_mail_body_to_mime_get_body):[db_1row]
 {

      
select body_id from acs_mail_links where mail_link_id = :link_id
        

} 
 ------------ 
      
select body_id from acs_mail_links where mail_link_id = :link_id
        
 
b(acs_message_send):[db_foreach]
 {

      
select message_id, envelope_from, envelope_to from acs_mail_queue_outgoing
    

} 
 ------------ 
      
select message_id, envelope_from, envelope_to from acs_mail_queue_outgoing
    
 
b(acs_message_delete_sent):[db_dml]
 {

      
delete from acs_mail_queue_outgoing
  where message_id = :message_id
    and envelope_from = :envelope_from
    and envelope_to = :envelope_to
            

} 
 ------------ 
      
delete from acs_mail_queue_outgoing
  where message_id = :message_id
    and envelope_from = :envelope_from
    and envelope_to = :envelope_to
            
 
b(acs_mail_body_to_mime_data):[db_1row]
 {

      
select header_message_id, header_reply_to, header_subject,
       header_from, header_to, content_item_id
  from acs_mail_bodies
  where body_id = :body_id
    

} 
 ------------ 
      
select header_message_id, header_reply_to, header_subject,
       header_from, header_to, content_item_id
  from acs_mail_bodies
  where body_id = :body_id
    
 
b(acs_mail_body_to_mime_headers):[db_foreach]
 {

      
select header_name, header_content from acs_mail_body_headers
  where body_id = :body_id
    

} 
 ------------ 
      
select header_name, header_content from acs_mail_body_headers
  where body_id = :body_id
    
 
b(acs_mail_body_to_mime_get_content_simple):[db_0or1row]
 {

      
select content, mime_type as v_content_type
	from cr_revisions
	where revision_id = :revision_id
        

} 
 ------------ 
      
select content, mime_type as v_content_type
	from cr_revisions
	where revision_id = :revision_id
        
 
b(acs_mail_body_to_mime_get_contents):[db_list_of_lists]
 {

      
select mime_filename, mime_disposition, content_item_id as ci_id
  from acs_mail_multipart_parts
  where multipart_id = :content_item_id
  order by sequence_number
        

} 
 ------------ 
      
select mime_filename, mime_disposition, content_item_id as ci_id
  from acs_mail_multipart_parts
  where multipart_id = :content_item_id
  order by sequence_number
        
 
b(acs_mail_multipart_type):[db_1row]
 {

      
select multipart_kind from acs_mail_multiparts
  where multipart_id = :object_id
    

} 
 ------------ 
      
select multipart_kind from acs_mail_multiparts
  where multipart_id = :object_id
    
 
b(get_storage_type):[db_string]
 {


select storage_type from cr_items 
where item_id = :content_item_id


} 
 ------------ 

select storage_type from cr_items 
where item_id = :content_item_id

 
FILES: TCL(c:/temp/openacs5/packages/acs-lang/tcl/lang-util-procs.tcl) XML(c:/temp/openacs5/packages/acs-lang/tcl/lang-util-procs.xql)b(default_locale_from_lang):[db_string]
 {

      
        select mime_charset
        from   ad_locales 
        where  locale = :locale
    
      
} 
 ------------ 
        select locale
        from   ad_locales
        where  language = '[db_quote $language]'
        and    enabled_p = 't'
        and    (default_p = 't' or
                (select count(*)
                from ad_locales
                where language = '[db_quote $language]') = 1
                    )
       
b(charset_for_locale):[db_string]
 {

        select locale
        from   ad_locales
        where  language = '[db_quote $language]'
        and    enabled_p = 't'
        and    (default_p = 't' or
                (select count(*)
                from ad_locales
                where language = '[db_quote $language]') = 1
                    )
      
} 
 ------------ 
      
        select mime_charset
        from   ad_locales 
        where  locale = :locale
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/instance-delete.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/instance-delete.xql)b(instance_delete_doubleclick_ck):[db_string]
 {

            select case when count(*) = 0 then 0 else 1 end
            from apm_packages
            where package_id = :package_id
        
} 
 ------------ 
            select case when count(*) = 0 then 0 else 1 end
            from apm_packages
            where package_id = :package_id
         
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/apm/index.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/apm/index.xql)b(email_by_user_id):[db_string]
 {

      select email  
      from parties 
      where party_id = :user_id
    
} 
 ------------ 
      select email  
      from parties 
      where party_id = :user_id
     
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/rel-type-add-2.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/rel-type-add-2.xql)b(select_group_type):[db_1row]
 {

      
	    select o.object_type as group_type
	      from acs_objects o
	     where o.object_id = :group_id
	
      
} 
 ------------ 
      
	    select o.object_type as group_type
	      from acs_objects o
	     where o.object_id = :group_id
	
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/one.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/one.xql)b(group_info):[db_1row]
 {

      
    select g.group_name, g.join_policy,
           o.object_type as group_type
      from groups g, acs_objects o, acs_object_types t
     where g.group_id = o.object_id
       and o.object_type = t.object_type
       and g.group_id = :group_id

      
} 
 ------------ 
      
    select g.group_name, g.join_policy,
           o.object_type as group_type
      from groups g, acs_objects o, acs_object_types t
     where g.group_id = o.object_id
       and o.object_type = t.object_type
       and g.group_id = :group_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/new.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/new.xql)b(role_exists_p):[db_string]
 {

      
	select count(r.role) from acs_rel_roles r where r.role = :role
    
      
} 
 ------------ 
      
	select count(r.role) from acs_rel_roles r where r.role = :role
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/apm/write-all-specs.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/apm/write-all-specs.xql)b(apm_get_all_packages):[db_foreach]
 {

      
    select version_id, version_name, pretty_name, distribution_uri, v.package_key
    from   apm_package_versions v, apm_package_types t
    where  installed_p = 't'
    and v.package_key = t.package_key
    order by upper(pretty_name)

      
} 
 ------------ 
      
    select version_id, version_name, pretty_name, distribution_uri, v.package_key
    from   apm_package_versions v, apm_package_types t
    where  installed_p = 't'
    and v.package_key = t.package_key
    order by upper(pretty_name)

       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/apm/version-tag.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/apm/version-tag.xql)b(apm_all_files_untag):[db_dml]
 {

      
	update apm_package_versions 
	set    tagged_p   = 'f' 
	where  version_id = :version_id
    
      
} 
 ------------ 
      
	update apm_package_versions 
	set    tagged_p   = 'f' 
	where  version_id = :version_id
    
       
b(apm_all_paths):[db_list]
 {

      
	select path from apm_package_files where version_id = :version_id order by path

      
} 
 ------------ 
      
	select path from apm_package_files where version_id = :version_id order by path

       
b(apm_all_files_tag):[db_dml]
 {

      
	update apm_package_versions 
	set    tagged_p   = 't' 
	where  version_id = :version_id
    
      
} 
 ------------ 
      
	update apm_package_versions 
	set    tagged_p   = 't' 
	where  version_id = :version_id
    
       
b(apm_package_by_version_id):[db_1row]
 {

      
    select package_name, version_name, package_id 
    from apm_package_version_info where version_id = :version_id

      
} 
 ------------ 
      
    select package_name, version_name, package_id 
    from apm_package_version_info where version_id = :version_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/auth/batch-job.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/auth/batch-job.xql)FILES: TCL(c:/temp/openacs5/packages/acs-messaging/tcl/acs-messaging-procs.tcl) XML(c:/temp/openacs5/packages/acs-messaging/tcl/acs-messaging-procs.xql)b(acs_message_remove_from_queue):[db_dml]
 {

      
                delete from acs_messages_outgoing
                    where message_id = :sending_message_id
                        and to_address = :recip_email
            
      
} 
 ------------ 
      
                delete from acs_messages_outgoing
                    where message_id = :sending_message_id
                        and to_address = :recip_email
            
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/groups-list.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/groups-list.xql)b(select_groups):[db_multirow]
 {

      
    select DISTINCT g.group_id, g.group_name
      from (select group_id, group_name 
              from groups g, acs_objects o 
             where g.group_id = o.object_id 
               and o.object_type = :group_type) g, 
           (select object_id 
            from all_object_party_privilege_map 
            where party_id = :user_id and privilege = 'read') perm,
           application_group_element_map m
     where perm.object_id = g.group_id
       and m.package_id = :package_id
       and m.element_id = g.group_id
     order by lower(g.group_name)

      
} 
 ------------ 
      
    select DISTINCT g.group_id, g.group_name
      from (select group_id, group_name 
              from groups g, acs_objects o 
             where g.group_id = o.object_id 
               and o.object_type = :group_type) g, 
           (select object_id 
            from all_object_party_privilege_map 
            where party_id = :user_id and privilege = 'read') perm,
           application_group_element_map m
     where perm.object_id = g.group_id
       and m.package_id = :package_id
       and m.element_id = g.group_id
     order by lower(g.group_name)

       
FILES: TCL(c:/temp/openacs5/packages/acs-templating/www/doc/demo/user-edit.tcl) XML(c:/temp/openacs5/packages/acs-templating/www/doc/demo/user-edit.xql)FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/rel-type-remove-2.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/rel-type-remove-2.xql)b(select_rel_ids):[db_list]
 {

      
	select r.rel_id 
          from acs_rels r
	 where r.rel_type = :rel_type
	   and r.object_id_one = :group_id
    
      
} 
 ------------ 
      
	select r.rel_id 
          from acs_rels r
	 where r.rel_type = :rel_type
	   and r.object_id_one = :group_id
    
       
b(select_segments):[db_0or1row]
 {

      
	    select segment_id
	      from rel_segments 
	     where group_id = :group_id
	       and rel_type = :rel_type
	
      
} 
 ------------ 
      
	    select segment_id
	      from rel_segments 
	     where group_id = :group_id
	       and rel_type = :rel_type
	
       
b(select_group_id):[db_0or1row]
 {

      
    select g.group_id, g.rel_type
      from group_rels g, acs_object_types t
     where g.rel_type = t.object_type
       and g.group_rel_id = :group_rel_id

      
} 
 ------------ 
      
    select g.group_id, g.rel_type
      from group_rels g, acs_object_types t
     where g.rel_type = t.object_type
       and g.group_rel_id = :group_rel_id

       
b(remove_relationship_type):[db_dml]
 {

      
	    delete from group_rels where group_rel_id = :group_rel_id
	
      
} 
 ------------ 
      
	    delete from group_rels where group_rel_id = :group_rel_id
	
       
FILES: TCL(c:/temp/openacs5/packages/acs-content-repository/tcl/keyword-procs.tcl) XML(c:/temp/openacs5/packages/acs-content-repository/tcl/keyword-procs.xql)b(item_unassign_children):[db_exec_plsql]
 {

            select parent_id
            from cr_keywords
            where keyword_id = :keyword
        
} 
 ------------ 
            delete from cr_item_keyword_map
            where item_id = :item_id
            and   keyword_id in (select p.keyword_id
                                   from   cr_keywords p
                                   where  p.parent_id = :parent_id)
         
b(select_keyword_options):[db_list_of_lists]
 {

            delete from cr_item_keyword_map
            where item_id = :item_id
            and   keyword_id in (select p.keyword_id
                                   from   cr_keywords p
                                   where  p.parent_id = :parent_id)
        
} 
 ------------ 
            select heading,
                   keyword_id
            from   cr_keywords
            where  [ad_decode $parent_id "" "parent_id is null" "parent_id = :parent_id"]
            order  by lower(heading)
         
b(get_child_keywords):[db_list]
 {

            select heading,
                   keyword_id
            from   cr_keywords
            where  [ad_decode $parent_id "" "parent_id is null" "parent_id = :parent_id"]
            order  by lower(heading)
        
} 
 ------------ 
            select km.keyword_id
            from cr_item_keyword_map km,
                 cr_keywords kw
            where km.item_id = :item_id
            and   kw.parent_id = :parent_id
            and   kw.keyword_id = km.keyword_id
         
b(get_keywords):[db_list]
 {

            select km.keyword_id
            from cr_item_keyword_map km,
                 cr_keywords kw
            where km.item_id = :item_id
            and   kw.parent_id = :parent_id
            and   kw.keyword_id = km.keyword_id
        
} 
 ------------ 
            select keyword_id from cr_item_keyword_map
            where item_id = :item_id
         
b(select_keyword_id):[db_string]
 {

            select keyword_id from cr_item_keyword_map
            where item_id = :item_id
        
} 
 ------------ 
            select keyword_id 
            from   cr_keywords
            where  parent_id = :parent_id
            and    heading = :heading
         
b(get_parent_id):[db_string]
 {

            select keyword_id 
            from   cr_keywords
            where  parent_id = :parent_id
            and    heading = :heading
        
} 
 ------------ 
            select parent_id
            from cr_keywords
            where keyword_id = :keyword
         
FILES: TCL(c:/temp/openacs5/packages/acs-service-contract/tcl/implementation-procs.tcl) XML(c:/temp/openacs5/packages/acs-service-contract/tcl/implementation-procs.xql)b(select_impl):[db_exec_plsql]
 {

        select impl_id
        from   acs_sc_impls
        where  impl_owner_name = :owner
        and    impl_name = :name
    
} 
 ------------ 
        select impl_name,
               impl_pretty_name,
               impl_owner_name, 
               impl_contract_name
        from   acs_sc_impls
        where  impl_id = :impl_id
     
b(select_impl_id):[db_string]
 {

        select impl_name,
               impl_pretty_name,
               impl_owner_name, 
               impl_contract_name
        from   acs_sc_impls
        where  impl_id = :impl_id
    
} 
 ------------ 
        select impl_id
        from   acs_sc_impls
        where  impl_owner_name = :owner
        and    impl_name = :name
     
FILES: TCL(c:/temp/openacs5/packages/acs-content-repository/tcl/revision-procs.tcl) XML(c:/temp/openacs5/packages/acs-content-repository/tcl/revision-procs.xql)b(get_revision_info):[db_string]
 {

            select content_type
	    from cr_items
            where item_id = :item_id
      
} 
 ------------ 
          select i.storage_type, i.storage_area_key, r.mime_type, i.item_id,
	         r.content_length
          from cr_items i, cr_revisions r
          where r.revision_id = :revision_id and i.item_id = r.item_id
       
b(write_text_content):[db_string]
 {

          select i.storage_type, i.storage_area_key, r.mime_type, i.item_id,
	         r.content_length
          from cr_items i, cr_revisions r
          where r.revision_id = :revision_id and i.item_id = r.item_id
      
} 
 ------------ 
          select content
          from cr_revisions
          where revision_id = :revision_id
       
b(registered_type_for_mime_type):[db_string]
 {

          select content
          from cr_revisions
          where revision_id = :revision_id
      
} 
 ------------ 
          select content_type
          from cr_content_mime_type_map
          where mime_type = :mime_type
       
b(mime_type_insert):[db_dml]
 {

          select content_type
          from cr_content_mime_type_map
          where mime_type = :mime_type
      
} 
 ------------ 
            insert into cr_mime_types (mime_type) 
    	    select :mime_type
    	    from dual
    	    where not exists (select 1 from cr_mime_types where mime_type = :mime_type)
       
b(get_content_type):[db_string]
 {

            insert into cr_mime_types (mime_type) 
    	    select :mime_type
    	    from dual
    	    where not exists (select 1 from cr_mime_types where mime_type = :mime_type)
      
} 
 ------------ 
            select content_type
	    from cr_items
            where item_id = :item_id
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/host-node-map/index.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/host-node-map/index.xql)FILES: TCL(c:/temp/openacs5/packages/acs-subsite/tcl/subsite-procs.tcl) XML(c:/temp/openacs5/packages/acs-subsite/tcl/subsite-procs.xql)b(parent_subsite_query):[db_1row]
 {

      
	    select instance_name
	    from apm_packages
	    where package_id = :package_id
	
      
} 
 ------------ 
      
         select m.group_id as supersite_group_id, p.instance_name as supersite_name
         from application_groups m, apm_packages p, site_nodes s1, site_nodes s2
         where s1.node_id = :node_id
           and s2.node_id = s1.parent_id
           and p.package_id = s2.object_id
	   and m.package_id = :subsite_id

       
b(select_name_exists_p):[db_string]
 {

      
	select count(*) 
	  from site_nodes
	 where parent_id = :node_id
	   and name = :instance_name
    
      
} 
 ------------ 
      
	select count(*) 
	  from site_nodes
	 where parent_id = :node_id
	   and name = :instance_name
    
       
b(subsite_name_query):[db_string]
 {

      
         select m.group_id as supersite_group_id, p.instance_name as supersite_name
         from application_groups m, apm_packages p, site_nodes s1, site_nodes s2
         where s1.node_id = :node_id
           and s2.node_id = s1.parent_id
           and p.package_id = s2.object_id
	   and m.package_id = :subsite_id

      
} 
 ------------ 
      
	    select instance_name
	    from apm_packages
	    where package_id = :package_id
	
       
b(select_pretty_name):[db_string]
 {

      
	select pretty_name from acs_object_types 
	where object_type = :object_type
    
      
} 
 ------------ 
      
	select pretty_name from acs_object_types 
	where object_type = :object_type
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-lang/tcl/lang-catalog-procs.tcl) XML(c:/temp/openacs5/packages/acs-lang/tcl/lang-catalog-procs.xql)b(get_untranslated_messages):[db_foreach]
 {

      select package_key
      from   apm_package_types
      where  exists (select 1 
                     from   apm_package_versions
                     where  package_key = apm_package_types.package_key
                        and installed_p = 't'
                        and enabled_p = 't')
       and not exists (select 1
                       from lang_message_keys
                       where package_key = apm_package_types.package_key)
    
} 
 ------------ 
      select message_key,
             package_key,
             message 
      from   lang_messages lm1 
      where  locale = :default_locale
      and    not exists (select message_key, package_key
                         from   lang_messages lm2 
                         where  locale != :default_locale
                         and    lm1.message_key = lm2.message_key
                         and    lm1.package_key = lm2.package_key)
     
b(get_locales_for_package):[db_foreach]
 {

      select message_key,
             package_key,
             message 
      from   lang_messages lm1 
      where  locale = :default_locale
      and    not exists (select message_key, package_key
                         from   lang_messages lm2 
                         where  locale != :default_locale
                         and    lm1.message_key = lm2.message_key
                         and    lm1.package_key = lm2.package_key)
    
} 
 ------------ 
        select distinct locale
        from lang_messages
        where package_key = :package_key
     
b(select_uninitialized):[db_list]
 {

        select distinct locale
        from lang_messages
        where package_key = :package_key
    
} 
 ------------ 
      select package_key
      from   apm_package_types
      where  exists (select 1 
                     from   apm_package_versions
                     where  package_key = apm_package_types.package_key
                        and installed_p = 't'
                        and enabled_p = 't')
       and not exists (select 1
                       from lang_message_keys
                       where package_key = apm_package_types.package_key)
     
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/change-join-policy-2.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/change-join-policy-2.xql)b(update_join_policy):[db_dml]
 {

      
    update groups
    set join_policy = :join_policy
    where group_id = :group_id

      
} 
 ------------ 
      
    update groups
    set join_policy = :join_policy
    where group_id = :group_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-templating/www/doc/demo/form.tcl) XML(c:/temp/openacs5/packages/acs-templating/www/doc/demo/form.xql)b(get_user_id):[db_string]
 {

      select ad_template_sample_users_seq.nextval
    
} 
 ------------ 
      select ad_template_sample_users_seq.nextval
     
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/apm/version-edit.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/apm/version-edit.xql)b(apm_all_version_info):[db_1row]
 {

      
    select version_id, package_key, package_uri, pretty_name, version_name, version_uri, auto_mount,
    summary, description_format, description, release_date, vendor, vendor_uri,
    enabled_p, installed_p, tagged_p, imported_p, data_model_loaded_p, activation_date, tarball_length, 
    deactivation_date, distribution_uri, distribution_date, singleton_p, initial_install_p
    from apm_package_version_info where version_id = :version_id

      
} 
 ------------ 
      
    select version_id, package_key, package_uri, pretty_name, version_name, version_uri, auto_mount,
    summary, description_format, description, release_date, vendor, vendor_uri,
    enabled_p, installed_p, tagged_p, imported_p, data_model_loaded_p, activation_date, tarball_length, 
    deactivation_date, distribution_uri, distribution_date, singleton_p, initial_install_p
    from apm_package_version_info where version_id = :version_id

       
b(apm_all_owners):[db_list_of_lists]
 {

      
    select owner_name, owner_uri from apm_package_owners where version_id = :version_id

      
} 
 ------------ 
      
    select owner_name, owner_uri from apm_package_owners where version_id = :version_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/delete-2.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/delete-2.xql)b(select_rel_ids):[db_list]
 {

      
	select r.rel_id
	  from acs_rels r, acs_object_party_privilege_map perm
	 where perm.object_id = r.rel_id
	  and perm.party_id = :user_id
	  and perm.privilege = 'delete'
	  and r.rel_type = :rel_type
    
      
} 
 ------------ 
      
	select r.rel_id
	  from acs_rels r, acs_object_party_privilege_map perm
	 where perm.object_id = r.rel_id
	  and perm.party_id = :user_id
	  and perm.privilege = 'delete'
	  and r.rel_type = :rel_type
    
       
b(select_segment_id):[db_string]
 {

      
	select s.segment_id
	  from rel_segments s, acs_object_party_privilege_map perm
	 where perm.object_id = s.segment_id
 	   and perm.party_id = :user_id
	   and perm.privilege = 'delete'
	   and s.rel_type = :rel_type
    
      
} 
 ------------ 
      
	select s.segment_id
	  from rel_segments s, acs_object_party_privilege_map perm
	 where perm.object_id = s.segment_id
 	   and perm.party_id = :user_id
	   and perm.privilege = 'delete'
	   and s.rel_type = :rel_type
    
       
b(select_type_info):[db_1row]
 {

      
	select t.table_name 
	  from acs_object_types t
	 where t.object_type = :rel_type
    
      
} 
 ------------ 
      
	select t.table_name 
	  from acs_object_types t
	 where t.object_type = :rel_type
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/pvt/home.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/pvt/home.xql)b(get_portrait_info):[db_0or1row]
 {

      
    select cr.publish_date, cr.title as portrait_title
    from cr_revisions cr, cr_items ci, acs_rels a
    where cr.revision_id = ci.live_revision
    and  ci.item_id = a.object_id_two
    and a.object_id_one = :user_id
    and a.rel_type = 'user_portrait_rel'
    
      
} 
 ------------ 
      
    select cr.publish_date, cr.title as portrait_title
    from cr_revisions cr, cr_items ci, acs_rels a
    where cr.revision_id = ci.live_revision
    and  ci.item_id = a.object_id_two
    and a.object_id_one = :user_id
    and a.rel_type = 'user_portrait_rel'
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/index.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/index.xql)FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/enum-add-2.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/enum-add-2.xql)b(delete_enum_value):[db_dml]
 {

      
		delete from acs_enum_values 
		 where attribute_id = :attribute_id 
		   and sort_order = :sort_order
	    
      
} 
 ------------ 
      
		delete from acs_enum_values 
		 where attribute_id = :attribute_id 
		   and sort_order = :sort_order
	    
       
b(update_enum_value):[db_dml]
 {

      
		update acs_enum_values
		   set pretty_name = :pretty_name
		 where attribute_id = :attribute_id
		   and sort_order = :sort_order
	    
      
} 
 ------------ 
      
		update acs_enum_values
		   set pretty_name = :pretty_name
		 where attribute_id = :attribute_id
		   and sort_order = :sort_order
	    
       
b(select_max_sort_order):[db_string]
 {

      
    select coalesce(max(v.sort_order),0)
      from acs_enum_values v
     where v.attribute_id = :attribute_id

      
} 
 ------------ 
      
    select coalesce(max(v.sort_order),0)
      from acs_enum_values v
     where v.attribute_id = :attribute_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/edit-one.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/edit-one.xql)q(select_value):[db_1row]
 "
    select my_view.$attribute_column as current_value
      from ([package_object_view $object_type]) my_view
     where my_view.object_id = :id_column
" 
 ------------ 
      
    select my_view.$attribute_column as current_value
      from ([package_object_view $object_type]) my_view
     where my_view.object_id = :id_column

       
 \
	    "update $type_table 
 match found but not categorized for "attribute_update" (in c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/edit-one.tcl) [db_dml]
  
 ------------ 
      update $type_table 
                set $attribute_column = :attribute_value 
              where $type_column = :id_column
       
b(select_enum_values):[db_list_of_lists]
 {
	select enum.pretty_name, enum.enum_value
	  from acs_enum_values enum
	 where enum.attribute_id = :attribute_id 
	 order by enum.sort_order
    } 
 ------------ 
      
	select enum.pretty_name, enum.enum_value
	  from acs_enum_values enum
	 where enum.attribute_id = :attribute_id 
	 order by enum.sort_order
    
       
b(attribute_properties):[db_1row]
 {
    select a.pretty_name as attribute_pretty_name, a.datatype, a.attribute_id,
           nvl(a.column_name,a.attribute_name) as attribute_column,
           t.id_column as type_column, t.table_name as type_table, t.object_type,
           a.min_n_values
      from acs_attributes a, acs_object_types t
     where a.attribute_id = :attribute_id
       and a.object_type = t.object_type
} 
 ------------ 
      
    select a.pretty_name as attribute_pretty_name, a.datatype, a.attribute_id,
           coalesce(a.column_name,a.attribute_name) as attribute_column,
           t.id_column as type_column, t.table_name as type_table, t.object_type,
           a.min_n_values
      from acs_attributes a, acs_object_types t
     where a.attribute_id = :attribute_id
       and a.object_type = t.object_type

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/delete-2.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/delete-2.xql)b(select_group_id):[db_string]
 {
	    select s.group_id from rel_segments s where s.segment_id = :segment_id
	} 
 ------------ 
      
	    select s.group_id from rel_segments s where s.segment_id = :segment_id
	
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/tcl/relation-procs.tcl) XML(c:/temp/openacs5/packages/acs-subsite/tcl/relation-procs.xql)b(select_rel_id):[db_string]
 {} 
 ------------ 

          select rel_id 
          from   acs_rels 
          where  rel_type = :rel_type
          and    object_id_one = :object_id_one
          and    object_id_two = :object_id_two

       
b(select_rel_info):[db_0or1row]
 {


          select rel_id 
          from   acs_rels 
          where  rel_type = :rel_type
          and    object_id_one = :object_id_one
          and    object_id_two = :object_id_two

      
} 
 ------------ 

	select s.segment_id, r.object_id_two as party_id, t.package_name
	  from acs_rels r
	         left outer join rel_segments s
		   on (r.object_id_one = s.group_id and r.rel_type = s.rel_type), 
	       acs_object_types t
	 where r.rel_type = t.object_type
	  and r.rel_id = :rel_id
    
       
b(select_required_rel_segments):[db_foreach]
 {


	select s.segment_id, r.object_id_two as party_id, t.package_name
	  from acs_rels r
	         left outer join rel_segments s
		   on (r.object_id_one = s.group_id and r.rel_type = s.rel_type), 
	       acs_object_types t
	 where r.rel_type = t.object_type
	  and r.rel_id = :rel_id
    
      
} 
 ------------ 

	select distinct s.segment_id, s.group_id, s.rel_type,
	       g.group_name, g.join_policy, t.pretty_name as rel_type_pretty_name,
               coalesce(dl.dependency_level, 0)
	from rc_all_constraints c, 
             (select rel_segment, required_rel_segment
              from rc_segment_required_seg_map
	      where rel_side = 'two'
	      UNION ALL
	      select segment_id, segment_id
	      from rel_segments) map,
             rel_segments s left outer join rc_segment_dependency_levels dl using (segment_id),
	     groups g, acs_object_types t
	where c.group_id = :group_id
	  and c.rel_type = :rel_type
	  and c.required_rel_segment = map.rel_segment
          and map.required_rel_segment = s.segment_id
	  and g.group_id = s.group_id
	  and t.object_type = s.rel_type
        order by coalesce(dl.dependency_level, 0)
    
       
b(select_rel_info):[db_0or1row]
 {


	select distinct s.segment_id, s.group_id, s.rel_type,
	       g.group_name, g.join_policy, t.pretty_name as rel_type_pretty_name,
               coalesce(dl.dependency_level, 0)
	from rc_all_constraints c, 
             (select rel_segment, required_rel_segment
              from rc_segment_required_seg_map
	      where rel_side = 'two'
	      UNION ALL
	      select segment_id, segment_id
	      from rel_segments) map,
             rel_segments s left outer join rc_segment_dependency_levels dl using (segment_id),
	     groups g, acs_object_types t
	where c.group_id = :group_id
	  and c.rel_type = :rel_type
	  and c.required_rel_segment = map.rel_segment
          and map.required_rel_segment = s.segment_id
	  and g.group_id = s.group_id
	  and t.object_type = s.rel_type
        order by coalesce(dl.dependency_level, 0)
    
      
} 
 ------------ 
	    select s.segment_id, r.object_id_two as party_id
  	      from rel_segments s, acs_rels r
	     where r.object_id_one = s.group_id
	       and r.rel_type = s.rel_type
	       and r.rel_id = :rel_id
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/register/user-new.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/register/user-new.xql)FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/rel-type-add.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/rel-type-add.xql)b(select_group_type):[db_1row]
 {
    select o.object_type as group_type
      from acs_objects o
     where o.object_id = :group_id
} 
 ------------ 
      
    select o.object_type as group_type
      from acs_objects o
     where o.object_id = :group_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/apm/version-dependency-add-2.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/apm/version-dependency-add-2.xql)b(apm_dependency_doubleclick_check):[db_string]
 {
	select count(*) from apm_package_dependencies
	where dependency_id = :dependency_id
    } 
 ------------ 
      
	select count(*) from apm_package_dependencies
	where dependency_id = :dependency_id
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/apm/version-view.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/apm/version-view.xql)b(apm_all_version_info):[db_1row]
 {} 
 ------------ 
      
    select version_id, package_key, package_uri, pretty_name, version_name, version_uri,
    summary, description_format, description, singleton_p, initial_install_p,
    to_char(release_date, 'Month DD, YYYY') as release_date , vendor, vendor_uri, auto_mount,
    enabled_p, installed_p, tagged_p, imported_p, data_model_loaded_p, 
    to_char(activation_date, 'Month DD, YYYY') as activation_date,
    tarball_length, distribution_uri,
    to_char(deactivation_date, 'Month DD, YYYY') as deactivation_date,
    to_char(distribution_date, 'Month DD, YYYY') as distribution_date
 from apm_package_version_info 
 where version_id = :version_id

       
b(apm_all_owners):[db_foreach]
 {
    select owner_uri, owner_name from apm_package_owners where version_id = :version_id
} 
 ------------ 
      
    select owner_uri, owner_name from apm_package_owners where version_id = :version_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/admin-procs.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/admin-procs.xql)q(sql_post_select_for_user_class):[db_string]
 "
	    select sql_post_select
	    from user_classes where user_class_id = [ns_dbquotevalue $user_class_id]
	" 
 ------------ 
      
	    select sql_post_select
	    from user_classes 
            where user_class_id = [ns_dbquotevalue $user_class_id]
	
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/index.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/index.xql)FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/apm-procs.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/apm-procs.xql)b(update_proc):[db_dml]
 {} 
 ------------ 
        update apm_package_callbacks
                set proc = :proc
        where version_id = :version_id
          and type = :type
     
b(enabled_packages):[db_list]
 {

        update apm_package_callbacks
                set proc = :proc
        where version_id = :version_id
          and type = :type
    
} 
 ------------ 
      select distinct package_key
      from apm_package_versions
      where enabled_p='t'
     
b(delete_proc):[db_dml]
 {

      select distinct package_key
      from apm_package_versions
      where enabled_p='t'
    
} 
 ------------ 
        delete from apm_package_callbacks
        where version_id = (select version_id 
                            from apm_enabled_package_versions 
                            where package_key = :package_key)
        and   type = :type
     
b(get_id):[db_string]
 {

        delete from apm_package_callbacks
        where version_id = (select version_id 
                            from apm_enabled_package_versions 
                            where package_key = :package_key)
        and   type = :type
    
} 
 ------------ 
        select version_id 
        from apm_enabled_package_versions 
        where package_key = :package_key
     
b(apm_package_key_from_id):[db_string]
 {
	select instance_name from apm_packages where package_id = :package_id
    } 
 ------------ 
      select package_key
      from apm_packages
      where package_id = :package_id
     
b(select_version_info):[db_1row]
 {

        select version_id 
        from apm_enabled_package_versions 
        where package_key = :package_key
    
} 
 ------------ 
        select v.version_id,
               v.package_key,
               v.version_name,
               v.version_uri,
               v.summary,
               v.description_format,
               v.description,
               to_char(v.release_date, 'YYYY-MM-DD') as release_date,
               v.vendor,
               v.vendor_uri,
               v.enabled_p,
               v.installed_p,
               v.tagged_p,
               v.imported_p,
               v.data_model_loaded_p,
               v.cvs_import_results,
               v.activation_date,
               v.deactivation_date,
               v.item_id,
               v.content_length,
               v.distribution_uri,
               v.distribution_date,
               v.auto_mount,
               t.pretty_name,
               t.pretty_plural
        from   apm_package_versions v,
               apm_package_types t
        where  v.version_id = :version_id
        and    t.package_key = v.package_key
     
b(apm_package_id_from_key):[db_string]
 {
        select package_key from apm_package_version_info where version_id = :version_id
    } 
 ------------ 
      select package_id
      from apm_packages
      where package_key = :package_key
     
q(pretty_db_name_select):[db_string]
 "
        select pretty_db_name
        from apm_package_db_types
        where db_type_key = :db_type
    " 
 ------------ 
      select pretty_db_name
      from apm_package_db_types
      where db_type_key = :db_type
     
b(parameter_update):[db_dml]
 {
       update apm_parameters 
	set parameter_name = :parameter_name,
            default_value  = :default_value,
            datatype       = :datatype, 
	    description	   = :description,
	    section_name   = :section_name,
            min_n_values   = :min_n_values,
            max_n_values   = :max_n_values
      where parameter_id = :parameter_id
    } 
 ------------ 
      update apm_parameters 
      set parameter_name = :parameter_name,
      default_value  = :default_value,
      datatype       = :datatype, 
      description	   = :description,
      section_name   = :section_name,
      min_n_values   = :min_n_values,
      max_n_values   = :max_n_values
      where parameter_id = :parameter_id
     
b(apm_package_registered_p):[db_string]
 {
	select 1 from apm_package_types 
	where package_key = :package_key
    } 
 ------------ 
      select 1 from apm_package_types 
      where package_key = :package_key
     
b(apm_package_version_enabled_p):[db_string]
 {

        select v.version_id,
               v.package_key,
               v.version_name,
               v.version_uri,
               v.summary,
               v.description_format,
               v.description,
               to_char(v.release_date, 'YYYY-MM-DD') as release_date,
               v.vendor,
               v.vendor_uri,
               v.enabled_p,
               v.installed_p,
               v.tagged_p,
               v.imported_p,
               v.data_model_loaded_p,
               v.cvs_import_results,
               v.activation_date,
               v.deactivation_date,
               v.item_id,
               v.content_length,
               v.distribution_uri,
               v.distribution_date,
               v.auto_mount,
               t.pretty_name,
               t.pretty_plural
        from   apm_package_versions v,
               apm_package_types t
        where  v.version_id = :version_id
        and    t.package_key = v.package_key
    
} 
 ------------ 
      select case when count(*) = 0 then 0 else 1 end from apm_package_versions
      where version_id = :version_id
      and enabled_p = 't'
     
b(insert_proc):[db_dml]
 {

      select case when count(*) = 0 then 0 else 1 end from apm_package_versions
      where version_id = :version_id
      and enabled_p = 't'
    
} 
 ------------ 
        insert into apm_package_callbacks
          (version_id, type, proc)
        values (:version_id, :type, :proc)
     
b(get_names):[db_list]
 {
	select parameter_name from apm_parameters
	where package_key = :package_key
    } 
 ------------ 
      select parameter_name from apm_parameters
      where package_key = :package_key
     
b(apm_package_enabled_p):[db_string]
 {

        insert into apm_package_callbacks
          (version_id, type, proc)
        values (:version_id, :type, :proc)
    
} 
 ------------ 
      select 1 from apm_package_versions
      where package_key = :package_key
      and enabled_p = 't'
     
b(apm_package_installed_p):[db_string]
 {

      select 1 from apm_package_versions
      where package_key = :package_key
      and enabled_p = 't'
    
} 
 ------------ 
      select 1 from apm_package_versions
      where package_key = :package_key
      and installed_p = 't'
     
b(apm_parameter_cache_update):[db_foreach]
 {
	select v.package_id, p.parameter_name, nvl(p.default_value, v.attr_value) as attr_value
	from apm_parameters p, apm_parameter_values v
	where p.package_key = :package_key
	and p.parameter_id = v.parameter_id (+)
    } 
 ------------ 
      select v.package_id, p.parameter_name, 
      case when v.value_id is null then p.default_value else v.attr_value end as attr_value
      from apm_parameters p left outer join apm_parameter_values v
      using (parameter_id)
      where p.package_key = :package_key
     
b(select_proc):[db_string]
 {

      select 1 from apm_package_versions
      where package_key = :package_key
      and installed_p = 't'
    
} 
 ------------ 
        select proc
        from apm_package_callbacks
        where version_id = :version_id
        and   type = :type
     
b(apm_package_by_version_id):[db_1row]
 {
	    select pretty_name, version_name, package_key, installed_p, distribution_uri, tagged_p
	    from apm_package_version_info where version_id = :version_id
	} 
 ------------ 
      select pretty_name, version_name, package_key, installed_p, distribution_uri, tagged_p
      from   apm_package_version_info
      where  version_id = :version_id
     
b(all_parameters_packages):[db_foreach]
 {
	select package_id, parameter_id, parameter_name 
	from apm_packages p, apm_parameters ap
	where p.package_key = ap.package_key
	and ap.parameter_id = :parameter_id

    } 
 ------------ 
      select package_id, parameter_id, parameter_name 
      from apm_packages p, apm_parameters ap
      where p.package_key = ap.package_key
      and ap.parameter_id = :parameter_id
     
b(apm_parameter_names_and_values):[db_list_of_lists]
 {
	select parameter_name, attr_value
	from apm_parameters p, apm_parameter_values v, apm_packages a
	where p.parameter_id = v.parameter_id
	and a.package_id = v.package_id
	and a.package_id = :package_id
    } 
 ------------ 
      select parameter_name, attr_value
      from apm_parameters p, apm_parameter_values v, apm_packages a
      where p.parameter_id = v.parameter_id
      and a.package_id = v.package_id
      and a.package_id = :package_id
     
b(apm_version_installed_p):[db_string]
 {

        select proc
        from apm_package_callbacks
        where version_id = :version_id
        and   type = :type
    
} 
 ------------ 
      select 1 from apm_package_versions
      where version_id = :version_id
      and installed_p = 't'
     
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/apm/version-dependency-add.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/apm/version-dependency-add.xql)b(apm_package_info_by_version_id_and_package):[db_1row]
 {
    select p.package_key, p.package_uri, 
    p.pretty_name, v.version_name
    from   apm_package_types p, apm_package_versions v
    where  v.version_id = :version_id
    and    v.package_key = p.package_key
} 
 ------------ 
      
    select p.package_key, p.package_uri, 
    p.pretty_name, v.version_name
    from   apm_package_types p, apm_package_versions v
    where  v.version_id = :version_id
    and    v.package_key = p.package_key

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/tcl/package-procs.tcl) XML(c:/temp/openacs5/packages/acs-subsite/tcl/package-procs.xql)b(select_package_name):[db_string]
 {
	select t.package_name
	  from acs_object_types t
	 where t.object_type = :object_type
    } 
 ------------ 
      
      select t.package_name
      from acs_object_types t
      where t.object_type = :object_type
      
     
b(select_type_info):[db_1row]
 {
	select t.package_name
	  from acs_object_types t 
	 where t.object_type = :object_type
    } 
 ------------ 

      select t.table_name, t.id_column
      from acs_object_types t
      where t.object_type = :object_type
      
     
b(select_type_info):[db_1row]
 {


      select t.table_name, t.id_column
      from acs_object_types t
      where t.object_type = :object_type
      
    
} 
 ------------ 
      
      select t.table_name, t.id_column, lower(t.package_name) as package_name, t.supertype
      from acs_object_types t
      where t.object_type = :object_type
      
     
b(get_id_column):[db_string]
 {} 
 ------------ 
      
      select id_column
      from acs_object_types
      where object_type = :object_type
      
     
b(package_select):[db_0or1row]
 {
	    select t.package_name
	      from acs_object_types t
	     where t.object_type = :object_type
	} 
 ------------ 
      
      select t.package_name
      from acs_object_types t
      where t.object_type = :object_type
      
     
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/delete.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/delete.xql)b(select_object_type):[db_1row]
 {
    select a.object_type, a.pretty_name as attribute_pretty_name
      from acs_attributes a  
     where a.attribute_id = :attribute_id
} 
 ------------ 
      
    select a.object_type, a.pretty_name as attribute_pretty_name
      from acs_attributes a  
     where a.attribute_id = :attribute_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/host-node-map/add.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/host-node-map/add.xql)b(host_node_insert):[db_dml]
 {
    insert into host_node_map 
    (host, node_id)
    values 
    (:host, :root)
} 
 ------------ 


    insert into host_node_map 
    (host, node_id)
    values 
    (:host, :root)

     
FILES: TCL(c:/temp/openacs5/packages/acs-content-repository/tcl/filter-procs.tcl) XML(c:/temp/openacs5/packages/acs-content-repository/tcl/filter-procs.xql)q(get_content_type):[db_string]
 "" 
 ------------ 

        select content_type from cr_items 
        where item_id = :item_id

       
b(get_table_name):[db_string]
 {


        select content_type from cr_items 
        where item_id = :item_id

      
} 
 ------------ 

        select table_name from acs_object_types 
        where object_type = :content_type

       
b(get_content):[db_transaction]
 {


        select table_name from acs_object_types 
        where object_type = :content_type

      
} 
 ------------ 

        select 
           x.*, 
          :content_type as content_type
          $text_sql
        from
          cr_revisions r, ${table_name}x x
        where
          r.revision_id = :revision_id
        and 
          x.revision_id = r.revision_id

       
b(get_revision):[db_string]
 {


        select 
           x.*, 
          :content_type as content_type
          $text_sql
        from
          cr_revisions r, ${table_name}x x
        where
          r.revision_id = :revision_id
        and 
          x.revision_id = r.revision_id

      
} 
 ------------ 

        select live_revision from cr_items where item_id = :item_id

       
b(get_mime_type):[db_string]
 {


        select live_revision from cr_items where item_id = :item_id

      
} 
 ------------ 

        select mime_type from cr_revisions 
        where revision_id = :revision_id

       
b(get_live_revision):[db_string]
 {


        select mime_type from cr_revisions 
        where revision_id = :revision_id

      
} 
 ------------ 

    select live_revision from cr_items where item_id = :item_id

       
b(get_live_revision):[db_string]
 {


    select live_revision from cr_items where item_id = :item_id

      
} 
 ------------ 

    select live_revision from cr_items where item_id = :item_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/delete.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/delete.xql)b(select_segment_info):[db_1row]
 {
    select s.segment_name 
      from rel_segments s
     where s.segment_id = :segment_id
} 
 ------------ 
      
    select s.segment_name 
      from rel_segments s
     where s.segment_id = :segment_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/permissions/one.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/permissions/one.xql)FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/apm/parameter-add-2.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/apm/parameter-add-2.xql)b(param_name_unique_ck):[db_string]
 {
	    select decode(count(*), 0, 0, 1) 
	    from apm_parameters
	    where parameter_name = :parameter_name
            and package_key= :package_key
	} 
 ------------ 
	    select case when count(*) = 0 then 0 else 1 end
	    from apm_parameters
	    where parameter_name = :parameter_name and
              package_key = :package_key
       
b(apm_parameter_register_doubleclick_p):[db_string]
 {
	select 1 from apm_parameters where parameter_id = :parameter_id
    } 
 ------------ 
      
	select 1 from apm_parameters where parameter_id = :parameter_id
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/users/member-state-change.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/users/member-state-change.xql)q(admin_email):[db_string]
 "select email from parties where party_id = :admin_user_id" 
 ------------ 
      select email from parties where party_id = :admin_user_id
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/one.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/one.xql)b(relations_select):[db_multirow]
 {
    select t.pretty_name, g.rel_type, g.group_rel_type_id
      from acs_object_types t, group_type_rels g
     where t.object_type = g.rel_type
       and g.group_type = :group_type
     order by lower(t.pretty_name)
} 
 ------------ 
      
    select t.pretty_name, g.rel_type, g.group_rel_type_id
      from acs_object_types t, group_type_rels g
     where t.object_type = g.rel_type
       and g.group_type = :group_type
     order by lower(t.pretty_name)

       
b(select_pretty_name):[db_0or1row]
 {
    select t.pretty_name as group_type_pretty_name, t.dynamic_p,
           nvl(gt.default_join_policy, 'open') as default_join_policy
      from acs_object_types t, group_types gt
     where t.object_type = :group_type
       and t.object_type = gt.group_type(+)
} 
 ------------ 

    select t.pretty_name as group_type_pretty_name, t.dynamic_p,
           coalesce(gt.default_join_policy, 'open') as default_join_policy
      from acs_object_types t
	     left outer join group_types gt
               on (t.object_type = gt.group_type)
     where t.object_type = :group_type

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/pvt/set-on-vacation-to-null.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/pvt/set-on-vacation-to-null.xql)b(no_alerts_until):[]
 {
    select no_alerts_until from users where user_id = :user_id
} 
 ------------ 
      
    select no_alerts_until from users where user_id = :user_id

       
b(pvt_unset_no_alerts_until):[db_dml]
 {
	    update users 
	    set no_alerts_until = :clear
	    where user_id = :user_id
    } 
 ------------ 
      
	    update users 
	    set no_alerts_until = :clear
	    where user_id = :user_id
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/new.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/new.xql)b(select_type_info):[db_1row]
 {
    select t.pretty_name as group_type_pretty_name,
           t.table_name
      from acs_object_types t
     where t.object_type = :group_type
} 
 ------------ 
      
    select t.pretty_name as group_type_pretty_name,
           t.table_name
      from acs_object_types t
     where t.object_type = :group_type

       
b(group_exists_p):[db_string]
 {
	    select count(*) from groups where group_id = :group_id
	} 
 ------------ 
      
	    select count(*) from groups where group_id = :group_id
	
       
b(group_info):[db_1row]
 {
    select group_name as add_to_group_name, 
           join_policy as add_to_group_join_policy
    from groups
    where group_id = :add_to_group_id
} 
 ------------ 
      
    select group_name as add_to_group_name, 
           join_policy as add_to_group_join_policy
    from groups
    where group_id = :add_to_group_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-lang/tcl/locale-procs.tcl) XML(c:/temp/openacs5/packages/acs-lang/tcl/locale-procs.xql)b(select_locales):[db_list_of_lists]
 {} 
 ------------ 
       select label, locale
        from   ad_locales
        where  enabled_p = 't'
       
b(get_user_locale):[db_string]
 {

       select label, locale
        from   ad_locales
        where  enabled_p = 't'
      
} 
 ------------ 
        select locale
        from   ad_locale_user_prefs
        where  user_id = :user_id
        and    package_id = :package_id
       
b(update_user_locale):[db_dml]
 {

        select locale
        from   ad_locale_user_prefs
        where  user_id = :user_id
        and    package_id = :package_id
      
} 
 ------------ 
        update ad_locale_user_prefs 
        set    locale = :locale 
        where  user_id = :user_id 
        and    package_id = :package_id
       
b(update_system_locale):[db_dml]
 {

        update ad_locale_user_prefs 
        set    locale = :locale 
        where  user_id = :user_id 
        and    package_id = :package_id
      
} 
 ------------ 
        update apm_packages
        set    default_locale = :locale 
        where  package_id = :package_id
       
b(set_user_site_wide_locale):[db_dml]
 {

        update apm_packages
        set    default_locale = :locale 
        where  package_id = :package_id
      
} 
 ------------ 
        update user_preferences
        set    locale = :locale
        where  user_id = :user_id
       
b(get_system_locale):[db_string]
 {

        update user_preferences
        set    locale = :locale
        where  user_id = :user_id
      
} 
 ------------ 
        select default_locale
        from   apm_packages
        where  package_id = :package_id
       
b(select_user_timezone):[db_string]
 {

        select default_locale
        from   apm_packages
        where  package_id = :package_id
      
} 
 ------------ 
        select timezone
        from   user_preferences
        where  user_id = :user_id
       
b(set_user_timezone):[db_dml]
 {

        select timezone
        from   user_preferences
        where  user_id = :user_id
      
} 
 ------------ 
        update user_preferences
        set    timezone = :timezone
        where  user_id = :user_id
       
b(delete_user_locale):[db_dml]
 {

        update user_preferences
        set    timezone = :timezone
        where  user_id = :user_id
      
} 
 ------------ 
        delete 
        from   ad_locale_user_prefs 
        where  user_id = :user_id 
        and    package_id = :package_id
       
b(user_locale_exists_p):[db_string]
 {

        delete 
        from   ad_locale_user_prefs 
        where  user_id = :user_id 
        and    package_id = :package_id
      
} 
 ------------ 
        select count(*) 
        from   ad_locale_user_prefs 
        where  user_id = :user_id
        and    package_id = :package_id
       
b(insert_user_locale):[db_dml]
 {

        select count(*) 
        from   ad_locale_user_prefs 
        where  user_id = :user_id
        and    package_id = :package_id
      
} 
 ------------ 
         insert into ad_locale_user_prefs (user_id, package_id, locale) 
        values (:user_id, :package_id, :locale)
       
b(get_user_site_wide_locale):[db_string]
 {

         insert into ad_locale_user_prefs (user_id, package_id, locale) 
        values (:user_id, :package_id, :locale)
      
} 
 ------------ 
        select locale
        from   user_preferences
        where  user_id = :user_id
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/user/basic-info-update.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/user/basic-info-update.xql)FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/new-2.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/new-2.xql)b(select_object_types):[db_list_of_lists]
 {
    select r.object_type_one as max_object_type_one, 
           r.object_type_two as max_object_type_two,
           t.pretty_name as supertype_pretty_name,
           r.role_one as supertype_role_one, r.role_two as supertype_role_two,
           r.min_n_rels_one as supertype_min_n_rels_one,
           r.max_n_rels_one as supertype_max_n_rels_one,
           r.min_n_rels_two as supertype_min_n_rels_two,
           r.max_n_rels_two as supertype_max_n_rels_two
      from acs_object_types t, acs_rel_types r
     where r.rel_type = :supertype
       and r.rel_type = t.object_type
} 
 ------------ 
      
    select r.object_type_one as max_object_type_one, 
           r.object_type_two as max_object_type_two,
           t.pretty_name as supertype_pretty_name,
           r.role_one as supertype_role_one, r.role_two as supertype_role_two,
           r.min_n_rels_one as supertype_min_n_rels_one,
           r.max_n_rels_one as supertype_max_n_rels_one,
           r.min_n_rels_two as supertype_min_n_rels_two,
           r.max_n_rels_two as supertype_max_n_rels_two
      from acs_object_types t, acs_rel_types r
     where r.rel_type = :supertype
       and r.rel_type = t.object_type

       
b(select_roles):[db_list_of_lists]
 {
    select r.pretty_name, r.role
      from acs_rel_roles r
     order by lower(r.role)
} 
 ------------ 
      
    select r.pretty_name, r.role
      from acs_rel_roles r
     order by lower(r.role)

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/change-join-policy-2.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/change-join-policy-2.xql)b(select_pretty_name):[db_0or1row]
 {
    select t.dynamic_p,
           decode(gt.group_type, null, 0, 1) as group_type_exists_p
      from acs_object_types t, group_types gt
     where t.object_type = :group_type
       and t.object_type = gt.group_type(+)
} 
 ------------ 

    select t.dynamic_p,
           case when gt.group_type = null then 0 else 1 end as group_type_exists_p
      from acs_object_types t left outer join group_types gt on (t.object_type = gt.group_type)
     where t.object_type = :group_type

       
b(update_join_policy):[db_dml]
 {
	update group_types
	set default_join_policy = :default_join_policy
	where group_type = :group_type
    } 
 ------------ 
      
	update group_types
	set default_join_policy = :default_join_policy
	where group_type = :group_type
    
       
b(set_default_join_policy):[db_dml]
 {
	insert into group_types
	(group_type, default_join_policy)
	values
	(:group_type, :default_join_policy)
    } 
 ------------ 
      
	insert into group_types
	(group_type, default_join_policy)
	values
	(:group_type, :default_join_policy)
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-authentication/tcl/driver-procs.tcl) XML(c:/temp/openacs5/packages/acs-authentication/tcl/driver-procs.xql)b(param_exists_p):[db_string]
 {} 
 ------------ 
            select count(*) 
            from   auth_driver_params
            where  impl_id = :impl_id
            and    authority_id = :authority_id
            and    key = :parameter
         
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/shared/parameters.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/shared/parameters.xql)]
} else {
    set section_whematch found but not categorized for "section_where_clause" (in c:/temp/openacs5/packages/acs-subsite/www/shared/parameters.tcl) [db_foreach]
  
 ------------ 
      and section_name=:section
     
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/one.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/one.xql)b(enum_values):[db_multirow]
 {
	select v.enum_value, v.pretty_name
	  from acs_enum_values v
	 where v.attribute_id = :attribute_id
	 order by v.sort_order
    } 
 ------------ 
      
	select v.enum_value, v.pretty_name
	  from acs_enum_values v
	 where v.attribute_id = :attribute_id
	 order by v.sort_order
    
       
b(select_attribute_info):[db_1row]
 {
    select a.attribute_id, a.object_type, a.table_name, a.attribute_name, 
           a.pretty_name, a.pretty_plural, a.sort_order, a.datatype, 
           a.default_value, a.min_n_values, a.max_n_values, a.storage, 
           a.static_p, a.column_name, t.dynamic_p
     from acs_attributes a, acs_object_types t
    where a.object_type = t.object_type
      and a.attribute_id = :attribute_id
} 
 ------------ 
      
    select a.attribute_id, a.object_type, a.table_name, a.attribute_name, 
           a.pretty_name, a.pretty_plural, a.sort_order, a.datatype, 
           a.default_value, a.min_n_values, a.max_n_values, a.storage, 
           a.static_p, a.column_name, t.dynamic_p
     from acs_attributes a, acs_object_types t
    where a.object_type = t.object_type
      and a.attribute_id = :attribute_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/rel-type-add-2.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/rel-type-add-2.xql)b(exists_p):[db_string]
 {select count(*) from group_type_rels where group_type = :group_type and rel_type = :rel_type} 
 ------------ 
      select count(*) from group_type_rels where group_type = :group_type and rel_type = :rel_type
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/constraints/delete.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/constraints/delete.xql)b(select_constraint_props):[db_0or1row]
 {
    select c.constraint_name, s.segment_name
      from rel_constraints c, application_group_segments s,
           application_group_segments s2
     where c.rel_segment = s.segment_id
       and c.constraint_id = :constraint_id
       and s.package_id = :package_id
       and s2.segment_id = c.required_rel_segment
       and s2.package_id = :package_id
} 
 ------------ 
      
    select c.constraint_name, s.segment_name
      from rel_constraints c, application_group_segments s,
           application_group_segments s2
     where c.rel_segment = s.segment_id
       and c.constraint_id = :constraint_id
       and s.package_id = :package_id
       and s2.segment_id = c.required_rel_segment
       and s2.package_id = :package_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/user-extensions-procs.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/user-extensions-procs.xql)b(select_extensions):[db_list]
 {} 
 ------------ 
  select 
         impl_name from acs_sc_impls, acs_sc_bindings, acs_sc_contracts
   where
         acs_sc_impls.impl_id = acs_sc_bindings.impl_id 
     and
         acs_sc_contracts.contract_id = acs_sc_bindings.contract_id 
     and 
         acs_sc_contracts.contract_name = 'UserData'
 
FILES: TCL(c:/temp/openacs5/packages/acs-authentication/tcl/authority-procs.tcl) XML(c:/temp/openacs5/packages/acs-authentication/tcl/authority-procs.xql)b(select_authorities):[db_list_of_lists]
 {} 
 ------------ 
          select pretty_name, authority_id
          from   auth_authorities
          where  enabled_p = 't'
          and    auth_impl_id is not null
          order  by sort_order
       
b(select_authority_id):[db_string]
 {

          select pretty_name, authority_id
          from   auth_authorities
          where  enabled_p = 't'
          and    auth_impl_id is not null
          order  by sort_order
      
} 
 ------------ 
          select authority_id 
          from   auth_authorities 
          where  short_name = :short_name 
       
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/apm-install-procs.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/apm-install-procs.xql)b(apm_spec_file_register):[db_dml]
 {} 
 ------------ 
      
	    update apm_package_types
		set spec_file_path = :path
	        where package_key = :package_key
	
       
b(all_dependencies_for_version):[db_foreach]
 {
	select dependency_id from apm_package_dependencies
	where version_id = :version_id
    } 
 ------------ 
      
	select dependency_id from apm_package_dependencies
	where version_id = :version_id
    
       
b(delete_all_callbacks):[db_dml]
 {
        delete from apm_package_callbacks
        where version_id = :version_id
    } 
 ------------ 
        delete from apm_package_callbacks
        where version_id = :version_id
       
b(package_version_info_select):[db_1row]
 {
	select package_key, version_id
	from apm_package_version_info 
	where version_id = :version_id
    } 
 ------------ 
      
	select package_key, version_id
	from apm_package_version_info 
	where version_id = :version_id
    
       
b(apm_uninstall_record):[db_dml]
 {
	update apm_package_versions
	set    installed_p = 'f', enabled_p = 'f'
	where package_key = :package_key
    } 
 ------------ 
      
	update apm_package_versions
	set    installed_p = 'f', enabled_p = 'f'
	where package_key = :package_key
    
       
b(apm_delete_owners):[db_dml]
 {
	delete from apm_package_owners where version_id = :version_id
    } 
 ------------ 
      
	delete from apm_package_owners where version_id = :version_id
    
       
b(owner_insert):[db_dml]
 {
	    insert into apm_package_owners(version_id, owner_uri, owner_name, sort_key)
	    values(:version_id, :owner_uri, :owner_name, :counter)
	} 
 ------------ 
      
	    insert into apm_package_owners(version_id, owner_uri, owner_name, sort_key)
	    values(:version_id, :owner_uri, :owner_name, :counter)
	
       
b(apm_package_version_count):[db_string]
 {
	select count(*) from apm_package_versions
	where package_key = :package_key
    } 
 ------------ 
      
	select count(*) from apm_package_versions
	where package_key = :package_key
    
       
b(parameter_id_get):[db_0or1row]
 {
	    select parameter_id from apm_parameters
	    where parameter_name = :parameter_name
	    and package_key = :package_key
	} 
 ------------ 
      
	    select parameter_id from apm_parameters
	    where parameter_name = :parameter_name
	    and package_key = :package_key
	
       
FILES: TCL(c:/temp/openacs5/packages/acs-reference/www/view-one-reference.tcl) XML(c:/temp/openacs5/packages/acs-reference/www/view-one-reference.xql)b(get_table):[db_1row]
 { *SQL* } 
 ------------ 
    select repository_id,
    table_name,
    internal_data_p,
    package_name,
    last_update,
    source,
    source_url,
    effective_date,
    expiry_date,
    (select user_id
     from cc_users u
     where user_id = maintainer_id) as maintainer_id
    from acs_reference_repositories r
    where repository_id= :repository_id
 
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/parameter-set-2.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/parameter-set-2.xql)b(apm_parameters_set):[db_foreach]
 {} 
 ------------ 
            select parameter_id,
                   parameter_name
            from apm_parameters
            where package_key = :package_key
         
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/one.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/one.xql)b(select_segment_info):[db_1row]
 {
    select count(*) as number_elements
      from rel_segment_party_map map, acs_object_party_privilege_map perm
     where perm.object_id = map.party_id
       and perm.party_id = :user_id
       and perm.privilege = 'read' 
       and map.segment_id = :segment_id
} 
 ------------ 
      
         select count(*) as number_elements
           from rel_segment_party_map map
         where map.segment_id = :segment_id
           and exists (select 1
                       from acs_object_party_privilege_map perm
                       where perm.object_id = map.party_id
                         and perm.party_id = :user_id
                         and perm.privilege = 'read')

       
b(constraints_select):[db_multirow]
 {
    select c.constraint_id, c.constraint_name, c.rel_side
      from rel_constraints c
     where c.rel_segment = :segment_id
} 
 ------------ 
      
    select c.constraint_id, c.constraint_name, c.rel_side
      from rel_constraints c
     where c.rel_segment = :segment_id

       
FILES: TCL(c:/temp/openacs5/packages/search/tcl/search-procs.tcl) XML(c:/temp/openacs5/packages/search/tcl/search-procs.xql)b(get_lob_data):[db_blob_get]
 {} 
 ------------ 
            select :content as content,
                   'lob' as storage_type
            from dual
         
b(search_observer_queue_entry):[db_foreach]
 {

            select :content as content,
                   'lob' as storage_type
            from dual
        
} 
 ------------ 
            select object_id, event_date, event
            from search_observer_queue
            order by event_date asc
         
b(get_file_data):[db_blob_get]
 {

            select object_id, event_date, event
            from search_observer_queue
            order by event_date asc
        
} 
 ------------ 
	    select :content as content,
                   'file' as storage_type
            from dual
         
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/apm/cvs-status.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/apm/cvs-status.xql)q(all_packages_owned_by_email):[db_foreach]
 "
    select v.package_key, v.version_id, v.package_name, v.version_name
    from   apm_package_version_info v, apm_package_owners o
    where  o.owner_url = :email
    and    v.version_id = o.version_id
    and    v.installed_p = 't'
    order by upper(package_name)" 
 ------------ 
      
    select v.package_key, v.version_id, v.package_name, v.version_name
    from   apm_package_version_info v, apm_package_owners o
    where  o.owner_url = :email
    and    v.version_id = o.version_id
    and    v.installed_p = 't'
    order by upper(package_name)
       
b(apm_file_path):[db_foreach]
 {
	    select path from apm_package_files where version_id = :version_id
	} 
 ------------ 
      
	    select path from apm_package_files where version_id = :version_id
	
       
b(email_by_user_id):[db_1row]
 {} 
 ------------ 
      select email from parties where party_id = [ad_get_user_id]
       
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/request-processor-init.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/request-processor-init.xql)b(acs_kernel_id_get):[db_string]
 {
	select package_id from apm_packages
	where package_key = 'acs-admin'
    } 
 ------------ 
      
	select package_id from apm_packages
	where package_key = 'acs-admin'
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/members/index.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/members/index.xql)b(pretty_roles):[db_1row]
 {} 
 ------------ 

        select admin_role.pretty_name as admin_role_pretty,
          member_role.pretty_name as member_role_pretty
        from acs_rel_roles admin_role, acs_rel_roles member_role
        where admin_role.role = 'admin'
          and member_role.role = 'member'

       
b(select_member_states):[db_foreach]
 {


        select admin_role.pretty_name as admin_role_pretty,
          member_role.pretty_name as member_role_pretty
        from acs_rel_roles admin_role, acs_rel_roles member_role
        where admin_role.role = 'admin'
          and member_role.role = 'member'

      
} 
 ------------ 

        select mr.member_state as state, 
               count(mr.rel_id) as num_members
        from   membership_rels mr, acs_rels r
        where  r.rel_id = mr.rel_id
          and  r.object_id_one = :group_id
          and  r.rel_type = 'membership_rel'
        group  by mr.member_state

       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/test/signed-cookies-test-2.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/test/signed-cookies-test-2.xql)b(get_token_value):[db_string]
 {
    select token from secret_tokens
    where token_id = :token_id
} 
 ------------ 
      
    select token from secret_tokens
    where token_id = :token_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/object-types/one.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/object-types/one.xql)q(table_comment):[db_string]
 "select comments from user_tab_comments where table_name = '[string toupper $table_name]'" 
 ------------ 
      select comments from user_tab_comments where table_name = '[string toupper $table_name]'
       
b(attribute):[db_foreach]
 {
    select attribute_name,
           pretty_name,
           pretty_plural,
           datatype,
           default_value,
           min_n_values,
           max_n_values,
           storage,
           table_name as attr_table_name,
           column_name
      from acs_attributes
     where object_type = :object_type
} 
 ------------ 
      
    select attribute_name,
           pretty_name,
           pretty_plural,
           datatype,
           default_value,
           min_n_values,
           max_n_values,
           storage,
           table_name as attr_table_name,
           column_name
      from acs_attributes
     where object_type = :object_type

       
q(attribute_comment):[db_foreach]
 "
	select utc.column_name,
	       utc.data_type,
               ucc.comments
	  from user_tab_columns utc,
               user_col_comments ucc
	 where utc.table_name = '[string toupper $table_name]'
           and utc.table_name = ucc.table_name(+)
           and utc.column_name = ucc.column_name(+)
    " 
 ------------ 

	select utc.column_name,
	       utc.data_type,
               ucc.comments
	  from user_tab_columns utc left join
               user_col_comments ucc on (utc.table_name= ucc.table_name and utc.column_name = ucc.column_name)
	 where utc.table_name = '[string toupper $table_name]'
    
       
b(object_type):[db_string]
 {
    select supertype,
           abstract_p,
           pretty_name,
           pretty_plural,
           table_name,
           id_column,
           name_method,
           type_extension_table,
           package_name,
           dynamic_p
      from acs_object_types
     where object_type = :object_type
} 
 ------------ 
      
    select supertype,
           abstract_p,
           pretty_name,
           pretty_plural,
           table_name,
           id_column,
           name_method,
           type_extension_table,
           package_name,
           dynamic_p
      from acs_object_types
     where object_type = :object_type

       
b(package_index):[db_foreach]
 {
    select replace (replace (text, ' ', '&nbsp;'), chr(9), '&nbsp;&nbsp;&nbsp;&nbsp;') as text
      from user_source
     where lower(name) = :package_name
       and type = 'PACKAGE BODY'
     order by line
} 
 ------------ 
      
    select replace (replace (text, ' ', '&nbsp;'), chr(9), '&nbsp;&nbsp;&nbsp;&nbsp;') as text
      from user_source
     where lower(name) = :package_name
       and type = 'PACKAGE BODY'
     order by line

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/new-3.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/new-3.xql)b(select_segment_id):[db_string]
 {
	select s.segment_id
	  from rel_segments s
	 where s.group_id = :group_id
	   and s.rel_type = :rel_type
    } 
 ------------ 
      
	select s.segment_id
	  from rel_segments s
	 where s.group_id = :group_id
	   and s.rel_type = :rel_type
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/tcl/application-group-procs.tcl) XML(c:/temp/openacs5/packages/acs-subsite/tcl/application-group-procs.xql)b(group_name_query):[db_string]
 {
    	select substr(instance_name, 1, 90)
    	from apm_packages
    	where package_id = :package_id
        } 
 ------------ 
      
		select substr(instance_name, 1, 90)
		from apm_packages
		where package_id = :package_id
	    
       
b(delete_perms):[db_dml]
 {} 
 ------------ 
    
            delete from acs_permissions
            where  grantee_id = :group_id
            or     grantee_id in (select segment_id from rel_segments where group_id = :group_id)
            or     grantee_id in (select rel_id from acs_rels where object_id_one = :group_id or object_id_two = :group_id)

       
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/site-node-object-map-procs.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/site-node-object-map-procs.xql)b(select_node_mapping):[db_string]
 {} 
 ------------ 
            select node_id
            from site_node_object_mappings
            where object_id = :object_id
         
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/package-new.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/package-new.xql)b(package_new_doubleclick_ck):[db_string]
 {} 
 ------------ 
            select case when count(*) = 0 then 0 else 1 end
            from apm_packages
            where package_id = :new_package_id
         
FILES: TCL(c:/temp/openacs5/packages/acs-content-repository/tcl/symlink-procs.tcl) XML(c:/temp/openacs5/packages/acs-content-repository/tcl/symlink-procs.xql)b(symlink_update_symlink):[db_dml]
 {} 
 ------------ 

        update cr_symlinks
        set target_id = :target_id,
          label = :label,
          description = :description
        where symlink_id = :symlink_id

       
b(symlink_name):[db_string]
 {


        update cr_symlinks
        set target_id = :target_id,
          label = :label,
          description = :description
        where symlink_id = :symlink_id

      
} 
 ------------ 
          select label
          from cr_symlinks
          where symlink_id = :item_id
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/index.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/index.xql)b(select_roles):[db_multirow]
 {
    select r.role, r.pretty_name, nvl(num1.number_rels,0) + nvl(num2.number_rels,0) as number_rel_types
      from (select t.role_one as role, count(*) as number_rels
             from acs_rel_types t
            group by t.role_one) num1,
           (select t.role_two as role, count(*) as number_rels
             from acs_rel_types t
            group by t.role_two) num2,
           acs_rel_roles r
     where r.role = num1.role(+)
       and r.role = num2.role(+)
     order by lower(r.role)
} 
 ------------ 
    select r.role, r.pretty_name, coalesce(num1.number_rels,0) + coalesce(num2.number_rels,0) as number_rel_types
      from acs_rel_roles r left join
	(select t.role_one as role, count(*) as number_rels
             from acs_rel_types t
            group by t.role_one) num1 on r.role=num1.role left join
           (select t.role_two as role, count(*) as number_rels
             from acs_rel_types t
            group by t.role_two) num2 on r.role=num2.role
     order by lower(r.role)

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/permissions/perm-user-add-include.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/permissions/perm-user-add-include.xql)FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/constraints/new.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/constraints/new.xql)b(select_segments):[db_list_of_lists]
 {
    select s.segment_name, s.segment_id
      from application_group_segments s
     where s.segment_id <> :rel_segment
       and s.package_id = :package_id

     order by lower(s.segment_name)
} 
 ------------ 
      
    select s.segment_name, s.segment_id
      from application_group_segments s
     where s.segment_id <> :rel_segment
       and s.package_id = :package_id

     order by lower(s.segment_name)

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/index.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/index.xql)b(subsite_info):[db_1row]
 {
    select ag.group_id as subsite_group_id, ap.instance_name
    from application_groups ag, apm_packages ap
    where ag.package_id = ap.package_id
      and ag.package_id = :package_id
} 
 ------------ 
      
    select ag.group_id as subsite_group_id, ap.instance_name
    from application_groups ag, apm_packages ap
    where ag.package_id = ap.package_id
      and ag.package_id = :package_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/constraints/delete-2.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/constraints/delete-2.xql)b(select_constraint_props):[db_0or1row]
 {
	select 1
        from rel_constraints c, application_group_segments s,
             application_group_segments s2
	where c.rel_segment = s.segment_id
          and c.constraint_id = :constraint_id
          and s.package_id = :package_id
          and s2.segment_id = c.required_rel_segment
          and s2.package_id = :package_id
    } 
 ------------ 
      
	select 1
        from rel_constraints c, application_group_segments s,
             application_group_segments s2
	where c.rel_segment = s.segment_id
          and c.constraint_id = :constraint_id
          and s.package_id = :package_id
          and s2.segment_id = c.required_rel_segment
          and s2.package_id = :package_id
    
       
b(select_segment_id):[db_0or1row]
 {
	    select c.rel_segment as segment_id from rel_constraints c where c.constraint_id = :constraint_id
	} 
 ------------ 
      
	    select c.rel_segment as segment_id from rel_constraints c where c.constraint_id = :constraint_id
	
       
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/defs-procs.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/defs-procs.xql)b(parameters_get_all):[db_foreach]
 {
	select v.package_id, p.parameter_name, v.attr_value
	from apm_parameters p, apm_parameter_values v
	where p.parameter_id = v.parameter_id
    } 
 ------------ 
      select v.package_id, p.parameter_name, v.attr_value
      from apm_parameters p, apm_parameter_values v
      where p.parameter_id = v.parameter_id
     
b(select_parameter_value):[db_string]
 {
            select apm_parameter_values.attr_value
            from apm_parameters,
                 apm_parameter_values
            where apm_parameter_values.package_id = :package_id
            and apm_parameter_values.parameter_id = apm_parameters.parameter_id
            and apm_parameters.parameter_name = :parameter_name
        } 
 ------------ 
      select apm_parameter_values.attr_value
      from apm_parameters, apm_parameter_values
      where apm_parameter_values.package_id = :package_id
      and apm_parameter_values.parameter_id = apm_parameters.parameter_id
      and apm_parameters.parameter_name = :parameter_name
     
b(user_name_select):[db_1row]
 {
		select first_names, last_name, email
		from persons, parties
		where person_id = :user_id
		and person_id = party_id
	    } 
 ------------ 
      select first_names, last_name, email
      from persons, parties
      where person_id = :user_id
      and person_id = party_id
     
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/delete.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/delete.xql)b(select_role_pretty_name):[db_string]
 {
    select r.pretty_name from acs_rel_roles r where r.role = :role
} 
 ------------ 
      
    select r.pretty_name from acs_rel_roles r where r.role = :role

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/delete-2.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/delete-2.xql)b(select_object_type):[db_string]
 {
	    select attr.object_type 
	      from acs_attributes attr
	     where attr.attribute_id = :attribute_id
	} 
 ------------ 
      
	    select attr.object_type 
	      from acs_attributes attr
	     where attr.attribute_id = :attribute_id
	
       
FILES: TCL(c:/temp/openacs5/packages/acs-lang/www/admin/edit-description.tcl) XML(c:/temp/openacs5/packages/acs-lang/www/admin/edit-description.xql)b(select_description):[db_1row]
 {} 
 ------------ 
        select lmk.description,
               (select lm.message as message
                from   lang_messages lm
                where    lm.package_key= :package_key
                and    lm.message_key = :message_key
                and    locale = :default_locale) as org_message
        from   lang_message_keys lmk
        where  lmk.package_key = :package_key 
        and    lmk.message_key = :message_key
     
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/users/become.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/users/become.xql)q(password):[]
 "select password from users where user_id=$user_id" 
 ------------ 
      select password from users where user_id=$user_id
       
FILES: TCL(c:/temp/openacs5/packages/acs-authentication/tcl/sync-procs.tcl) XML(c:/temp/openacs5/packages/acs-authentication/tcl/sync-procs.xql)b(select_entry):[db_1row]
 {
        select e.entry_id,
               e.job_id,
               e.entry_time,
               e.operation,
               j.authority_id,
               e.username,
               e.user_id,
               e.success_p,
               e.message,
               e.element_messages
        from   auth_batch_job_entries e,
               auth_batch_jobs j
        where  e.entry_id = :entry_id
        and    j.job_id = e.job_id
    } 
 ------------ 
            select e.entry_id,
                   to_char(e.entry_time, 'YYYY-MM-DD HH24:MI:SS') as entry_time,
                   e.operation,
                   a.authority_id,
                   a.pretty_name as authority_pretty_name,
                   e.job_id,
                   e.username,
                   e.user_id,
                   e.success_p,
                   e.message,
                   e.element_messages
            from auth_batch_job_entries e,
                 auth_authorities a,
                 auth_batch_jobs j
            where e.entry_id = :entry_id
              and e.job_id = j.job_id
              and j.authority_id = a.authority_id
         
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/mapping-remove-2.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/mapping-remove-2.xql)b(delete_group_type_rel_mapping):[db_dml]
 {
	delete from group_type_rels 
	 where group_type_rel_id = :group_type_rel_id
    } 
 ------------ 
      
	delete from group_type_rels 
	 where group_type_rel_id = :group_type_rel_id
    
       
b(delete_group_rel_mapping):[db_dml]
 {
	delete from group_rels 
	 where group_rel_id = :group_rel_id
    } 
 ------------ 
      
	delete from group_rels 
	 where group_rel_id = :group_rel_id
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/apm/package-add-2.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/apm/package-add-2.xql)b(apm_version_uri_unique_ck):[db_string]
 {
	    select decode(count(*), 0, 0, 1) from apm_package_versions 
	    where version_uri = :version_uri
	} 
 ------------ 
	    select case when count(*) =  0 then 0 else 1 end from apm_package_versions 
	    where version_uri = :version_uri
	
       
b(apm_uri_unique_ck):[db_string]
 {
	    select decode(count(*), 0, 0, 1) from apm_package_types 
	    where package_uri = :package_uri
	} 
 ------------ 
	    select case when count(*) = 0 then 0 else 1 end from apm_package_types 
	    where package_uri = :package_uri
	
       
b(apm_package_add_doubleclick):[db_string]
 {
	select decode(count(*), 0, 0, 1) from apm_package_versions
	where version_id = :version_id
    } 
 ------------ 
	select case when count(*) = 0 then 0 else 1 end from apm_package_versions
	where version_id = :version_id
    
       
b(apm_name_unique_ck):[db_string]
 {
	    select decode(count(*), 0, 0, 1) from apm_package_types 
	    where pretty_name = :pretty_name
	} 
 ------------ 
	    select case when count(*) = 0 then 0 else 1 end from apm_package_types 
	    where pretty_name = :pretty_name
	
       
b(apm_pretty_plural_unique_ck):[db_string]
 {
	    select decode(count(*), 0, 0, 1) from apm_package_types 
	    where pretty_plural = :pretty_plural
	} 
 ------------ 
	    select case when count(*) = 0 then 0 else 1 end from apm_package_types 
	    where pretty_plural = :pretty_plural
	
       
FILES: TCL(c:/temp/openacs5/packages/acs-service-contract/tcl/msg-type-procs.tcl) XML(c:/temp/openacs5/packages/acs-service-contract/tcl/msg-type-procs.xql)b(select_name):[db_1row]
 {} 
 ------------ 
        select msg_type_name as name
        from   acs_sc_msg_types 
        where  msg_type_id = :msg_type_id
     
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/add.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/add.xql)b(object_pretty_name):[db_string]
 {
    select t.pretty_name 
      from acs_object_types t
     where t.object_type = :object_type
} 
 ------------ 
      
    select t.pretty_name 
      from acs_object_types t
     where t.object_type = :object_type

       
b(select_datatypes):[db_foreach]
 {
    select d.datatype
      from acs_datatypes d
     order by lower(d.datatype)
} 
 ------------ 
      
    select d.datatype
      from acs_datatypes d
     order by lower(d.datatype)

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/change-join-policy.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/change-join-policy.xql)b(group_info):[db_1row]
 {
    select g.group_name, g.join_policy
      from groups g
     where g.group_id = :group_id
} 
 ------------ 
      
    select g.group_name, g.join_policy
      from groups g
     where g.group_id = :group_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/shared/portrait-bits.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/shared/portrait-bits.xql)q(get_item_id):[db_0or1row]
 "" 
 ------------ 
         select c.item_id
         from acs_rels a, cr_items c
         where a.object_id_two = c.item_id
           and a.object_id_one = :user_id
           and a.rel_type = 'user_portrait_rel'
       
FILES: TCL(c:/temp/openacs5/packages/acs-content-repository/tcl/acs-content-repository-procs.tcl) XML(c:/temp/openacs5/packages/acs-content-repository/tcl/acs-content-repository-procs.xql)b(delete_files):[db_dml]
 { *SQL* } 
 ------------ 
      delete from cr_files_to_delete
       
b(fetch_paths):[db_foreach]
 {

      delete from cr_files_to_delete
      
} 
 ------------ 
 SELECT distinct crftd.path, crftd.storage_area_key
   FROM cr_files_to_delete crftd
  WHERE not exists (SELECT 1
                      FROM cr_revisions r
                     WHERE r.content = crftd.path)
       
b(insert_mime_type):[db_dml]
 {} 
 ------------ 
	    insert into cr_mime_types
	    (mime_type, file_extension)
	    select
	    :mime_type, :extension
	    from dual
	    where not exists (select 1 from cr_mime_types where mime_type = :mime_type)
       
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/community-core-2-procs.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/community-core-2-procs.xql)b(select_user):[db_1row]
 {} 
 ------------ 
select user_id, screen_name, last_visit, second_to_last_visit,
first_names, last_name, email, first_names || ' ' || last_name as full_name
from users, parties, persons
where 
users.user_id = parties.party_id and
users.user_id = persons.person_id and
user_id= :user_id
 
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/relations/change-member-state.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/relations/change-member-state.xql)b(update_member_state):[db_dml]
 {
    update membership_rels
    set member_state = :member_state
    where rel_id = :rel_id
} 
 ------------ 
      
    update membership_rels
    set member_state = :member_state
    where rel_id = :rel_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/site-nodes-procs.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/site-nodes-procs.xql)b(mount_object):[db_dml]
 {} 
 ------------ 
            update site_nodes
            set object_id = :object_id
            where node_id = :node_id
         
b(rename_node):[db_dml]
 {

            update site_nodes
            set object_id = :object_id
            where node_id = :node_id
        
} 
 ------------ 
            update site_nodes
            set    name = :name
            where  node_id = :node_id
         
b(get_root_node_id):[db_string]
 {

            update site_nodes
            set    name = :name
            where  node_id = :node_id
        
} 
 ------------ 
            select node_id
            from site_nodes
            where parent_id is null
         
b(unmount_object):[db_dml]
 {

            select node_id
            from site_nodes
            where parent_id is null
        
} 
 ------------ 
            update site_nodes
            set object_id = null
            where node_id = :node_id
         
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/add-2.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/add-2.xql)b(update_rel_type_mapping):[db_dml]
 {
    insert into group_type_allowed_rels
    (constraint_id, group_type, rel_type)
    values
    (:constraint_id, :object_type, :rel_type)
} 
 ------------ 
      
    insert into group_type_allowed_rels
    (constraint_id, group_type, rel_type)
    values
    (:constraint_id, :object_type, :rel_type)

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/one.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/one.xql)b(select_role_props):[db_0or1row]
 {
    select r.pretty_name, r.pretty_plural
      from acs_rel_roles r 
     where r.role = :role
} 
 ------------ 
      
    select r.pretty_name, r.pretty_plural
      from acs_rel_roles r 
     where r.role = :role

       
b(select_rel_types_one):[db_multirow]
 {
    select r.rel_type as role, t.pretty_name, r.rel_type,
           decode(r.role_one,:role,'Side one', 'Side two') as side
      from acs_object_types t, acs_rel_types r
     where t.object_type = r.rel_type
       and (r.role_one = :role or r.role_two = :role)
     order by side, t.pretty_name
} 
 ------------ 
      
    select r.rel_type as role, t.pretty_name, r.rel_type,
           case when r.role_one = :role then 'Side one' else 'Side two' end as side
      from acs_object_types t, acs_rel_types r
     where t.object_type = r.rel_type
       and (r.role_one = :role or r.role_two = :role)
     order by side, t.pretty_name

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/delete-2.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/delete-2.xql)b(select_group_ids):[db_list]
 {
	    select o.object_id
	    from acs_objects o, acs_object_party_privilege_map perm
	    where perm.object_id = o.object_id
              and perm.party_id = :user_id
              and perm.privilege = 'delete'
	      and o.object_type = :group_type
	} 
 ------------ 
      
	    select distinct o.object_id
	    from acs_objects o, all_object_party_privilege_map perm
	    where perm.object_id = o.object_id
              and perm.party_id = :user_id
              and perm.privilege = 'delete'
	      and o.object_type = :group_type
	
       
b(select_type_info):[db_0or1row]
 {
    select t.table_name, t.package_name
      from acs_object_types t
     where t.object_type=:group_type
} 
 ------------ 
      
    select t.table_name, t.package_name
      from acs_object_types t
     where t.object_type=:group_type

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/value-delete.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/value-delete.xql)b(select_pretty_name):[db_0or1row]
 {
    select v.pretty_name
      from acs_enum_values v
     where v.attribute_id = :attribute_id
       and v.enum_value = :enum_value
} 
 ------------ 
      
    select v.pretty_name
      from acs_enum_values v
     where v.attribute_id = :attribute_id
       and v.enum_value = :enum_value

       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/apm/version-parameter-values.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/apm/version-parameter-values.xql)b(apm_all_elements):[db_foreach]
 {
select element_id, element_name, description
from   ad_parameter_elements
where  version_id = :version_id
order by element_name
} 
 ------------ 
      
select element_id, element_name, description
from   ad_parameter_elements
where  version_id = :version_id
order by element_name

       
b(apm_value):[db_list]
 {
	select value from ad_parameter_values where element_id = :element_id
    } 
 ------------ 
      
	select value from ad_parameter_values where element_id = :element_id
    
       
b(apm_package_by_version_id):[db_1row]
 {
    select package_name, version_name, package_id from apm_package_version_info where version_id = :version_id
} 
 ------------ 
      
    select package_name, version_name, package_id from apm_package_version_info where version_id = :version_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/relations/add.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/relations/add.xql)b(group_info):[db_1row]
 {
    select group_name, join_policy
    from groups
    where group_id = :group_id
} 
 ------------ 
      
    select group_name, join_policy
    from groups
    where group_id = :group_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/acs-permissions-procs.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/acs-permissions-procs.xql)b(select_inherit_p):[db_string]
 {} 
 ------------ 
            select case when security_inherit_p = 't' then 1 else 0 end
            from acs_objects
            where object_id = :object_id
         
b(set_not_inherit):[db_dml]
 {

            select case when security_inherit_p = 't' then 1 else 0 end
            from acs_objects
            where object_id = :object_id
        
} 
 ------------ 
            update acs_objects
            set security_inherit_p = 'f'
            where object_id = :object_id
         
b(set_inherit):[db_dml]
 {

            update acs_objects
            set security_inherit_p = 'f'
            where object_id = :object_id
        
} 
 ------------ 
            update acs_objects
            set security_inherit_p = 't'
            where object_id = :object_id
         
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/tcl/group-type-procs.tcl) XML(c:/temp/openacs5/packages/acs-subsite/tcl/group-type-procs.xql)b(select_group_id_column):[db_string]
 {
	    select upper(id_column) from acs_object_types where object_type='group'
	} 
 ------------ 
      
	    select upper(id_column) from acs_object_types where object_type='group'
	
       
b(supertype_table_column):[db_1row]
 {
	    select t.table_name as references_table,
                   t.id_column as references_column
  	      from acs_object_types t
	     where t.object_type = :supertype
	} 
 ------------ 
      
	    select t.table_name as references_table,
                   t.id_column as references_column
  	      from acs_object_types t
	     where t.object_type = :supertype
	
       
b(insert_group_type):[db_dml]
 {} 
 ------------ 
		insert into group_types (group_type) values (:group_type)
	 
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/delete.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/delete.xql)b(select_subtypes):[db_foreach]
 {
	select t.object_type as group_type, t.pretty_name
          from acs_object_types t
         where t.supertype = :group_type
    } 
 ------------ 
      
	select t.object_type as group_type, t.pretty_name
          from acs_object_types t
         where t.supertype = :group_type
    
       
b(groups_of_this_type):[db_string]
 {
    select count(o.object_id) 
      from acs_objects o
     where o.object_type = :group_type
} 
 ------------ 
      
    select count(o.object_id) 
      from acs_objects o
     where o.object_type = :group_type

       
b(select_pretty_name):[db_0or1row]
 {
    select t.pretty_name as group_type_pretty_name
      from acs_object_types t
     where t.object_type = :group_type
} 
 ------------ 
      
    select t.pretty_name as group_type_pretty_name
      from acs_object_types t
     where t.object_type = :group_type

       
b(select_rel_types):[db_foreach]
 {
	select rel.rel_type, t.pretty_name
          from acs_rel_types rel, acs_object_types t
         where (rel.object_type_one = :group_type 
                or rel.object_type_two = :group_type)
	   and rel.rel_type = t.object_type
    } 
 ------------ 
      
	select rel.rel_type, t.pretty_name
          from acs_rel_types rel, acs_object_types t
         where (rel.object_type_one = :group_type 
                or rel.object_type_two = :group_type)
	   and rel.rel_type = t.object_type
    
       
b(relations_to_this_type):[db_string]
 {
    select count(r.rel_id)
      from acs_rels r
     where r.rel_type in (select t.rel_type
                            from acs_rel_types t
                           where t.object_type_one = :group_type
                              or t.object_type_two = :group_type)
} 
 ------------ 
      
    select count(r.rel_id)
      from acs_rels r
     where r.rel_type in (select t.rel_type
                            from acs_rel_types t
                           where t.object_type_one = :group_type
                              or t.object_type_two = :group_type)

       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/users/user-add-3.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/users/user-add-3.xql)q(unused):[db_string]
 "select email from 
parties where party_id = :admin_user_id" 
 ------------ 
      select email from 
parties where party_id = :admin_user_id
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/users/new.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/users/new.xql)b(select_type_info):[db_1row]
 {
    select t.pretty_name as user_type_pretty_name,
           t.table_name
      from acs_object_types t
     where t.object_type = :user_type
} 
 ------------ 
      
    select t.pretty_name as user_type_pretty_name,
           t.table_name
      from acs_object_types t
     where t.object_type = :user_type

       
b(creation_name_query):[db_string]
 {
	    select p.first_names || ' ' || p.last_name 
	              || ' (' || pa.email || ')'
            from persons p, parties pa
            where p.person_id = pa.party_id and p.person_id = :creation_user
	    } 
 ------------ 
      
	    select p.first_names || ' ' || p.last_name 
	              || ' (' || pa.email || ')'
            from persons p, parties pa
            where p.person_id = pa.party_id and p.person_id = :creation_user
	    
       
b(group_info):[db_1row]
 {
    select group_name as add_to_group_name, 
           join_policy as add_to_group_join_policy
    from groups
    where group_id = :add_to_group_id
} 
 ------------ 
      
    select group_name as add_to_group_name, 
           join_policy as add_to_group_join_policy
    from groups
    where group_id = :add_to_group_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/pvt/unsubscribe.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/pvt/unsubscribe.xql)FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/object-procs.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/object-procs.xql)b(magic_object_select):[db_string]
 {
	select object_id from acs_magic_objects where name = :name
    } 
 ------------ 
      
	select object_id from acs_magic_objects where name = :name
    
       
b(object_type_select):[db_string]
 {
        select object_type
        from acs_objects
        where object_id = :object_id
    } 
 ------------ 
      
        select object_type
        from acs_objects
        where object_id = :object_id
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/object-type-procs.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/object-type-procs.xql)q(object_types):[db_foreach]
 "$sql" 
 ------------ 
        $sql
       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/tcl/apm-admin-procs.tcl) XML(c:/temp/openacs5/packages/acs-admin/tcl/apm-admin-procs.xql)b(apm_parameter_sections):[db_list]
 {
        select distinct(section_name) 
        from apm_parameters
        where package_key = :package_key
    } 
 ------------ 
      
	select distinct(section_name) 
	from apm_parameters
	where package_key = :package_key
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/community-core-procs.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/community-core-procs.xql)b(select_rel_id):[db_string]
 {*SQL*} 
 ------------ 

	select rel_id
        from cc_users
        where user_id = :user_id

       
b(user_id_from_username):[db_string]
 {} 
 ------------ 

            select user_id
            from   users
            where  lower(username) = lower(:username)
            and    authority_id =:authority_id

       
b(user_select):[db_string]
 {


	select rel_id
        from cc_users
        where user_id = :user_id

      
} 
 ------------ 
      
	select user_id from cc_users where lower(email) = lower(:email)
    
       
b(user_update):[db_dml]
 {


            select user_id
            from   users
            where  lower(username) = lower(:username)
            and    authority_id =:authority_id

      
} 
 ------------ 
      
	update users
        set    [join $cols ", "]
        where  user_id = :user_id
    
       
b(select_user_id_by_screen_name):[db_string]
 {

      
	select user_id from cc_users where lower(email) = lower(:email)
    
      
} 
 ------------ 

	select user_id from users where lower(screen_name) = lower(:screen_name)

       
b(select_bio):[db_0or1row]
 {

      
	update users
        set    [join $cols ", "]
        where  user_id = :user_id
    
      
} 
 ------------ 
          select attr_value as bio
          from acs_attribute_values
          where object_id = :person_id
          and attribute_id =
             (select attribute_id
              from acs_attributes
              where object_type = 'person'
              and attribute_name = 'bio')
       
b(group_select):[db_string]
 {


	select user_id from users where lower(screen_name) = lower(:screen_name)

      
} 
 ------------ 
      
	select group_id from groups where group_name = :name
    
       
b(user_select):[db_string]
 {

      
	select group_id from groups where group_name = :name
    
      
} 
 ------------ 
      
	select user_id from cc_users where lower(screen_name) = lower(:screen_name)
    
       
b(get_person):[db_dml]
 {

          select attr_value as bio
          from acs_attribute_values
          where object_id = :person_id
          and attribute_id =
             (select attribute_id
              from acs_attributes
              where object_type = 'person'
              and attribute_name = 'bio')
      
} 
 ------------ 
      
	select first_names, last_name
          from persons 
         where person_id = :person_id
    
       
b(email_from_party):[db_string]
 {

      
	select user_id from cc_users where lower(screen_name) = lower(:screen_name)
    
      
} 
 ------------ 

	select email from parties where party_id = :party_id

       
b(insert_bio):[db_dml]
 {

      
	select first_names, last_name
          from persons 
         where person_id = :person_id
    
      
} 
 ------------ 
        insert into acs_attribute_values
	(object_id, attribute_id, attr_value)
	values 
	(:person_id, (select attribute_id
          from acs_attributes
          where object_type = 'person'
          and attribute_name = 'bio'), :bio)
       
b(update_bio):[db_dml]
 {

        insert into acs_attribute_values
	(object_id, attribute_id, attr_value)
	values 
	(:person_id, (select attribute_id
          from acs_attributes
          where object_type = 'person'
          and attribute_name = 'bio'), :bio)
      
} 
 ------------ 
        update acs_attribute_values
	set attr_value = :bio
	where object_id = :person_id
	and attribute_id =
          (select attribute_id
          from acs_attributes
          where object_type = 'person'
          and attribute_name = 'bio')
       
b(update_question_answer):[db_dml]
 {


	select email from parties where party_id = :party_id

      
} 
 ------------ 

            update users
            set    password_question = :password_question,
                   password_answer = :password_answer
            where  user_id = :user_id

       
b(select_party_id):[db_string]
 {


            update users
            set    password_question = :password_question,
                   password_answer = :password_answer
            where  user_id = :user_id

      
} 
 ------------ 
      
        select party_id 
        from   parties 
        where  lower(email) = lower(:email)

       
b(party_update):[db_dml]
 {

        update acs_attribute_values
	set attr_value = :bio
	where object_id = :person_id
	and attribute_id =
          (select attribute_id
          from acs_attributes
          where object_type = 'person'
          and attribute_name = 'bio')
      
} 
 ------------ 
      
	update parties
        set    [join $cols ", "]
        where  party_id = :party_id

       
b(update_person):[db_dml]
 {

      
	update parties
        set    [join $cols ", "]
        where  party_id = :party_id

      
} 
 ------------ 
      
	update persons
           set first_names = :first_names, 
               last_name = :last_name
         where person_id = :person_id
    
       
b(get_person_name):[db_1row]
 {

      
	update persons
           set first_names = :first_names, 
               last_name = :last_name
         where person_id = :person_id
    
      
} 
 ------------ 
      
          select first_names||' '||last_name as person_name
            from persons
           where person_id = :person_id
          
       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/users/one.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/users/one.xql)q(all_group_membership):[db_multirow]
 "
  select groups.group_id, groups.group_name
     from groups, group_member_map gm
     where groups.group_id = gm.group_id and gm.member_id=:user_id
  order by lower(groups.group_name)" 
 ------------ 
    select distinct lower(groups.group_name) as group_name
      from groups, group_member_map gm
     where groups.group_id = gm.group_id and gm.member_id=:user_id
  order by lower(groups.group_name)
   
q(get_item_id):[db_0or1row]
 "select live_revision as revision_id, nvl(title,'view this portrait') portrait_title
from acs_rels a, cr_items c, cr_revisions cr 
where a.object_id_two = c.item_id
and c.live_revision = cr.revision_id
and a.object_id_one = :user_id
and a.rel_type = 'user_portrait_rel'" 
 ------------ 
      select live_revision as revision_id,
          coalesce(title,'view this portrait') as portrait_title
      from acs_rels a, cr_items c, cr_revisions cr 
      where a.object_id_two = c.item_id
         and c.live_revision = cr.revision_id
         and a.object_id_one = :user_id
         and a.rel_type = 'user_portrait_rel'
       
q(direct_group_membership):[db_multirow]
 "
  select group_id, rel_id, party_names.party_name as group_name
    from (select /*+ ORDERED */ DISTINCT rels.rel_id, object_id_one as group_id, 
                 object_id_two
            from acs_rels rels, all_object_party_privilege_map perm
           where perm.object_id = rels.rel_id
                 and perm.privilege = 'read'
                 and rels.rel_type = 'membership_rel'
                 and rels.object_id_two = :user_id) r, 
         party_names 
   where r.group_id = party_names.party_id
order by lower(party_names.party_name)" 
 ------------ 
  select group_id, rel_id, party_names.party_name as group_name
    from (select /*+ ORDERED */ DISTINCT rels.rel_id, object_id_one as group_id, 
                 object_id_two
            from acs_rels rels
           where rels.rel_type = 'membership_rel'
                 and rels.object_id_two = :user_id) r, 
         party_names 
   where r.group_id = party_names.party_id
order by lower(party_names.party_name)
   
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/deprecated-utilities-procs.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/deprecated-utilities-procs.xql)q(nmc_getnewidnumber):[db_string]
 "select unique :id_name from id_numbers" 
 ------------ 
      select unique :id_name from id_numbers
       
q(id_number_update):[db_dml]
 "update id_numbers set :id_name = :id_name + 1" 
 ------------ 
      update id_numbers set :id_name = :id_name + 1
       
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/apm-xml-procs.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/apm-xml-procs.xql)b(callback_info):[db_foreach]
 {} 
 ------------ 
        select type,
               proc
        from apm_package_callbacks
        where version_id = :version_id
       
b(owner_info):[db_foreach]
 {

        select type,
               proc
        from apm_package_callbacks
        where version_id = :version_id
      
} 
 ------------ 
      
        select owner_uri, owner_name
        from   apm_package_owners
        where  version_id = :version_id
        order  by sort_key, owner_uri
    
       
b(package_version_select):[db_1row]
 {

      
        select owner_uri, owner_name
        from   apm_package_owners
        where  version_id = :version_id
        order  by sort_key, owner_uri
    
      
} 
 ------------ 
      
        select t.package_key, 
               t.package_uri, 
               t.pretty_name, 
               t.pretty_plural, 
               t.package_type,
	       t.initial_install_p, 
               t.singleton_p, 
               v.*
        from   apm_package_versions v, 
               apm_package_types t
        where  v.version_id = :version_id
        and    v.package_key = t.package_key
    
       
b(parameter_info):[db_foreach]
 {

      
        select t.package_key, 
               t.package_uri, 
               t.pretty_name, 
               t.pretty_plural, 
               t.package_type,
	       t.initial_install_p, 
               t.singleton_p, 
               v.*
        from   apm_package_versions v, 
               apm_package_types t
        where  v.version_id = :version_id
        and    v.package_key = t.package_key
    
      
} 
 ------------ 
      
	select parameter_name, 
               description, 
               datatype, 
               section_name, 
               default_value, 
               min_n_values, 
               max_n_values
        from   apm_parameters
	where  package_key = :package_key
        order  by parameter_name
    
       
b(dependency_info):[db_foreach]
 {

      
	select parameter_name, 
               description, 
               datatype, 
               section_name, 
               default_value, 
               min_n_values, 
               max_n_values
        from   apm_parameters
	where  package_key = :package_key
        order  by parameter_name
    
      
} 
 ------------ 
      
        select dependency_type, 
               service_uri, 
               service_version
        from   apm_package_dependencies
        where  version_id = :version_id
        order by dependency_type, service_uri
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/users/search.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/users/search.xql)q(user_group_name_from_id):[db_string]
 "select group_name from user_groups where group_id = :limit_to_users_in_group_id" 
 ------------ 
      select group_name from user_groups where group_id = :limit_to_users_in_group_id
       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/apm/parameter-edit.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/apm/parameter-edit.xql)b(param_info):[db_1row]
 { 
    select parameter_name, datatype, description, default_value, min_n_values, max_n_values, parameter_id, 
    section_name, default_value
      from apm_parameters
     where parameter_id = :parameter_id
} 
 ------------ 
       
    select parameter_name, datatype, description, default_value, min_n_values, max_n_values, parameter_id, 
    section_name, default_value
      from apm_parameters
     where parameter_id = :parameter_id

       
b(apm_get_name):[db_1row]
 { 
    select pretty_name, version_name, package_key
      from apm_package_version_info
     where version_id = :version_id
} 
 ------------ 
       
    select pretty_name, version_name, package_key
      from apm_package_version_info
     where version_id = :version_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/mapping-remove.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/mapping-remove.xql)b(select_info):[db_0or1row]
 {
    select g.rel_type, g.group_type, 
           t.pretty_name as rel_pretty_name, t2.pretty_name as group_type_pretty_name
      from acs_object_types t, acs_object_types t2, group_type_rels g
     where g.group_rel_type_id = :group_rel_type_id
       and t.object_type = g.rel_type
       and t2.object_type = g.group_type
} 
 ------------ 
      
    select g.rel_type, g.group_type, 
           t.pretty_name as rel_pretty_name, t2.pretty_name as group_type_pretty_name
      from acs_object_types t, acs_object_types t2, group_type_rels g
     where g.group_rel_type_id = :group_rel_type_id
       and t.object_type = g.rel_type
       and t2.object_type = g.group_type

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/pvt/alerts.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/pvt/alerts.xql)q(name_get):[db_1row]
 "select first_names, last_name, email, url from persons, parties where persons.person_id = parties.party_id and party_id =:user_id" 
 ------------ 
      select first_names, last_name, email, url from persons, parties where persons.person_id = parties.party_id and party_id =:user_id
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/tcl/party-procs.tcl) XML(c:/temp/openacs5/packages/acs-subsite/tcl/party-procs.xql)b(package_select):[db_0or1row]
 {
	    select t.package_name, lower(t.id_column) as id_column
	      from acs_object_types t
	     where t.object_type = :party_type
	} 
 ------------ 
      
	    select t.package_name, lower(t.id_column) as id_column
	      from acs_object_types t
	     where t.object_type = :party_type
	
       
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/widgets-procs.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/widgets-procs.xql)b(currency_info):[db_foreach]
 {
	select currency_name, iso 
	from currency_codes 
	where supported_p='t'
	order by currency_name 
    } 
 ------------ 
      
	select currency_name, iso 
	from currency_codes 
	where supported_p='t'
	order by currency_name 
    
       
b(all_states):[db_foreach]
 {
	select state_name, abbrev from us_states order by state_name
    } 
 ------------ 
      
	select state_name, abbrev from states order by state_name
    
       
b(all_countries):[db_foreach]
 {
	select default_name, iso from countries order by default_name 
    } 
 ------------ 
      
	select default_name, iso from countries order by default_name 
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/utilities-procs.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/utilities-procs.xql)q(double_click_check):[db_0or1row]
 "
		
		select 1 as one
		from $table_name
		where $id_column_name = :generated_id
		
	    " 
 ------------ 
      
		
		select 1 as one
		from $table_name
		where $id_column_name = :generated_id
		
	    
       
b(zip_code_exists):[db_0or1row]
 {
		    select 1
		      from dual
		     where exists (select 1
				     from zip_codes
				    where zip_code like :zip_5)
		} 
 ------------ 
		    select 1
		      from dual
		     where exists (select 1
				     from zip_codes
				    where zip_code like :zip_5)
       
b(email_unique_p):[db_string]
 {} 
 ------------ 
    select count(*)
    from dual
    where not exists (select 1
                      from parties
                      where email = lower(:email))
   
FILES: TCL(c:/temp/openacs5/packages/acs-lang/tcl/localization-procs.tcl) XML(c:/temp/openacs5/packages/acs-lang/tcl/localization-procs.xql)b(lc_currency_select):[db_0or1row]
 {} 
 ------------ 
      
	select fractional_digits,
               html_entity 
        from   currency_codes 
        where  iso = :currency
    
       
b(all_timezones):[db_list_of_lists]
 {

      
	select fractional_digits,
               html_entity 
        from   currency_codes 
        where  iso = :currency
    
      
} 
 ------------ 
      select distinct tz, gmt_offset from timezones order by tz
       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/apm/version-edit-2.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/apm/version-edit-2.xql)b(apm_version_uri_unique_ck):[db_string]
 {
    select decode(count(*), 0, 0, 1) from apm_package_versions 
    where version_uri = :version_uri
} 
 ------------ 
	    select case when count(*) = 0 then 0 else 1 end from apm_package_versions 
	    where version_uri = :version_uri
	
       
b(old_version_info):[db_1row]
 {} 
 ------------ 
      
	    select version_name as old_version_name, version_uri as old_version_uri 
	    from apm_package_versions
	    where version_id = $version_id
	
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/enum-add.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/enum-add.xql)b(select_attr_name):[db_1row]
 {
    select a.pretty_name as attribute_pretty_name
      from acs_attributes a
     where a.attribute_id = :attribute_id
} 
 ------------ 
      
    select a.pretty_name as attribute_pretty_name
      from acs_attributes a
     where a.attribute_id = :attribute_id

       
b(number_values):[db_string]
 {
    select count(*) 
      from acs_enum_values v
     where v.attribute_id = :attribute_id
} 
 ------------ 
      
    select count(*) 
      from acs_enum_values v
     where v.attribute_id = :attribute_id

       
b(select_current_values):[db_multirow]
 {
    select v.enum_value
      from acs_enum_values v
     where v.attribute_id = :attribute_id
     order by v.sort_order
} 
 ------------ 
      
    select v.enum_value
      from acs_enum_values v
     where v.attribute_id = :attribute_id
     order by v.sort_order

       
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/request-processor-procs.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/request-processor-procs.xql)b(acs_kernel_id_get):[db_string]
 {} 
 ------------ 
      
	select package_id from apm_packages
	where package_key = 'acs-kernel'
    
       
b(acs_admin_id_get):[db_string]
 {
        select package_id from apm_packages
        where package_key = 'acs-admin'
    } 
 ------------ 
      
        select package_id from apm_packages
        where package_key = 'acs-admin'
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/elements-display-list.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/elements-display-list.xql)q(relations_query):[db_multirow]
 "
select r.rel_id, 
       party_names.party_name as element_name
from (select /*+ ORDERED */ DISTINCT rels.rel_id, object_id_two
      from $extra_tables acs_rels rels, all_object_party_privilege_map perm
      where perm.object_id = rels.rel_id
        and perm.party_id = :user_id
        and perm.privilege = 'read'
        and rels.rel_type = :rel_type
        and rels.object_id_one = :group_id $extra_where_clauses) r, 
     party_names 
where r.object_id_two = party_names.party_id
order by lower(element_name)
" 
 ------------ 

select r.rel_id, 
       party_names.party_name as element_name
from (select DISTINCT rels.rel_id, object_id_two
      from $extra_tables acs_rels rels, all_object_party_privilege_map perm
      where perm.object_id = rels.rel_id
        and perm.party_id = :user_id
        and perm.privilege = 'read'
        and rels.rel_type = :rel_type
        and rels.object_id_one = :group_id $extra_where_clauses) r, 
     party_names 
where r.object_id_two = party_names.party_id
order by element_name

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/parties/new.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/parties/new.xql)b(select_type_info):[db_1row]
 {
    select t.pretty_name as party_type_pretty_name,
           t.table_name
      from acs_object_types t
     where t.object_type = :party_type
} 
 ------------ 
      
    select t.pretty_name as party_type_pretty_name,
           t.table_name
      from acs_object_types t
     where t.object_type = :party_type

       
b(group_info):[db_1row]
 {
    select group_name as add_to_group_name, 
           join_policy as add_to_group_join_policy
    from groups
    where group_id = :add_to_group_id
} 
 ------------ 
      
    select group_name as add_to_group_name, 
           join_policy as add_to_group_join_policy
    from groups
    where group_id = :add_to_group_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/tcl/rel-types-procs.tcl) XML(c:/temp/openacs5/packages/acs-subsite/tcl/rel-types-procs.xql)b(delete_rel_type):[db_dml]
 {} 
 ------------ 
delete from group_type_rels
where group_type= :group_type
and rel_type= :rel_type
 
b(update_type):[db_dml]
 {FOO} 
 ------------ 
update acs_object_types set dynamic_p='t' where object_type = :rel_type
 
b(insert_rel_type):[db_dml]
 {

delete from group_type_rels
where group_type= :group_type
and rel_type= :rel_type

} 
 ------------ 
insert into group_type_rels
(group_rel_type_id, group_type, rel_type)
values
(acs_object_id_seq.nextval, :group_type, :rel_type)
 
b(parent_rel_type):[db_0or1row]
 {
	    select table_name as references_table,
	           id_column as references_column
	      from acs_object_types
	     where object_type=:supertype
	} 
 ------------ 
      
	    select table_name as references_table,
	           id_column as references_column
	      from acs_object_types
	     where object_type=:supertype
	
       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/users/complex-search.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/users/complex-search.xql) \
"select group_name from gromatch found but not categorized for "user_group_name_from_id" (in c:/temp/openacs5/packages/acs-admin/www/users/complex-search.tcl) [db_string]
  
 ------------ 
      select group_name from groups where group_id = :limit_to_users_in_group_id
       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/apm/version-generate-diffs.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/apm/version-generate-diffs.xql)b(apm_package_by_version_id):[db_1row]
 {
    select package_name, version_name, package_id from apm_package_version_info where version_id = :version_id
} 
 ------------ 
      
    select package_name, version_name, package_id from apm_package_version_info where version_id = :version_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-lang/www/change-locale-include.tcl) XML(c:/temp/openacs5/packages/acs-lang/www/change-locale-include.xql)b(all_timezones):[db_list_of_lists]
 {} 
 ------------ 
        select tz || ' ' || gmt_offset as tz,
               tz
        from   timezones
     
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/users/user-add-2.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/users/user-add-2.xql)q(admin_name):[db_string]
 "select
first_names || ' ' || last_name from persons where person_id = :admin_user_id" 
 ------------ 
      select first_names || ' ' || last_name
      from persons
      where person_id = :admin_user_id
    
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/members/make-member.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/members/make-member.xql)b(get_rel_id):[db_1row]
 {} 
 ------------ 

         select distinct rel_id
         from rel_segment_party_map
         where rel_type = 'admin_rel'
           and group_id = :group_id
           and party_id = :user_id
	
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/pvt/set-on-vacation-until.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/pvt/set-on-vacation-until.xql)q(pvt_set_vacation_update):[db_dml]
 "update users set no_alerts_until = :on_vacation_until where user_id = :user_id" 
 ------------ 
      update users set no_alerts_until = :on_vacation_until where user_id = :user_id
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/user/portrait/upload-2.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/user/portrait/upload-2.xql)b(get_revision_id):[db_0or1row]
 {} 
 ------------ 

        select live_revision as revision_id
        from cr_items
        where item_id = :item_id

         
b(upload_image_info):[db_dml]
 {


        select live_revision as revision_id
        from cr_items
        where item_id = :item_id

        
} 
 ------------ 

                insert into images
                (image_id, width, height)
                values
                (:revision_id, :original_width, :original_height)

         
b(update_image_info):[db_dml]
 {


                insert into images
                (image_id, width, height)
                values
                (:revision_id, :original_width, :original_height)

        
} 
 ------------ 

	update images
	set width = :original_width, height = :original_height
	where image_id = :revision_id

         
b(get_item_id):[db_0or1row]
 {


	update images
	set width = :original_width, height = :original_height
	where image_id = :revision_id

        
} 
 ------------ 

        select object_id_two as item_id
        from acs_rels
        where object_id_one = :user_id
        and rel_type = 'user_portrait_rel'

         
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/object-types/alphabetical-index.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/object-types/alphabetical-index.xql)b(object_type_in_alphabetical_order):[db_foreach]
 {
    select object_type,
           pretty_name
      from acs_object_types
     order by lower(pretty_name)
} 
 ------------ 
      
    select object_type,
           pretty_name
      from acs_object_types
     order by lower(pretty_name)

       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/apm/package-add.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/apm/package-add.xql)b(apm_get_name):[db_1row]
 { 
    select first_names || ' ' || last_name user_name, email from cc_users where user_id = :user_id
} 
 ------------ 
       
    select first_names || ' ' || last_name as user_name, email from cc_users where user_id = :user_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/apm-file-procs.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/apm-file-procs.xql)q(get_revision_id):[db_0or1row]
 "select live_revision as revision_id
              from cr_items
             where item_id = :item_id" 
 ------------ 

        select live_revision as revision_id
          from cr_items
         where item_id = :item_id

       
q(set_item_id):[db_dml]
 "update apm_package_versions 
                               set item_id = :item_id 
                             where version_id = :version_id" 
 ------------ 

        update apm_package_versions 
        set item_id = :item_id 
        where version_id = :version_id

       
b(package_key_select):[db_1row]
 {
                                select package_key 
                                  from apm_package_version_info 
                                 where version_id = :version_id
                               } 
 ------------ 
      select package_key from apm_package_version_info where version_id = :version_id
       
b(item_exists_p):[db_1row]
 {select case when item_id is null 
                                    then 0 
                                    else item_id 
                                  end as item_id
                             from apm_package_versions 
                            where version_id = :version_id} 
 ------------ 

        select case when item_id is null then 0 else item_id end as item_id
          from apm_package_versions 
         where version_id = :version_id

       
q(db_type_keys):[db_list]
 "select db_type_key from apm_package_db_types" 
 ------------ 
      select db_type_key from apm_package_db_types
       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/apm/version-parameters.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/apm/version-parameters.xql)b(apm_package_by_version_id):[db_1row]
 {
    select pretty_name, version_name, package_key
      from apm_package_version_info 
     where version_id = :version_id
} 
 ------------ 
      
    select pretty_name, version_name, package_key
      from apm_package_version_info 
     where version_id = :version_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/tcl/group-procs.tcl) XML(c:/temp/openacs5/packages/acs-subsite/tcl/group-procs.xql)b(group_id_from_name):[db_string]
 {} 
 ------------ 
	  select group_id 
          from   groups 
          where  group_name = :group_name
       
b(package_select):[db_0or1row]
 {
        select t.package_name, t.object_type
        from acs_object_types t
        where t.object_type = (select o.object_type 
                                 from acs_objects o 
                                where o.object_id = :group_id)
    } 
 ------------ 
      
	    select t.package_name, lower(t.id_column) as id_column
	      from acs_object_types t
	     where t.object_type = :group_type
	
       
b(select_join_policy):[db_string]
 {
        select join_policy from groups where group_id = :group_id
    } 
 ------------ 
      
	    select join_policy from groups where group_id = :group_id
	
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/permissions/grant.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/permissions/grant.xql)b(select_privileges_list):[db_list]
 { } 
 ------------ 
      
  select privilege
  from acs_privileges
  order by privilege

       
b(select_privileges_hierarchy):[db_foreach]
 {

      
  select privilege
  from acs_privileges
  order by privilege

      
} 
 ------------ 
          select privilege, child_privilege
          from acs_privilege_hierarchy
          order by privilege desc, child_privilege desc
       
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/security-init.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/security-init.xql)q(secret_tokens_exists):[db_string]
 "select decode(count(*),0,0,1) from secret_tokens" 
 ------------ 

      select case when count(*) = 0 then 0 else 1 end from secret_tokens

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/permissions/perm-modify.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/permissions/perm-modify.xql)b(permissions_in_db):[db_foreach]
 {} 
 ------------ 

        select grantee_id, privilege
        from   acs_permissions
        where  object_id = :object_id
        and    privilege in ('[join $privs "', '"]')

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/rel-type-remove-2.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/rel-type-remove-2.xql)b(select_group_type):[db_1row]
 {
	select g.group_type
	from group_type_rels g 
	where g.group_rel_type_id = :group_rel_type_id
    } 
 ------------ 
      
	select g.group_type
	from group_type_rels g 
	where g.group_rel_type_id = :group_rel_type_id
    
       
b(remove_relation):[db_dml]
 {
	    delete from group_type_rels where group_rel_type_id = :group_rel_type_id
	} 
 ------------ 
      
	    delete from group_type_rels where group_rel_type_id = :group_rel_type_id
	
       
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/site-node-apm-integration-procs.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/site-node-apm-integration-procs.xql)b(select_child_package_id):[db_string]
 {} 
 ------------ 
            select sn1.object_id
            from site_nodes sn1,
                 apm_packages
            where sn1.parent_id = (select sn2.node_id
                                   from site_nodes sn2
                                   where sn2.object_id = :package_id)
            and sn1.object_id = apm_packages.package_id
            and apm_packages.package_key = :package_key
         
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/tcl/rel-segments-procs.tcl) XML(c:/temp/openacs5/packages/acs-subsite/tcl/rel-segments-procs.xql)b(select_dependant_constraints):[db_foreach]
 {
	select c.constraint_id
	  from rel_constraints c
	 where c.required_rel_segment = :segment_id
    } 
 ------------ 
      
	select c.constraint_id
	  from rel_constraints c
	 where c.required_rel_segment = :segment_id
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/host-node-map/delete.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/host-node-map/delete.xql)b(host_node_delete):[db_dml]
 {
    delete from host_node_map 
    where host = :host
    and node_id = :node_id
} 
 ------------ 

    delete from host_node_map 
    where host = :host
    and node_id = :node_id

     
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/constraints/index.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/constraints/index.xql)b(select_rel_constraints):[db_multirow]
 {
    select c.constraint_id, c.constraint_name
      from rel_constraints c, acs_object_party_privilege_map perm,
           application_group_segments s1, application_group_segments s2
     where perm.object_id = c.constraint_id
       and perm.party_id = :user_id
       and perm.privilege = 'read'
       and s1.segment_id = c.rel_segment
       and s1.package_id = :package_id
       and s2.segment_id = c.required_rel_segment
       and s2.package_id = :package_id
     order by lower(c.constraint_name)
} 
 ------------ 
      
    select c.constraint_id, c.constraint_name
      from rel_constraints c
           application_group_segments s1, application_group_segments s2
     where s1.segment_id = c.rel_segment
       and s1.package_id = :package_id
       and s2.segment_id = c.required_rel_segment
       and s2.package_id = :package_id
       and exists (select 1
                   from all_object_party_privilege_map perm
                   where perm.object_id = c.constraint_id
                     and perm.party_id = :user_id
                     and perm.privilege = 'read')
     order by lower(c.constraint_name)

       
FILES: TCL(c:/temp/openacs5/packages/acs-service-contract/www/index.tcl) XML(c:/temp/openacs5/packages/acs-service-contract/www/index.xql)b(orphan_implementation):[db_multirow]
 {} 
 ------------ 
      select impl_id, impl_name, impl_pretty_name, impl_contract_name  
      from   orphan_implementations
      order  by upper(impl_name), impl_name
    
b(invalid_uninstalled_binding):[db_multirow]
 {

      select impl_id, impl_name, impl_pretty_name, impl_contract_name  
      from   orphan_implementations
      order  by upper(impl_name), impl_name
   
} 
 ------------ 
      select contract_id, contract_name, impl_name, impl_owner_name, impl_pretty_name, impl_id 
      from   invalid_uninstalled_bindings
      order  by upper(contract_name), contract_name, upper(impl_name), impl_name
    
b(valid_uninstalled_binding):[db_multirow]
 {

      select contract_id, contract_name, impl_name, impl_owner_name, impl_pretty_name, impl_id 
      from   invalid_uninstalled_bindings
      order  by upper(contract_name), contract_name, upper(impl_name), impl_name
   
} 
 ------------ 
     select contract_id, contract_name, impl_name, impl_owner_name, impl_pretty_name, impl_id 
     from   valid_uninstalled_bindings
     order  by upper(contract_name), contract_name, upper(impl_name), impl_name
    
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/apm/version-dependencies.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/apm/version-dependencies.xql)b(apm_all_dependencies):[db_foreach]
 {
	select dependency_id, service_uri, service_version
	from   apm_package_dependencies
	where  version_id = :version_id
	and    dependency_type = :dependency_type_prep
	order by service_uri
    } 
 ------------ 
      
	select dependency_id, service_uri, service_version
	from   apm_package_dependencies
	where  version_id = :version_id
	and    dependency_type = :dependency_type_prep
	order by service_uri
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/apm/bulk-intall.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/apm/bulk-intall.xql)b(version_select):[db_1row]
 {
	select pretty_name, version_name, package_key
	from apm_package_version_info i
	where version_id = :version_id
    } 
 ------------ 
      
	select pretty_name, version_name, package_key
	from apm_package_version_info i
	where version_id = :version_id
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/membership-rel-procs.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/membership-rel-procs.xql)b(update_modifying_user):[db_dml]
 {} 
 ------------ 
      
          update acs_objects set modifying_user = :user_id where object_id = :rel_id 
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/edit.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/edit.xql)b(select_role_props):[db_1row]
 {
    select r.pretty_name, r.pretty_plural
      from acs_rel_roles r 
     where r.role = :role
} 
 ------------ 
      
    select r.pretty_name, r.pretty_plural
      from acs_rel_roles r 
     where r.role = :role

       
b(update_role):[db_dml]
 {
	update acs_rel_roles r
	   set r.pretty_name = :pretty_name,
	       r.pretty_plural = :pretty_plural
	 where r.role = :role
    } 
 ------------ 
      
	update acs_rel_roles
	   set pretty_name = :pretty_name,
	       pretty_plural = :pretty_plural
	 where role = :role
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/rels-list.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/rels-list.xql)b(select_pretty_name):[db_0or1row]
 {
    select t.pretty_name as rel_type_pretty_name
      from acs_object_types t
     where t.object_type = :rel_type
} 
 ------------ 
      
    select t.pretty_name as rel_type_pretty_name
      from acs_object_types t
     where t.object_type = :rel_type

       
FILES: TCL(c:/temp/openacs5/packages/acs-content-repository/tcl/publish-procs.tcl) XML(c:/temp/openacs5/packages/acs-content-repository/tcl/publish-procs.xql)q(get_one_revision):[db_string]
 "" 
 ------------ 

             select item_id from cr_revisions where revision_id = :revision_id

       
q(get_storage_type):[db_1row]
 "
           select storage_type 
             from cr_items 
            where item_id = (select item_id 
                               from cr_revisions 
                              where revision_id = :revision_id)" 
 ------------ 

           select storage_type 
             from cr_items 
            where item_id = (select item_id 
                               from cr_revisions 
                              where revision_id = :revision_id)

       
b(cs_get_subitems_related):[db_list]
 {


             select item_id from cr_revisions where revision_id = :revision_id

      
} 
 ------------ 

      select 
        related_object_id
      from 
        cr_item_rels r, cr_items i
      where 
        r.item_id = :main_item_id
      and 
        r.relation_tag = :relation_tag
      and
        i.item_id = r.related_object_id 
      order by 
        r.order_n

       
b(i_get_image_info):[db_1row]
 {


      select 
        related_object_id
      from 
        cr_item_rels r, cr_items i
      where 
        r.item_id = :main_item_id
      and 
        r.relation_tag = :relation_tag
      and
        i.item_id = r.related_object_id 
      order by 
        r.order_n

      
} 
 ------------ 
      
    select 
      im.width, im.height, r.title as image_alt
    from 
      images im, cr_revisions r
    where 
      im.image_id = :revision_id
    and
      r.revision_id = :revision_id
  
       
b(rs_get_subitems):[db_list]
 {

      
    select 
      im.width, im.height, r.title as image_alt
    from 
      images im, cr_revisions r
    where 
      im.image_id = :revision_id
    and
      r.revision_id = :revision_id
  
      
} 
 ------------ 

      select 
        child_id
      from 
        cr_child_rels r, cr_items i
      where 
        r.parent_id = :main_item_id
      and 
        r.relation_tag = :relation_tag
      and
        i.item_id = r.child_id
      order by 
        order_n

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/rel-type-remove.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/rel-type-remove.xql)b(select_info):[db_0or1row]
 {
    select g.rel_type, g.group_type, 
           t.pretty_name as rel_pretty_name, t2.pretty_name as group_type_pretty_name
      from acs_object_types t, acs_object_types t2, group_type_rels g
     where g.group_rel_type_id = :group_rel_type_id
       and t.object_type = g.rel_type
       and t2.object_type = g.group_type
} 
 ------------ 
      
    select g.rel_type, g.group_type, 
           t.pretty_name as rel_pretty_name, t2.pretty_name as group_type_pretty_name
      from acs_object_types t, acs_object_types t2, group_type_rels g
     where g.group_rel_type_id = :group_rel_type_id
       and t.object_type = g.rel_type
       and t2.object_type = g.group_type

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/delete.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/delete.xql)b(select_subtypes):[db_foreach]
 {
	select t.object_type as rel_type, t.pretty_name
          from acs_object_types t
         where t.supertype = :rel_type
    } 
 ------------ 
      
	select t.object_type as rel_type, t.pretty_name
          from acs_object_types t
         where t.supertype = :rel_type
    
       
b(select_pretty_name):[db_string]
 {
    select t.pretty_name
      from acs_object_types t
     where t.object_type = :rel_type
} 
 ------------ 
      
    select t.pretty_name
      from acs_object_types t
     where t.object_type = :rel_type

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/tcl/attribute-procs.tcl) XML(c:/temp/openacs5/packages/acs-subsite/tcl/attribute-procs.xql)b(select_attr_info):[db_0or1row]
 {
        select a.object_type, a.attribute_name, 
               decode(a.storage,'type_specific',t.table_name,a.table_name) as table_name,
	       nvl(a.column_name, a.attribute_name) as column_name
          from acs_attributes a, acs_object_types t
         where a.attribute_id = :attribute_id
           and t.object_type = a.object_type
    } 
 ------------ 
      
        select a.object_type, a.attribute_name, 
               case when a.storage = 'type_specific' then t.table_name else a.table_name end as table_name,
	       coalesce(a.column_name, a.attribute_name) as column_name
          from acs_attributes a, acs_object_types t
         where a.attribute_id = :attribute_id
           and t.object_type = a.object_type
    
       
b(object_type_query):[db_string]
 {
	    select object_type from acs_objects where object_id = :object_id
	} 
 ------------ 
      
	    select object_type from acs_objects where object_id = :object_id
	
       
b(select_enum_values):[db_list_of_lists]
 {
		select enum.pretty_name, enum.enum_value
		from acs_enum_values enum
		where enum.attribute_id = :attribute_id 
		order by enum.sort_order
	    } 
 ------------ 
      
		select enum.pretty_name, enum.enum_value
		from acs_enum_values enum
		where enum.attribute_id = :attribute_id 
		order by enum.sort_order
	    
       
b(select_last_sort_order):[db_0or1row]
 {
        select v.sort_order as old_sort_order
          from acs_enum_values v
         where v.attribute_id = :attribute_id
           and v.enum_value = :enum_value
    } 
 ------------ 
      
        select v.sort_order as old_sort_order
          from acs_enum_values v
         where v.attribute_id = :attribute_id
           and v.enum_value = :enum_value
    
       
b(delete_enum_value):[db_dml]
 {
        delete from acs_enum_values v
        where v.attribute_id = :attribute_id
        and v.enum_value = :enum_value
    } 
 ------------ 
      
        delete from acs_enum_values v
        where v.attribute_id = :attribute_id
        and v.enum_value = :enum_value
    
       
b(insert_enum_value):[db_dml]
 {
	insert into acs_enum_values
	(attribute_id, sort_order, enum_value, pretty_name)
	select :attribute_id, :sort_order, :enum_value, :enum_value
	from dual
	where not exists (select 1 
	from acs_enum_values v2
	where v2.pretty_name = :enum_value
	and v2.attribute_id = :attribute_id)
    } 
 ------------ 
	insert into acs_enum_values
	(attribute_id, sort_order, enum_value, pretty_name)
	select :attribute_id, :sort_order, :enum_value, :enum_value
	from dual
	where not exists (select 1 
	from acs_enum_values v2
	where v2.pretty_name = :enum_value
	and v2.attribute_id = :attribute_id)
 
b(select_attribute_id):[db_string]
 {
        select a.attribute_id
          from acs_attributes a
         where a.object_type = :object_type
           and a.attribute_name = :attribute_name
    } 
 ------------ 
      
        select a.attribute_id
          from acs_attributes a
         where a.object_type = :object_type
           and a.attribute_name = :attribute_name
    
       
b(update_sort_order):[db_dml]
 {
            update acs_enum_values v
               set v.sort_order = v.sort_order - 1
             where v.attribute_id = :attribute_id
               and v.sort_order > :old_sort_order
        } 
 ------------ 
      
            update acs_enum_values v
               set v.sort_order = v.sort_order - 1
             where v.attribute_id = :attribute_id
               and v.sort_order > :old_sort_order
        
       
b(select_table):[db_0or1row]
 {
        select t.table_name
          from acs_object_types t
         where t.object_type = :object_type
    } 
 ------------ 
      
        select t.table_name
          from acs_object_types t
         where t.object_type = :object_type
    
       
q(attribute_select):[db_foreach]
 "
        select * 
          from ($package_object_view) 
         where object_id = :object_id
	" 
 ------------ 
      
        select * 
          from ($package_object_view) 
         where object_id = :object_id
	
       
FILES: TCL(c:/temp/openacs5/packages/acs-content-repository/tcl/extlink-procs.tcl) XML(c:/temp/openacs5/packages/acs-content-repository/tcl/extlink-procs.xql)b(extlink_name):[db_string]
 {} 
 ------------ 
          select label
          from cr_extlinks
          where extlink_id = :item_id
       
b(extlink_update_extlink):[db_dml]
 {

          select label
          from cr_extlinks
          where extlink_id = :item_id
      
} 
 ------------ 

        update cr_extlinks
        set url = :url,
          label = :label,
          description = :description
        where extlink_id = :extlink_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/relations/one.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/relations/one.xql)b(select_member_state):[db_0or1row]
 {
    select member_state from membership_rels
    where rel_id = :rel_id
} 
 ------------ 
      
    select member_state from membership_rels
    where rel_id = :rel_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/acs-kernel-procs.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/acs-kernel-procs.xql)b(admin_exists_p):[]
 {} 
 ------------ 
      
        select 1 as admin_exists_p
        from dual
        where exists (select 1
                      from all_object_party_privilege_map m, users u, acs_magic_objects amo
                      where m.object_id = amo.object_id
                        and amo.name = 'security_context_root'
                        and m.party_id = u.user_id
                        and m.privilege = 'admin')
    
       
b(acs_admin_node_p):[db_string]
 {
	select case when count(object_id) = 0 then 0 else 1 end
	from site_nodes
	where object_id = (select package_id 
	                   from apm_packages 
	                   where package_key = 'acs-admin')
    } 
 ------------ 
      
        select case when count(object_id) = 0 then 0 else 1 end
        from site_nodes
        where object_id = (select package_id 
                           from apm_packages 
                           where package_key = 'acs-admin')
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/tcl/subsite-callback-procs.tcl) XML(c:/temp/openacs5/packages/acs-subsite/tcl/subsite-callback-procs.xql)b(select_object_type):[db_1row]
 {
	    select object_type
	      from acs_objects 
	     where object_id = :object_id
	} 
 ------------ 
      
	    select object_type
	      from acs_objects 
	     where object_id = :object_id
	
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/new.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/new.xql)b(site_node_duplicate_name_root_ck):[db_string]
 {} 
 ------------ 
            select case when count(*) = 0 then 0 else 1 end
            from site_nodes
            where name = :name
            and parent_id = :parent_id
         
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/one.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/one.xql)b(select_pretty_name):[db_0or1row]
 {
    select t.pretty_name as rel_type_pretty_name, t.table_name, t.id_column, t.dynamic_p
      from acs_object_types t
     where t.object_type = :rel_type
} 
 ------------ 
      
    select t.pretty_name as rel_type_pretty_name, t.table_name, t.id_column, t.dynamic_p
      from acs_object_types t
     where t.object_type = :rel_type

       
b(attributes_select):[db_multirow]
 {
    select a.attribute_id, a.pretty_name
      from acs_attributes a
     where a.object_type = :rel_type
} 
 ------------ 
      
    select a.attribute_id, a.pretty_name
      from acs_attributes a
     where a.object_type = :rel_type

       
FILES: TCL(c:/temp/openacs5/packages/acs-content-repository/www/index.vuh) XML(c:/temp/openacs5/packages/acs-content-repository/www/index.xql)FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/apm/parameter-add.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/apm/parameter-add.xql)b(apm_get_name):[db_1row]
 { 
    select package_key, pretty_name, version_name, acs_object_id_seq.nextval as parameter_id
      from apm_package_version_info
     where version_id = :version_id
} 
 ------------ 
       
    select package_key, pretty_name, version_name, acs_object_id_seq.nextval as parameter_id
      from apm_package_version_info
     where version_id = :version_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/groups-display.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/groups-display.xql)b(select_type_info):[db_0or1row]
 {
    select t.pretty_name as group_type_pretty_name
      from acs_object_types t
     where t.object_type = :group_type
} 
 ------------ 
      
    select t.pretty_name as group_type_pretty_name
      from acs_object_types t
     where t.object_type = :group_type

       
FILES: TCL(c:/temp/openacs5/packages/acs-content-repository/tcl/item-procs.tcl) XML(c:/temp/openacs5/packages/acs-content-repository/tcl/item-procs.xql)q(cmbt_get_content_mime_types):[db_list]
 "" 
 ------------ 
      
    select mime_type from cr_content_mime_type_map
      where content_type = :content_type
      and lower(mime_type) like 'text/%'
  
       
b(glr_get_live_revision):[db_string]
 {

      
    select mime_type from cr_content_mime_type_map
      where content_type = :content_type
      and lower(mime_type) like 'text/%'
  
      
} 
 ------------ 
      
    select live_revision from cr_items
      where item_id = :item_id

       
b(grc_get_all_content):[db_0or1row]
 {

      
    select live_revision from cr_items
      where item_id = :item_id

      
} 
 ------------ 
      select 
    x.*, 
    :item_id as item_id $text_sql, 
    :content_type as content_type
  from
    cr_revisions r, ${table_name}x x
  where
    r.revision_id = :revision_id
  and 
    x.revision_id = r.revision_id
  
       
b(grc_get_table_names):[db_string]
 {

      select 
    x.*, 
    :item_id as item_id $text_sql, 
    :content_type as content_type
  from
    cr_revisions r, ${table_name}x x
  where
    r.revision_id = :revision_id
  and 
    x.revision_id = r.revision_id
  
      
} 
 ------------ 
      
    select table_name from acs_object_types 
    where object_type = :content_type
  
       
b(update_publish_status):[db_dml]
 {
    } 
 ------------ 
        update cr_items
        set publish_status = :publish_status
        where item_id = :item_id
     
b(gifr_get_one_revision):[db_string]
 {

      
    select table_name from acs_object_types 
    where object_type = :content_type
  
      
} 
 ------------ 
      
    select item_id from cr_revisions where revision_id = :revision_id
  
       
b(gct_get_content_type):[db_string]
 {

      
    select item_id from cr_revisions where revision_id = :revision_id
  
      
} 
 ------------ 
      
    select content_type from cr_items where
      item_id = :item_id
  
       
b(get_content_type):[db_0or1row]
 {

      
    select content_type from cr_items where
      item_id = :item_id
  
      
} 
 ------------ 
    select content_type from cr_items
    where item_id = :item_id
   
b(gps_get_publish_status):[db_string]
 {

    select content_type from cr_items
    where item_id = :item_id
  
} 
 ------------ 
      
    select publish_status from cr_items where item_id = :item_id
  
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/change-join-policy.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/change-join-policy.xql)b(select_pretty_name):[db_0or1row]
 {
    select t.pretty_name as group_type_pretty_name, t.dynamic_p,
           nvl(gt.default_join_policy, 'open') as default_join_policy
      from acs_object_types t, group_types gt
     where t.object_type = :group_type
       and t.object_type = gt.group_type(+)
} 
 ------------ 

    select t.pretty_name as group_type_pretty_name, t.dynamic_p,
           coalesce(gt.default_join_policy, 'open') as default_join_policy
      from acs_object_types t left outer join group_types gt on (t.object_type = gt.group_type)
     where t.object_type = :group_type

       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/users/index.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/users/index.xql)b(users_n_users):[db_1row]
 {} 
 ------------ 
          select count(user_id) as n_users, 
                 max(creation_date) as last_registration
          from   users u,
                 acs_objects o
          where  o.object_id = u.user_id
            and  user_id <> 0
       
b(groups_select):[db_html_select_value_options]
 {
    select groups.group_id, 
           groups.group_name, 
           m.num as n_members, 
           c.num as n_components 
    from   groups, 
           (select group_id, count(*) as num 
            from group_member_map group by group_id) m, 
           (select group_id, count(*) as num 
            from group_component_map group by group_id) c 
    where  groups.group_id=m.group_id 
    and    groups.group_id = c.group_id
    order  by group_name
} 
 ------------ 
      
select groups.group_id, 
       groups.group_name, 
       m.num as n_members, 
       c.num as n_components 
from groups, 
     (select group_id, count(*) as num 
      from group_member_map group by group_id) m, 
     (select group_id, count(*) as num 
      from group_component_map group by group_id) c 
where groups.group_id=m.group_id 
  and groups.group_id = c.group_id
order by group_name

       
b(users_deleted_users):[db_1row]
 {

          select count(user_id) as n_users, 
                 max(creation_date) as last_registration
          from   users u,
                 acs_objects o
          where  o.object_id = u.user_id
            and  user_id <> 0
      
} 
 ------------ 

      select count(user_id) as n_deleted_users
      from   users u,
             group_member_map m,
             membership_rels mr,
             acs_magic_objects amo
      where  u.user_id = m.member_id
      and    amo.name = 'registered_users'
      and    m.group_id = amo.object_id
      and    m.container_id = m.group_id
      and    mr.rel_id = m.rel_id
      and    mr.member_state = 'deleted'

       
FILES: TCL(c:/temp/openacs5/packages/acs-lang/tcl/lang-message-procs.tcl) XML(c:/temp/openacs5/packages/acs-lang/tcl/lang-message-procs.xql)b(lang_message_null_update):[db_dml]
 {} 
 ------------ 
      update lang_messages 
      set    [join $set_clauses ", "]
      where  locale = :locale 
      and    package_key = :package_key
      and    message_key = :message_key
     
b(message_key_exists_p):[db_string]
 {

      update lang_messages 
      set    [join $set_clauses ", "]
      where  locale = :locale 
      and    package_key = :package_key
      and    message_key = :message_key
    
} 
 ------------ 
       select count(*) 
       from lang_message_keys
       where package_key = :package_key
         and message_key = :message_key  
     
b(insert_message_key):[db_dml]
 {

       select count(*) 
       from lang_message_keys
       where package_key = :package_key
         and message_key = :message_key  
    
} 
 ------------  
        insert into lang_message_keys
            (message_key, package_key)
          values
            (:message_key, :package_key)
     
b(lang_message_insert_null_msg):[db_dml]
 {
 
        insert into lang_message_keys
            (message_key, package_key)
          values
            (:message_key, :package_key)
    
} 
 ------------ 
      insert into lang_messages ([join $col_clauses ", "]) 
      values ([join $val_clauses ", "])
     
b(select_locale_keys):[db_foreach]
 {

      insert into lang_messages ([join $col_clauses ", "]) 
      values ([join $val_clauses ", "])
    
} 
 ------------ 
      select locale, package_key, message_key, message 
      from   lang_messages
      $package_where_clause
     
b(update_description_insert_null):[db_dml]
 {

      select locale, package_key, message_key, message 
      from   lang_messages
      $package_where_clause
    
} 
 ------------ 
      update lang_message_keys
      set    description = null
      where  message_key = :message_key
      and    package_key = :package_key
     
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/elements-by-group-type.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/elements-by-group-type-postgresql.xql)b(select_group_types):[db_foreach]
 {


    select
           t.object_type, t.pretty_name, count(g.group_id) as number_groups
      from groups g, acs_objects o, acs_object_types t,
           application_group_element_map app_group
     where o.object_id = g.group_id
       and o.object_type = t.object_type
       and app_group.package_id = :package_id
       and app_group.element_id = g.group_id
     group by t.object_type, t.pretty_name
     order by lower(t.pretty_name)

      
} 
 ------------ 

    select
           t.object_type, t.pretty_name, count(g.group_id) as number_groups
      from groups g, acs_objects o, acs_object_types t,
           application_group_element_map app_group
     where o.object_id = g.group_id
       and o.object_type = t.object_type
       and app_group.package_id = :package_id
       and app_group.element_id = g.group_id
     group by t.object_type, t.pretty_name
     order by lower(t.pretty_name)

       
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/security-procs.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/security-procs-postgresql.xql)b(get_secret_tokens):[db_foreach]
 {
	    select * from (
	    select token_id, token
	    from secret_tokens
	    sample(15)
	    ) where rownum < :num_tokens
	} 
 ------------ 
      
    select token_id, token
    from secret_tokens,
         (select trunc(random()*(select count(*)-15 from secret_tokens))::integer as first) r
    where token_id >= r.first and r.first+15 > token_id;
	
       
b(update_last_visit):[db_dml]
 {
        update users
        set second_to_last_visit = last_visit,
            last_visit = sysdate,
            n_sessions = n_sessions + 1
        where user_id = :user_id
    } 
 ------------ 

        update users
        set second_to_last_visit = last_visit,
            last_visit = now(),
            n_sessions = n_sessions + 1
        where user_id = :user_id
    
       
b(prop_update_dml):[db_dml]
 {

	insert into sec_session_properties
	  (session_id, module, property_name, secure_p, last_hit)
	select :session_id, :module, :name, :secure, :last_hit
        from dual
        where not exists (select 1
                          from sec_session_properties
                          where session_id = :session_id and
                          module = :module and
                          property_name = :name)
      
} 
 ------------ 
        update sec_session_properties
        set property_value = :value,
          secure_p = :secure,
          last_hit = :last_hit 
        where session_id = :session_id and
          module = :module and
          property_name = :name
       
b(password_update):[db_dml]
 {

      
	delete from sec_session_properties
	where last_hit < :expires
    
      
} 
 ------------ 
        update users 
        set    password = :new_password, 
               salt = :salt,
               password_changed_date = current_timestamp
        where  user_id = :user_id
       
b(insert_random_token):[db_dml]
 {
	    insert /*+ APPEND */ into secret_tokens(token_id, token, timestamp)
	    values(sec_security_token_id_seq.nextval, :random_token, sysdate)
	} 
 ------------ 

	    insert into secret_tokens(token_id, token, token_timestamp)
	    values(sec_security_token_id_seq.nextval, :random_token, now())
	
       
FILES: TCL(c:/temp/openacs5/packages/acs-lang/www/admin/test/test.tcl) XML(c:/temp/openacs5/packages/acs-lang/www/admin/test/test-postgresql.xql)q(lang_system_time_select):[db_1row]
 "SELECT to_char(sysdate, 'YYYY-MM-DD HH24:MI:SS') AS system_time FROM dual" 
 ------------ 
      SELECT to_char(current_time, 'YYYY-MM-DD HH24:MI:SS') AS system_time
       
FILES: TCL(c:/temp/openacs5/packages/acs-mail/tcl/acs-mail-procs.tcl) XML(c:/temp/openacs5/packages/acs-mail/tcl/acs-mail-procs-postgresql.xql)b(acs_mail_link_p):[db_exec_plsql]
 {
        begin
            :1 := acs_mail_link.link_p (:object_id);
        end;
    } 
 ------------ 

select acs_mail_link__link_p (:object_id);

 
b(acs_mail_multipart_p):[db_exec_plsql]
 {
        begin
            :1 := acs_mail_multipart.multipart_p (:object_id);
        end;
    } 
 ------------ 

select acs_mail_multipart__multipart_p (:object_id);

 
q(insert_new_content):[db_exec_plsql]
 "
 		begin
		  return content_item__new(
		    varchar 'acs-mail message $body_id', -- new__name
		    null,                     -- new__parent_id
		    null,                     -- new__item_id
		    null,                     -- new__locale
		    now(),                    -- new__creation_date
		    :creation_user,           -- new__creation_user
		    null,                     -- new__context_id
		    :creation_ip,             -- new__creation_ip
		    'content_item',           -- new__item_subtype
		    'content_revision',       -- new__content_type
		    :header_subject,          -- new__title
		    null,                     -- new__description
		    :content_type,            -- new__mime_type
		    :nls_language,            -- new__nls_language
		    null,                     -- new__text
		    'file'                    -- new__storage_type
	      );
		end;" 
 ------------ 

begin
  return content_item__new(
    varchar 'acs-mail message $body_id', -- new__name
    null,                     -- new__parent_id
    null,                     -- new__item_id
    null,                     -- new__locale
    now(),                    -- new__creation_date
    :creation_user,           -- new__creation_user
    null,                     -- new__context_id
    :creation_ip,             -- new__creation_ip
    'content_item',           -- new__item_subtype
    'content_revision',       -- new__content_type
    :header_subject,          -- new__title
    null,                     -- new__description
    :content_type,            -- new__mime_type
    :nls_language,            -- new__nls_language
    null,                     -- new__text
    'file'                    -- new__storage_type
  );
end;

 
b(acs_mail_body_new):[db_exec_plsql]
 {
        begin
            :1 := acs_mail_body.new (
                body_id => :body_id,
                body_reply_to => :body_reply_to,
                body_from => :body_from,
                body_date => :body_date,
                header_message_id => :header_message_id,
                header_reply_to => :header_reply_to,
                header_subject => :header_subject,
                header_from => :header_from,
                header_to => :header_to,
                content_item_id => :content_item_id,
                creation_user => :creation_user,
                creation_ip => :creation_ip
            );
        end;
    } 
 ------------ 

select acs_mail_body__new (
  :body_id,				-- body_id 
  :body_reply_to,		-- body_reply_to 
  :body_from,			-- body_from 
  :body_date,			-- body_date 
  :header_message_id,	-- header_message_id 
  :header_reply_to,		-- header_reply_to 
  :header_subject,      -- header_subject 
  :header_from,			-- header_from 
  :header_to,			-- header_to 
  :content_item_id,		-- content_item_id 
  'acs_mail_body',		-- object_type
  now(),				-- creation_date
  :creation_user,		-- creation_user 
  :creation_ip,			-- creation_ip 
  null					-- context_id
);

 
b(acs_mail_body_p):[db_exec_plsql]
 {
        begin
            :1 := acs_mail_body.body_p (:object_id);
        end;
    } 
 ------------ 

select acs_mail_body__body_p (:object_id);

 
q(set_live_revision):[db_exec_plsql]
 "select content_item__set_live_revision(:revision_id)" 
 ------------ 

select content_item__set_live_revision(:revision_id)

 
b(acs_mail_body_set_content_object):[db_exec_plsql]
 {
        begin
            :1 := acs_mail_body.set_content_object (
                body_id => :body_id,
                content_item_id => :content_item_id
            );
        end;
    } 
 ------------ 

select acs_mail_body__set_content_object (
  :body_id,				-- body_id 
  :content_item_id		-- content_item_id 
);

 
q(get_latest_revision):[db_exec_plsql]
 "
	      begin
		    return content_item__get_latest_revision ( :content_item_id );
	      end;" 
 ------------ 

begin
  return content_item__get_latest_revision ( :item_id );
end;

 
b(acs_mail_link_new):[db_exec_plsql]
 {
        begin
            :1 := acs_mail_link.new (
                mail_link_id => :mail_link_id,
                body_id => :body_id,
                context_id => :context_id,
                creation_user => :creation_user,
                creation_ip => :creation_ip
            );
        end;
    } 
 ------------ 

select acs_mail_link__new (
  :mail_link_id,	-- mail_link_id 
  :body_id,			-- body_id 
  :context_id,		-- context_id 
  :creation_user,	-- creation_user 
  :creation_ip		-- creation_ip 
);

 
b(acs_mail_multipart_add_content):[db_exec_plsql]
 {
        begin
            :1 = acs_mail_multipart.add_content (
                multipart_id => :multipart_id,
                content_item_id => :content_item_id
            );
        end;
    } 
 ------------ 

select acs_mail_multipart__add_content (
  :multipart_id,		-- multipart_id 
  :content_item_id		-- content_item_id 
);

 
q(copy_blob_to_file):[db_blob_get_file]
 "
						    select r.content, i.storage_type 
						    from cr_revisions r, cr_items i 
						    where r.revision_id = $revision_id and
						          r.item_id = i.item_id " 
 ------------ 
      
select r.lob as content, i.storage_type 
from cr_revisions r, cr_items i 
where r.revision_id = $revision_id and
      r.item_id = i.item_id
        
 
b(insert_new_content):[db_exec_plsql]
 {


begin
  return content_item__new(
    varchar 'acs-mail message $body_id', -- new__name
    null,                     -- new__parent_id
    null,                     -- new__item_id
    null,                     -- new__locale
    now(),                    -- new__creation_date
    :creation_user,           -- new__creation_user
    null,                     -- new__context_id
    :creation_ip,             -- new__creation_ip
    'content_item',           -- new__item_subtype
    'content_revision',       -- new__content_type
    :header_subject,          -- new__title
    null,                     -- new__description
    :content_type,            -- new__mime_type
    :nls_language,            -- new__nls_language
    null,                     -- new__text
    'file'                    -- new__storage_type
  );
end;


} 
 ------------ 

select content_item__new(
    'acs-mail message $body_id'::varchar, -- new__name
    null::integer,                     -- new__parent_id
    null::integer,                     -- new__item_id
    null::varchar,                     -- new__locale
    current_timestamp,                    -- new__creation_date
    :creation_user::integer,           -- new__creation_user
    null::integer,                     -- new__context_id
    :creation_ip::varchar,             -- new__creation_ip
    'content_item'::varchar,           -- new__item_subtype
    'content_revision'::varchar,       -- new__content_type
    :header_subject::varchar,          -- new__title
    null::varchar,                     -- new__description
    :content_type,            -- new__mime_type
    :nls_language,            -- new__nls_language
    :content,                 -- new__text
    'text'                    -- new__storage_type
  )
    
 
b(set_live_revision):[db_exec_plsql]
 {


select content_item__set_live_revision(:revision_id)


} 
 ------------ 

select content_item__set_live_revision(:revision_id);

 
b(update_content):[db_dml]
 {
        update cr_revisions
            set content = empty_blob()
            where revision_id = :revision_id
            returning content into :1
    } 
 ------------ 

update cr_revisions
  set content = '[cr_create_content_file $item_id $revision_id $content_file]'
  where revision_id = :revision_id

 
b(acs_mail_multipart_new):[db_exec_plsql]
 {
        begin
            :1 := acs_mail_multipart.new (
                multipart_id => :multipart_id,
                multipart_kind => :multipart_kind,
                creation_user => :creation_user,
                creation_ip => :creation_ip
            );
        end;
    } 
 ------------ 

select acs_mail_multipart__new (
  :multipart_id,	    -- multipart_id 
  :multipart_kind,	    -- multipart_kind 
  'acs_mail_multipart', -- object_type
  now(),                -- creation_date
  :creation_user,	    -- creation_user 
  :creation_ip,		    -- creation_ip 
  null                  -- context_id
);

 
b(acs_mail_body_clone):[db_exec_plsql]
 {
        begin
            :1 := acs_mail_body.clone (
                old_body_id => :old_body_id,
                body_id => :body_id,
                creation_user => :creation_user,
                creation_ip => :creation_ip
            );
        end;
    } 
 ------------ 

select acs_mail_body__clone (
  :old_body_id,		-- old_body_id 
  :body_id,			-- body_id 
  :creation_user,	-- creation_user 
  :creation_ip		-- creation_ip 
);

 
b(get_latest_revision):[db_exec_plsql]
 {


begin
  return content_item__get_latest_revision ( :item_id );
end;


} 
 ------------ 

begin
  return content_item__get_latest_revision ( :item_id );
end;

 
b(get_latest_revision):[db_exec_plsql]
 {


begin
  return content_item__get_latest_revision ( :item_id );
end;


} 
 ------------ 

begin
  return content_item__get_latest_revision ( :content_item_id );
end;

 
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/new.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/new-postgresql.xql)b(select_supertypes):[db_multirow]
 {
    select replace(lpad(' ', (level - 1) * 4), ' ', '&nbsp;') || t.pretty_name as name,
           t.object_type
      from acs_object_types t
   connect by prior t.object_type = t.supertype
     start with t.object_type in ('membership_rel','composition_rel')
} 
 ------------ 

    select repeat('&nbsp;', (tree_level(t2.tree_sortkey) - tree_level(t1.tree_sortkey)) * 4) || t2.pretty_name as name,
           t2.object_type
      from acs_object_types t1,
	   acs_object_types t2
     where t2.tree_sortkey between t1.tree_sortkey and tree_right(t1.tree_sortkey)
       and t1.object_type in ('membership_rel', 'composition_rel')

       
FILES: TCL(c:/temp/openacs5/packages/acs-lang/tcl/lang-util-procs.tcl) XML(c:/temp/openacs5/packages/acs-lang/tcl/lang-util-procs-postgresql.xql)b(nls_language_from_language):[db_string]
 {

      
        select mime_charset
        from   ad_locales 
        where  locale = :locale
    
      
} 
 ------------ 
      
        select nls_language
        from   ad_locales 
        where  lower(trim(language)) = lower(:language)
        limit  1
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/elements.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-segments/elements-postgresql.xql)b(select_segment_info):[db_1row]
 {
    select s.segment_name, s.group_id,
           acs_rel_type.role_pretty_plural(r.role_two) as role_pretty_plural
      from rel_segments s, acs_rel_types r
     where s.segment_id = :segment_id
       and s.rel_type = r.rel_type
} 
 ------------ 
      
    select s.segment_name, s.group_id,
           acs_rel_type__role_pretty_plural(r.role_two) as role_pretty_plural
      from rel_segments s, acs_rel_types r
     where s.segment_id = :segment_id
       and s.rel_type = r.rel_type

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/unmounted.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/unmounted-postgresql.xql)b(packages_singleton_select):[db_foreach]
 {} 
 ------------ 
            select package_id, acs_object__name(package_id) as name
            from apm_packages
            where (acs_permission__permission_p(package_id, :user_id, 'read') = 't' or
                    acs_permission__permission_p(package_id, acs__magic_object_id('the_public'), 'read') = 't')
            and apm_package__singleton_p(package_key) = 1
            and not exists (select 1
                            from site_nodes
                            where object_id = package_id)
            order by name
         
b(packages_normal_select):[db_foreach]
 {

            select package_id, acs_object__name(package_id) as name
            from apm_packages
            where (acs_permission__permission_p(package_id, :user_id, 'read') = 't' or
                    acs_permission__permission_p(package_id, acs__magic_object_id('the_public'), 'read') = 't')
            and apm_package__singleton_p(package_key) = 1
            and not exists (select 1
                            from site_nodes
                            where object_id = package_id)
            order by name
        
} 
 ------------ 
            select package_id, acs_object__name(package_id) as name
            from apm_packages
            where (acs_permission__permission_p(package_id, :user_id, 'read') = 't' or
                    acs_permission__permission_p(package_id, acs__magic_object_id('the_public'), 'read') = 't')
            and apm_package__singleton_p(package_key) = 0
            and not exists (select 1
                            from site_nodes
                            where object_id = package_id)
            order by name
         
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/apm/index.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/apm/index-postgresql.xql)FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/rel-type-add-2.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/rel-type-add-2-postgresql.xql)b(segment_exists_p):[db_string]
 {
    select case when exists (select 1 
                               from rel_segments s 
                              where s.group_id = :group_id
                                and s.rel_type = :rel_type)
                then 1 else 0 end
      from dual
} 
 ------------ 
      
    select case when exists (select 1 
                               from rel_segments s 
                              where s.group_id = :group_id
                                and s.rel_type = :rel_type)
                then 1 else 0 end
      

       
b(types_match_p):[db_string]
 {
	    select count(*)
	      from acs_rel_types t
	     where (t.object_type_one = :group_type 
                    or acs_object_type.is_subtype_p(t.object_type_one, :group_type) = 't')
               and t.rel_type = :rel_type
	} 
 ------------ 
      
	    select count(*)
	      from acs_rel_types t
	     where (t.object_type_one = :group_type 
                    or acs_object_type__is_subtype_p(t.object_type_one, :group_type) = 't')
               and t.rel_type = :rel_type
	
       
b(exists_p):[db_string]
 {
	select case when exists (select 1 
                                   from group_rels 
                                  where group_id = :group_id
                                    and rel_type = :rel_type)
                    then 1 else 0 end
	  from dual
    } 
 ------------ 
      
	select case when exists (select 1 
                                   from group_rels 
                                  where group_id = :group_id
                                    and rel_type = :rel_type)
                    then 1 else 0 end
	  
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/new.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/roles/new-postgresql.xql)b(create_role):[db_exec_plsql]
 {
	    begin acs_rel_type.create_role(role => :role, pretty_name => :pretty_name, pretty_plural => :pretty_plural); end;
	} 
 ------------ 
	    select acs_rel_type__create_role(:role, :pretty_name, :pretty_plural)
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/tcl/approval-expiration-procs.tcl) XML(c:/temp/openacs5/packages/acs-subsite/tcl/approval-expiration-procs-postgresql.xql)b(select_expired_user_ids):[db_list]
 {} 
 ------------ 
      
        select u.user_id 
        from   cc_users u, 
               acs_objects relo
        where  relo.object_id = u.rel_id
        and    age(u.last_visit) > interval '$days days'
        and    age(relo.last_modified) > interval '$days days'
        and    u.member_state = 'approved'
        
       
FILES: TCL(c:/temp/openacs5/packages/acs-messaging/tcl/acs-messaging-procs.tcl) XML(c:/temp/openacs5/packages/acs-messaging/tcl/acs-messaging-procs-postgresql.xql)b(acs_message_send):[db_foreach]
 {
        select o.message_id as sending_message_id,
               o.to_address as recip_email,
               p.email as sender_email,
               to_char(m.sent_date, 'Dy, DD Mon YYYY HH24:MI:SS') as sent_date,
               m.rfc822_id,
               m.title,
               m.mime_type,
               m.content,
               m2.rfc822_id as in_reply_to
            from acs_messages_outgoing o,
                 acs_messages_all m,
                 acs_messages_all m2,
                 parties p
            where o.message_id = m.message_id
                and m2.message_id(+) = m.reply_to
                and p.party_id = m.sender
                and wait_until <= sysdate
    } 
 ------------ 
        select o.message_id as sending_message_id,
               o.to_address as recip_email,
               p.email as sender_email,
               to_char(m.sent_date, 'Dy, DD Mon YYYY HH24:MI:SS') as sent_date,
               m.rfc822_id,
               m.title,
               m.mime_type,
               m.content,
               m2.rfc822_id as in_reply_to
            from acs_messages_outgoing o,
                 acs_messages_all m left outer join acs_messages_all m2 on (m2.message_id = m.reply_to),
                 parties p
            where o.message_id = m.message_id
                and p.party_id = m.sender
                and wait_until <= current_timestamp
    
       
q(insert_messaging_by_query):[db_dml]
 "
        insert into acs_messages_outgoing
            (message_id, to_address, grouping_id, wait_until)
        select :m__message_id, p.email, q.grouping_id,
               nvl(q.wait_until, SYSDATE) as wait_until
            from ($query) q, parties p
            where not exists (select 1 from acs_messages_outgoing o
                                  where o.message_id = :m__message_id
                                    and p.email = o.to_address)
              and p.party_id = q.recipient_id
    " 
 ------------ 
      
        insert into acs_messages_outgoing
            (message_id, to_address, grouping_id, wait_until)
        select :m__message_id, p.email, q.grouping_id,
               coalesce(q.wait_until, current_timestamp) as wait_until
            from ($query) q, parties p
            where not exists (select 1 from acs_messages_outgoing o
                                  where o.message_id = :m__message_id
                                    and p.email = o.to_address)
              and p.party_id = q.recipient_id
    
       
b(acs_message_p):[db_exec_plsql]
 {
	begin
	    :1 := acs_message.message_p(:message_id);
	end;
    } 
 ------------ 
	    select acs_message__message_p(:message_id);
       
b(acs_message_first_ancestor):[db_1row]
 {
	select acs_message.first_ancestor(:message_id) as ancestor_id from dual
    } 
 ------------ 
        select acs_message__first_ancestor(:message_id) as ancestor_id 
     
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/elements-by-rel-type.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/elements-by-rel-type-postgresql.xql)b(relations_query):[db_multirow]
 { 
    select g.rel_type, g.group_rel_id,
           acs_object_type.pretty_name(g.rel_type) as rel_type_pretty_name,
           s.segment_id, s.segment_name, 
           acs_rel_type.role_pretty_plural(rel_types.role_two) as role_pretty_plural,
           acs_rel_type.role_pretty_name(rel_types.role_two) as role_pretty_name,
           rels.num_rels,
           decode(valid_types.group_id, null, 0, 1) as rel_type_valid_p
      from group_rels g, 
           rel_segments s, 
           acs_rel_types rel_types,
           (select rel_type, count(*) as num_rels
              from group_component_map
             where group_id = :group_id
               and group_id = container_id
           group by rel_type
           UNION ALL
           select rel_type, count(*) as num_rels
             from group_approved_member_map
             where group_id = :group_id
               and group_id = container_id
           group by rel_type) rels,
           rc_valid_rel_types valid_types
     where g.group_id = s.group_id(+)
       and g.rel_type = s.rel_type(+)
       and g.rel_type = rels.rel_type(+)
       and g.rel_type = rel_types.rel_type
       and g.group_id = :group_id
       and g.group_id = valid_types.group_id(+)
       and g.rel_type = valid_types.rel_type(+)
     order by lower(g.rel_type)
} 
 ------------ 

    select g.rel_type, g.group_rel_id,
           acs_object_type__pretty_name(g.rel_type) as rel_type_pretty_name,
           s.segment_id, s.segment_name, 
           acs_rel_type__role_pretty_plural(rel_types.role_two) as role_pretty_plural,
           acs_rel_type__role_pretty_name(rel_types.role_two) as role_pretty_name,
           rels.num_rels,
           case when valid_types.group_id = null then 0 else 1 end as rel_type_valid_p
      from group_rels g
	     left outer join rel_segments s using (group_id, rel_type)
	     left outer join rc_valid_rel_types valid_types using (group_id, rel_type)
	     left outer join
	       (select rel_type, count(*) as num_rels
	          from group_component_map
		 where group_id = :group_id
		   and group_id = container_id
	      group by rel_type
	      UNION ALL
	        select rel_type, count(*) as num_rels
		  from group_approved_member_map
		 where group_id = :group_id
		   and group_id = container_id
	      group by rel_type) rels using (rel_type),
	   acs_rel_types rel_types
     where g.rel_type = rel_types.rel_type
       and g.group_id = :group_id
  order by lower(g.rel_type)

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/groups-list.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/groups-list-postgresql.xql)b(select_groups):[db_multirow]
 {

      
    select DISTINCT g.group_id, g.group_name
      from (select group_id, group_name 
              from groups g, acs_objects o 
             where g.group_id = o.object_id 
               and o.object_type = :group_type) g, 
           (select object_id 
            from all_object_party_privilege_map 
            where party_id = :user_id and privilege = 'read') perm,
           application_group_element_map m
     where perm.object_id = g.group_id
       and m.package_id = :package_id
       and m.element_id = g.group_id
     order by lower(g.group_name)

      
} 
 ------------ 
      
  select g.group_id, g.group_name from (
    select distinct g.group_id, g.group_name
      from (select group_id, group_name
              from groups g, acs_objects o
             where g.group_id = o.object_id
		and o.object_type = :group_type) g,
           (select object_id
            from all_object_party_privilege_map
            where party_id = :user_id and privilege = 'read') perm,
           application_group_element_map m
     where perm.object_id = g.group_id
	and m.package_id = :package_id
	and m.element_id = g.group_id
     order by g.group_id, g.group_name) g
   order by lower(g.group_name)

       
FILES: TCL(c:/temp/openacs5/packages/acs-content-repository/tcl/keyword-procs.tcl) XML(c:/temp/openacs5/packages/acs-content-repository/tcl/keyword-procs-postgresql.xql)b(content_keyword_new):[db_exec_plsql]
 {

            select parent_id
            from cr_keywords
            where keyword_id = :keyword
        
} 
 ------------ 
            select content_keyword__new (
                :heading,    
                :description,
                :parent_id,  
                :keyword_id, 
                current_timestamp,
                :user_id,      
                :creation_ip,  
                :object_type  
            )
         
b(keyword_assign):[db_exec_plsql]
 {

            select content_keyword__new (
                :heading,    
                :description,
                :parent_id,  
                :keyword_id, 
                current_timestamp,
                :user_id,      
                :creation_ip,  
                :object_type  
            )
        
} 
 ------------ 
            select content_keyword__item_assign(
                :item_id,
                :keyword,
                null,
                null,
                null
            )
         
b(item_unassign):[db_exec_plsql]
 {

            select content_keyword__item_assign(
                :item_id,
                :keyword,
                null,
                null,
                null
            )
        
} 
 ------------ 
            select content_keyword__item_unassign(:item_id, :keyword_id)
         
b(set_heading):[db_exec_plsql]
 { } 
 ------------ 
            select content_keyword__set_heading(:keyword_id, :heading)
         
b(delete_keyword):[db_exec_plsql]
 {

            select content_keyword__item_unassign(:item_id, :keyword_id)
        
} 
 ------------ 
                select content_keyword__delete (:keyword_id)
         
FILES: TCL(c:/temp/openacs5/packages/acs-service-contract/tcl/implementation-procs.tcl) XML(c:/temp/openacs5/packages/acs-service-contract/tcl/implementation-procs-postgresql.xql)b(alias_new):[db_exec_plsql]
 {

        select impl_id
        from   acs_sc_impls
        where  impl_owner_name = :owner
        and    impl_name = :name
    
} 
 ------------ 
            select acs_sc_impl_alias__new(
                       :contract_name, 
                       :impl_name,
                       :operation,
                       :alias,
                       :language
                   ); 	
         
b(binding_new):[db_exec_plsql]
 {

            select acs_sc_impl_alias__new(
                       :contract_name, 
                       :impl_name,
                       :operation,
                       :alias,
                       :language
                   ); 	
        
} 
 ------------ 
            select acs_sc_binding__new(
                       :contract_name, 
                       :impl_name
                   ); 	
         
b(delete_impl):[db_exec_plsql]
 {

            select acs_sc_binding__new(
                       :contract_name, 
                       :impl_name
                   ); 	
        
} 
 ------------ 
            select acs_sc_impl__delete(
                       :contract_name, 
                       :impl_name
                   ); 	
         
b(impl_new):[db_exec_plsql]
 {

            select acs_sc_impl__delete(
                       :contract_name, 
                       :impl_name
                   ); 	
        
} 
 ------------ 
            select acs_sc_impl__new(
                       :contract_name, 
                       :name,
                       :pretty_name,
                       :owner
                   ); 	
         
FILES: TCL(c:/temp/openacs5/packages/acs-content-repository/tcl/revision-procs.tcl) XML(c:/temp/openacs5/packages/acs-content-repository/tcl/revision-procs-postgresql.xql)b(image_revision_new):[db_exec_plsql]
 {

            select content_type
	    from cr_items
            where item_id = :item_id
      
} 
 ------------ 
         select image__new_revision (
            /* item_id       => */ :item_id,
            /* revision_id   => */ :revision_id,
            /* title         => */ :title,
            /* description   => */ :description,
            /* publish_date  => */ current_timestamp,
            /* mime_type     => */ :mime_type,
            /* nls_language  => */ null,
            /* creation_user => */ :creation_user,
            /* creation_ip   => */ :creation_ip,
            /* height        => */ :original_height,
            /* width         => */ :original_width
    );
       
b(write_file_content):[db_string]
 {

         select image__new_revision (
            /* item_id       => */ :item_id,
            /* revision_id   => */ :revision_id,
            /* title         => */ :title,
            /* description   => */ :description,
            /* publish_date  => */ current_timestamp,
            /* mime_type     => */ :mime_type,
            /* nls_language  => */ null,
            /* creation_user => */ :creation_user,
            /* creation_ip   => */ :creation_ip,
            /* height        => */ :original_height,
            /* width         => */ :original_width
    );
      
} 
 ------------ 
          select :path || content
          from cr_revisions
          where revision_id = :revision_id
       
b(set_lob_content):[db_dml]
 {

          select :path || content
          from cr_revisions
          where revision_id = :revision_id
      
} 
 ------------ 

	update cr_revisions
	set mime_type = :mime_type,
 	   lob = [set __lob_id [db_string get_lob_id "select empty_lob()"]]
	where revision_id = :revision_id
	   
       
b(content_revision_new):[db_exec_plsql]
 {


	update cr_revisions
	set mime_type = :mime_type,
 	   lob = [set __lob_id [db_string get_lob_id "select empty_lob()"]]
	where revision_id = :revision_id
	   
      
} 
 ------------ 
         select content_revision__new (
            /* title         => */ :title,
            /* description   => */ :description,
            /* publish_date  => */ current_timestamp,
            /* mime_type     => */ :mime_type,
            /* nls_language  => */ null,
            /* data          => */ null,
            /* item_id       => */ :item_id,
            /* revision_id   => */ :revision_id,
            /* creation_date => */ current_timestamp,
            /* creation_user => */ :creation_user,
            /* creation_ip   => */ :creation_ip
    );
       
b(mime_type_register):[db_exec_plsql]
 {

         select content_revision__new (
            /* title         => */ :title,
            /* description   => */ :description,
            /* publish_date  => */ current_timestamp,
            /* mime_type     => */ :mime_type,
            /* nls_language  => */ null,
            /* data          => */ null,
            /* item_id       => */ :item_id,
            /* revision_id   => */ :revision_id,
            /* creation_date => */ current_timestamp,
            /* creation_user => */ :creation_user,
            /* creation_ip   => */ :creation_ip
    );
      
} 
 ------------ 
          select content_type__register_mime_type('content_revision', :mime_type)
       
b(write_lob_content):[db_write_blob]
 {

          select content_type__register_mime_type('content_revision', :mime_type)
      
} 
 ------------ 
          select lob as content
          from cr_revisions
          where revision_id = :revision_id
       
b(image_new):[db_exec_plsql]
 {

          select lob as content
          from cr_revisions
          where revision_id = :revision_id
      
} 
 ------------ 
         select image__new(
            /* name          => */ :object_name,
            /* parent_id     => */ :parent_id,
            /* item_id       => */ :item_id,
            /* revision_id   => */ :revision_id,
            /* mime_type     => */ :mime_type,
            /* creation_user => */ :creation_user,
            /* creation_ip   => */ :creation_ip,
            /* title         => */ :title,
            /* description   => */ :description,
            /* storage_type  => */ :storage_type,
            /* content_type  => */ :image_type,
            /* nls_language  => */ null,
            /* publish_date  => */ current_timestamp,
            /* height        => */ :original_height,
            /* width         => */ :original_width
         );
       
b(image_subclass):[db_string]
 {

         select image__new(
            /* name          => */ :object_name,
            /* parent_id     => */ :parent_id,
            /* item_id       => */ :item_id,
            /* revision_id   => */ :revision_id,
            /* mime_type     => */ :mime_type,
            /* creation_user => */ :creation_user,
            /* creation_ip   => */ :creation_ip,
            /* title         => */ :title,
            /* description   => */ :description,
            /* storage_type  => */ :storage_type,
            /* content_type  => */ :image_type,
            /* nls_language  => */ null,
            /* publish_date  => */ current_timestamp,
            /* height        => */ :original_height,
            /* width         => */ :original_width
         );
      
} 
 ------------ 
         select content_item__is_subclass(:image_type, 'image')
       
b(set_lob_size):[db_dml]
 {

         select content_item__is_subclass(:image_type, 'image')
      
} 
 ------------ 

         update cr_revisions
         set content_length = lob_length(lob)
         where revision_id = :revision_id

       
b(get_item_info):[db_0or1row]
 {


         update cr_revisions
         set content_length = lob_length(lob)
         where revision_id = :revision_id

      
} 
 ------------ 
          select i.storage_type, i.storage_area_key, r.mime_type,
          r.revision_id, r.content_length
          from cr_items i, cr_revisions r
          where r.revision_id = content_item__get_live_revision(:item_id) and i.item_id = r.item_id
       
b(set_file_content):[db_dml]
 {

          select i.storage_type, i.storage_area_key, r.mime_type,
          r.revision_id, r.content_length
          from cr_items i, cr_revisions r
          where r.revision_id = content_item__get_live_revision(:item_id) and i.item_id = r.item_id
      
} 
 ------------ 
          update cr_revisions
          set content = :filename,
              mime_type = :mime_type,
              content_length = :tmp_size
          where revision_id = :revision_id
       
b(content_item_new):[db_exec_plsql]
 {

          update cr_revisions
          set content = :filename,
              mime_type = :mime_type,
              content_length = :tmp_size
          where revision_id = :revision_id
      
} 
 ------------ 
         select content_item__new (
            /* name          => */ varchar :object_name,
            /* parent_id     => */ :parent_id,
            /* item_id       => */ :item_id,
            /* new_locale    => */ null,
            /* creation_date => */ current_timestamp,
            /* creation_user => */ :creation_user,
            /* context_id    => */ :parent_id,
            /* creation_ip   => */ :creation_ip,
            /* item_subtype  => */ 'content_item',
            /* content_type  => */ :other_type,
            /* title         => */ null,
            /* description   => */ null,
            /* mime_type     => */ null,
            /* nls_language  => */ null,
            /* text          => */ null,
            /* storage_type  => */ :storage_type
    );
       
b(content_revision_subclass):[db_string]
 {

         select content_item__new (
            /* name          => */ varchar :object_name,
            /* parent_id     => */ :parent_id,
            /* item_id       => */ :item_id,
            /* new_locale    => */ null,
            /* creation_date => */ current_timestamp,
            /* creation_user => */ :creation_user,
            /* context_id    => */ :parent_id,
            /* creation_ip   => */ :creation_ip,
            /* item_subtype  => */ 'content_item',
            /* content_type  => */ :other_type,
            /* title         => */ null,
            /* description   => */ null,
            /* mime_type     => */ null,
            /* nls_language  => */ null,
            /* text          => */ null,
            /* storage_type  => */ :storage_type
    );
      
} 
 ------------ 
         select content_item__is_subclass(:other_type, 'content_revision')
       
b(set_live):[db_exec_plsql]
 {

         select content_item__is_subclass(:other_type, 'content_revision')
      
} 
 ------------ 
          select content_item__set_live_revision(:revision_id)
       
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/admin-init.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/admin-init-postgresql.xql)b(path_select):[db_foreach]
 {} 
 ------------ 
      
	select package_id, site_node__url(node_id) as url from apm_packages p, site_nodes n
	where p.package_id = n.object_id
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/host-node-map/index.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/host-node-map/index-postgresql.xql)q(root_id):[]
 "select site_node.node_id('/') from dual" 
 ------------ 
      
      select site_node__node_id('/', null)
      
       
b(host_node_pair):[db_foreach]
 {
    select host, node_id, site_node.url(node_id) as url 
    from host_node_map
} 
 ------------ 

    select host, node_id, site_node__url(node_id) as url 
    from host_node_map
      
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/tcl/subsite-procs.tcl) XML(c:/temp/openacs5/packages/acs-subsite/tcl/subsite-procs-postgresql.xql)b(select_object_type_path):[db_list]
 {
	select object_type
	from acs_object_types
	start with object_type = :object_type
	connect by object_type = prior supertype
    } 
 ------------ 

	select t2.object_type
	  from acs_object_types t1, acs_object_types t2
	 where t1.object_type = :object_type
	   and t1.tree_sortkey between t2.tree_sortkey and tree_right(t2.tree_sortkey)
	 order by t2.tree_sortkey desc
    
       
b(select_package_object_names):[db_1row]
 {
	    select t.pretty_name as package_name, acs_object.name(s.object_id) as object_name
	      from site_nodes s, apm_package_types t
	     where s.node_id = :node_id
	       and t.package_key = :package_key
	} 
 ------------ 
      
	    select t.pretty_name as package_name, acs_object__name(s.object_id) as object_name
	      from site_nodes s, apm_package_types t
	     where s.node_id = :node_id
	       and t.package_key = :package_key
	
       
b(add_constraint):[db_exec_plsql]
 {

      
	    select instance_name
	    from apm_packages
	    where package_id = :package_id
	
      
} 
 ------------ 

	select rel_constraint__new(
	  null,
	  'rel_constraint',
	  :constraint_name,
	  :segment_id,
	  'two',
	  rel_segment__get(:supersite_group_id, 'membership_rel'),
	  null,
	  :user_id,
	  :creation_ip
	);
		
       
b(sub_type_exists_p):[db_string]
 {
	select case 
                 when exists (select 1 from acs_object_types 
                              where supertype = :object_type)
                 then 1 
                 else 0 
               end
        from dual
    } 
 ------------ 
      
	select case 
                 when exists (select 1 from acs_object_types 
                              where supertype = :object_type)
                 then 1 
                 else 0 
               end
        
    
       
b(package_types):[db_list_of_lists]
 {


	select rel_constraint__new(
	  null,
	  'rel_constraint',
	  :constraint_name,
	  :segment_id,
	  'two',
	  rel_segment__get(:supersite_group_id, 'membership_rel'),
	  null,
	  :user_id,
	  :creation_ip
	);
		
      
} 
 ------------ 

    select pretty_name, package_key
    from   apm_package_types
    where  not (apm_package__singleton_p(package_key) = 1 and
                apm_package__num_instances(package_key) >= 1)
    and    package_key != 'acs-subsite'
    order  by upper(pretty_name)

         
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/rel-type-add.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/rel-type-add-postgresql.xql)b(select_primary_relations):[db_multirow]
 {
    select replace(lpad(' ', (t.type_level - 1) * 4), ' ', '&nbsp;') as indent,
           t.pretty_name, t.rel_type
      from (select t.pretty_name, t.object_type as rel_type, level as type_level
              from acs_object_types t
             where t.object_type not in (select g.rel_type 
                                           from group_type_rels g 
                                          where g.group_type = :group_type)
           connect by prior t.object_type = t.supertype
             start with t.object_type in ('membership_rel', 'composition_rel')) t,
           acs_rel_types rel_type
     where t.rel_type = rel_type.rel_type
       and (rel_type.object_type_one = :group_type 
            or acs_object_type.is_subtype_p(rel_type.object_type_one, :group_type) = 't')
} 
 ------------ 

    select repeat('&nbsp;', (t.type_level - 1) * 4) as indent,
           t.pretty_name, t.rel_type
      from (select t2.pretty_name, t2.object_type as rel_type, tree_level(t2.tree_sortkey) - tree_level(t1.tree_sortkey) + 1  as type_level
              from acs_object_types t1,
		   acs_object_types t2
             where t2.tree_sortkey between t1.tree_sortkey and tree_right(t1.tree_sortkey)
	       and t2.object_type not in (select g.rel_type 
                                            from group_type_rels g 
                                           where g.group_type = :group_type)
	       and t1.object_type in ('membership_rel', 'composition_rel')) t,
	    acs_rel_types rel_type
       where t.rel_type = rel_type.rel_type
       and (rel_type.object_type_one = :group_type 
            or acs_object_type__is_subtype_p(rel_type.object_type_one, :group_type) = 't')

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/permissions/perm-include.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/permissions/perm-include-postgresql.xql)b(object_info):[db_1row]
 {} 
 ------------ 
    select acs_object__name(object_id) as object_name,
           acs_object__name(context_id) as parent_object_name,
           context_id
    from   acs_objects
    where  object_id = :object_id

       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/auth/authority.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/auth/authority-postgresql.xql)FILES: TCL(c:/temp/openacs5/packages/acs-lang/tcl/lang-catalog-procs.tcl) XML(c:/temp/openacs5/packages/acs-lang/tcl/lang-catalog-procs-postgresql.xql)b(last_sync_messages):[db_foreach]
 {

      select package_key
      from   apm_package_types
      where  exists (select 1 
                     from   apm_package_versions
                     where  package_key = apm_package_types.package_key
                        and installed_p = 't'
                        and enabled_p = 't')
       and not exists (select 1
                       from lang_message_keys
                       where package_key = apm_package_types.package_key)
    
} 
 ------------ 
        select message_key,
               message,
               deleted_p
        from   lang_messages
        where  package_key = :package_key
        and    locale = :locale
        and    sync_time is not null
        union
        select lma1.message_key,
               lma1.old_message,
               lma1.deleted_p
        from   lang_messages_audit lma1
        where  lma1.package_key = :package_key
        and    lma1.locale = :locale
        and    lma1.sync_time is not null
        and    lma1.audit_id = (select max(lma2.audit_id)
                                      from lang_messages_audit lma2
                                      where lma2.package_key = lma1.package_key
                                        and lma2.message_key = lma1.message_key
                                        and lma2.locale = :locale
                                        and lma2.sync_time is not null
                                      )
        and    not exists (select 1
                           from lang_messages
                           where package_key = lma1.package_key
                             and message_key = lma1.message_key
                             and locale = :locale
                             and sync_time is not null
                           )
     
b(update_sync_time):[db_dml]
 {

        select message_key,
               message,
               deleted_p
        from   lang_messages
        where  package_key = :package_key
        and    locale = :locale
        and    sync_time is not null
        union
        select lma1.message_key,
               lma1.old_message,
               lma1.deleted_p
        from   lang_messages_audit lma1
        where  lma1.package_key = :package_key
        and    lma1.locale = :locale
        and    lma1.sync_time is not null
        and    lma1.audit_id = (select max(lma2.audit_id)
                                      from lang_messages_audit lma2
                                      where lma2.package_key = lma1.package_key
                                        and lma2.message_key = lma1.message_key
                                        and lma2.locale = :locale
                                        and lma2.sync_time is not null
                                      )
        and    not exists (select 1
                           from lang_messages
                           where package_key = lma1.package_key
                             and message_key = lma1.message_key
                             and locale = :locale
                             and sync_time is not null
                           )
    
} 
 ------------ 
      update lang_messages
      set sync_time = current_timestamp
      where package_key = :package_key
      and locale = :locale
     
b(get_version_name):[db_string]
 {

      update lang_messages
      set sync_time = current_timestamp
      where package_key = :package_key
      and locale = :locale
    
} 
 ------------ 
           select version_name
           from apm_package_version_info
           where version_id = apm_package__highest_version(:package_key)
     
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/constraints-create.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/constraints-create-postgresql.xql)b(select_props):[db_1row]
 {
    select acs_group.name(:group_id) as group_name,
           t.pretty_name as rel_type_pretty_name
      from acs_object_types t
     where t.object_type = :rel_type
} 
 ------------ 
      
    select acs_group__name(:group_id) as group_name,
           t.pretty_name as rel_type_pretty_name
      from acs_object_types t
     where t.object_type = :rel_type

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/delete-2.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/delete-2-postgresql.xql)b(select_rel_ids):[db_list]
 {

      
	select r.rel_id
	  from acs_rels r, acs_object_party_privilege_map perm
	 where perm.object_id = r.rel_id
	  and perm.party_id = :user_id
	  and perm.privilege = 'delete'
	  and r.rel_type = :rel_type
    
      
} 
 ------------ 
      
	select r.rel_id
	  from acs_rels r
	 where acs_permission__permission_p(r.rel_id, :user_id, 'delete')
	  and r.rel_type = :rel_type
    
       
b(drop_relationship_type):[db_exec_plsql]
 {
	    BEGIN
	      acs_rel_type.drop_type( rel_type  => :rel_type,
                                      cascade_p => 't' );
	    END;
	} 
 ------------ 
	      select acs_rel_type__drop_type(:rel_type,'t')
       
q(drop_type_table):[db_exec_plsql]
 "drop table $table_name" 
 ------------ 
drop table $table_name
       
b(select_segment_id):[db_string]
 {

      
	select s.segment_id
	  from rel_segments s, acs_object_party_privilege_map perm
	 where perm.object_id = s.segment_id
 	   and perm.party_id = :user_id
	   and perm.privilege = 'delete'
	   and s.rel_type = :rel_type
    
      
} 
 ------------ 
      
	select s.segment_id
	  from rel_segments s
	 where acs_permission__permission_p(s.segment_id, :user_id, 'delete')
	   and s.rel_type = :rel_type
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/index.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/site-map/index-postgresql.xql)b(nodes_select):[db_foreach]
 {} 
 ------------ 
            select package_id,
                   package_key,
                   pretty_name as package_pretty_name,
                   apm_package_type__num_parameters(package_key) as parameter_count,
                   node_id, url, parent_url, name, root_p, mylevel, object_id,
                   directory_p, parent_id, n_children,
                   p.instance_name as object_name,
                   acs_permission__permission_p(object_id, :user_id, 'admin') as object_admin_p
            from apm_packages p join apm_package_types using (package_key) right outer join
                 (select n.node_id,
                         site_node__url(n.node_id) as url,
                         site_node__url(n.parent_id) as parent_url,
                         n.name,
                         case when exists (select 1 from site_nodes where parent_id = n.node_id) then 1 else 0 end as n_children,
                         case when n.node_id = (select site_node__node_id('/', null)) then 1 else 0 end as root_p,
                         (tree_level(n.tree_sortkey) - (select tree_level(n2.tree_sortkey) from site_nodes n2 where n2.node_id = (select coalesce(:root_id, site_node__node_id('/', null))))) as mylevel,
                         n.object_id,
                         n.directory_p,
                         n.parent_id
                  from site_nodes n, site_nodes n2
                  where (n.object_id is null
                         or exists (
                            select 1 from acs_object_party_privilege_map ppm 
                             where ppm.object_id = n.object_id 
                               and ppm.party_id = :user_id 
                               and ppm.privilege = 'read'))
                  and n2.node_id = (select coalesce(:root_id, site_node__node_id('/', null)))
                  and n.tree_sortkey between n2.tree_sortkey and tree_right(n2.tree_sortkey)
                  and (n.parent_id is null or n.parent_id in ([join $expand ", "]))) site_map
            on site_map.object_id = p.package_id
            order by url
         
b(path_select):[db_foreach]
 {

            select package_id,
                   package_key,
                   pretty_name as package_pretty_name,
                   apm_package_type__num_parameters(package_key) as parameter_count,
                   node_id, url, parent_url, name, root_p, mylevel, object_id,
                   directory_p, parent_id, n_children,
                   p.instance_name as object_name,
                   acs_permission__permission_p(object_id, :user_id, 'admin') as object_admin_p
            from apm_packages p join apm_package_types using (package_key) right outer join
                 (select n.node_id,
                         site_node__url(n.node_id) as url,
                         site_node__url(n.parent_id) as parent_url,
                         n.name,
                         case when exists (select 1 from site_nodes where parent_id = n.node_id) then 1 else 0 end as n_children,
                         case when n.node_id = (select site_node__node_id('/', null)) then 1 else 0 end as root_p,
                         (tree_level(n.tree_sortkey) - (select tree_level(n2.tree_sortkey) from site_nodes n2 where n2.node_id = (select coalesce(:root_id, site_node__node_id('/', null))))) as mylevel,
                         n.object_id,
                         n.directory_p,
                         n.parent_id
                  from site_nodes n, site_nodes n2
                  where (n.object_id is null
                         or exists (
                            select 1 from acs_object_party_privilege_map ppm 
                             where ppm.object_id = n.object_id 
                               and ppm.party_id = :user_id 
                               and ppm.privilege = 'read'))
                  and n2.node_id = (select coalesce(:root_id, site_node__node_id('/', null)))
                  and n.tree_sortkey between n2.tree_sortkey and tree_right(n2.tree_sortkey)
                  and (n.parent_id is null or n.parent_id in ([join $expand ", "]))) site_map
            on site_map.object_id = p.package_id
            order by url
        
} 
 ------------ 
            select s2.node_id,
                   s2.name,
                   s2.directory_p,
                   tree_level(s2.tree_sortkey) as level,
                   acs_object__name(s2.object_id) as obj_name,
                   acs_permission__permission_p(s2.object_id, :user_id, 'admin') as admin_p
            from (select tree_ancestor_keys(site_node_get_tree_sortkey(:root_id)) as tree_sortkey) parents,
                 site_nodes s2
            where s2.tree_sortkey = parents.tree_sortkey
            order by level
         
b(services_select):[db_foreach]
 {

            select s2.node_id,
                   s2.name,
                   s2.directory_p,
                   tree_level(s2.tree_sortkey) as level,
                   acs_object__name(s2.object_id) as obj_name,
                   acs_permission__permission_p(s2.object_id, :user_id, 'admin') as admin_p
            from (select tree_ancestor_keys(site_node_get_tree_sortkey(:root_id)) as tree_sortkey) parents,
                 site_nodes s2
            where s2.tree_sortkey = parents.tree_sortkey
            order by level
        
} 
 ------------ 
            select package_id,
                   ap.package_key,
                   ap.instance_name,
                   apm_package_type__num_parameters(ap.package_key) as parameter_count
            from apm_packages ap,
                 apm_package_types
            where ap.package_key = apm_package_types.package_key
            and package_type = 'apm_service'
            and not exists (select 1 from site_nodes sn where sn.object_id = package_id)
            and exists (select 1 from acs_object_party_privilege_map ppm 
                        where ppm.object_id = package_id and ppm.party_id = :user_id and ppm.privilege = 'admin')
            order by instance_name
         
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/index.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/index-postgresql.xql)FILES: TCL(c:/temp/openacs5/packages/acs-lang/www/admin/test/format-test.tcl) XML(c:/temp/openacs5/packages/acs-lang/www/admin/test/format-test-postgresql.xql)q(lang_system_time_select):[db_1row]
 "SELECT to_char(sysdate, 'YYYY-MM-DD HH24:MI:SS') AS system_time FROM dual" 
 ------------ 
	SELECT to_char(current_time, 'YYYY-MM-DD HH24:MI:SS') AS system_time
     
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/enum-add-2.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/attributes/enum-add-2-postgresql.xql)b(insert_enum_value):[db_dml]
 {
		    insert into acs_enum_values v
		    (attribute_id, sort_order, enum_value, pretty_name)
		    select :attribute_id, :sort_order, :pretty_name, :pretty_name
		    from dual
		    where not exists (select 1 
                                        from acs_enum_values v2
                                       where v2.pretty_name = :pretty_name
                                         and v2.attribute_id = :attribute_id)
		} 
 ------------ 
      
		    insert into acs_enum_values
		    (attribute_id, sort_order, enum_value, pretty_name)
		    select :attribute_id, :sort_order, :pretty_name, :pretty_name
		    
		    where not exists (select 1 
                                        from acs_enum_values v2
                                       where v2.pretty_name = :pretty_name
                                         and v2.attribute_id = :attribute_id)
		
       
FILES: TCL(c:/temp/openacs5/packages/acs-templating/tcl/widget-procs.tcl) XML(c:/temp/openacs5/packages/acs-templating/tcl/widget-procs-postgresql.xql)b(search_groups_relsegs):[db_list_of_lists]
 {} 
 ------------ 
        (
        select g1.group_name as party_name, g1.group_id as party_id from groups g1
        where lower(g1.group_name) like '%' || lower(:search_string) || '%'
        )
        union
        (
        select g2.group_name || ' : ' || s2.segment_name as party_name, s2.segment_id as party_id
        from rel_segments s2
        join groups g2 on s2.group_id=g2.group_id
        where lower(g2.group_name || ' : ' || s2.segment_name) like '%' || lower(:search_string) || '%'
        )
        order by party_name
       
b(search_persons):[db_list_of_lists]
 {

        (
        select g1.group_name as party_name, g1.group_id as party_id from groups g1
        where lower(g1.group_name) like '%' || lower(:search_string) || '%'
        )
        union
        (
        select g2.group_name || ' : ' || s2.segment_name as party_name, s2.segment_id as party_id
        from rel_segments s2
        join groups g2 on s2.group_id=g2.group_id
        where lower(g2.group_name || ' : ' || s2.segment_name) like '%' || lower(:search_string) || '%'
        )
        order by party_name
      
} 
 ------------ 
        select (first_names || ' ' || last_name) as name, pe.person_id from persons pe 
        join parties pa on pe.person_id=pa.party_id
        where lower(pe.first_names || ' ' || pe.last_name) like '%' || lower(:search_string) || '%'
        or lower(pa.email) like '%' || lower(:search_string) || '%'
        order by lower(first_names || ' ' || last_name)
       
FILES: TCL(c:/temp/openacs5/packages/acs-lang/www/admin/message-list.tcl) XML(c:/temp/openacs5/packages/acs-lang/www/admin/message-list-postgresql.xql)FILES: TCL(c:/temp/openacs5/packages/acs-subsite/tcl/relation-procs.tcl) XML(c:/temp/openacs5/packages/acs-subsite/tcl/relation-procs-postgresql.xql)b(rel_type_valid_p):[db_string]
 {

	    select s.segment_id, r.object_id_two as party_id
  	      from rel_segments s, acs_rels r
	     where r.object_id_one = s.group_id
	       and r.rel_type = s.rel_type
	       and r.rel_id = :rel_id
      
} 
 ------------ 
      
	    select case when exists
	             (select 1 from rc_valid_rel_types r 
                      where r.group_id = :group_id 
                        and r.rel_type = :rel_type)
	           then 1 else 0 end
	      
    
       
b(select_sub_rel_types):[db_foreach]
 {

      
	    select case when exists
	             (select 1 from rc_valid_rel_types r 
                      where r.group_id = :group_id 
                        and r.rel_type = :rel_type)
	           then 1 else 0 end
	      
    
      
} 
 ------------     
	select
		pretty_name, object_type, level, indent,
		case when valid_types.rel_type = null then 0 else 1 end as valid_p
	from 
		(select
			t2.pretty_name, t2.object_type, tree_level(t2.tree_sortkey) - tree_level(t1.tree_sortkey) as level,
		        repeat('&nbsp;', (tree_level(t2.tree_sortkey) - tree_level(t1.tree_sortkey)) * 4) as indent,
	        	t2.tree_sortkey as sortkey
		from
			acs_object_types t1,
			acs_object_types t2
		where	t2.tree_sortkey between t1.tree_sortkey and tree_right(t1.tree_sortkey)
		  and   t1.object_type = :start_with) types left join
		(select
			rel_type
		from
			rc_valid_rel_types
		where
			group_id= :group_id) valid_types
	on (types.object_type = valid_types.rel_type)
	order by sortkey
		

	
       
q(relation_delete):[db_exec_plsql]
 "begin ${package_name}.del(:rel_id); end;" 
 ------------ 
      begin perform ${package_name}__delete(:rel_id); return null; end;
       
b(others_depend_p):[db_string]
 {
    
	select
		pretty_name, object_type, level, indent,
		case when valid_types.rel_type = null then 0 else 1 end as valid_p
	from 
		(select
			t2.pretty_name, t2.object_type, tree_level(t2.tree_sortkey) - tree_level(t1.tree_sortkey) as level,
		        repeat('&nbsp;', (tree_level(t2.tree_sortkey) - tree_level(t1.tree_sortkey)) * 4) as indent,
	        	t2.tree_sortkey as sortkey
		from
			acs_object_types t1,
			acs_object_types t2
		where	t2.tree_sortkey between t1.tree_sortkey and tree_right(t1.tree_sortkey)
		  and   t1.object_type = :start_with) types left join
		(select
			rel_type
		from
			rc_valid_rel_types
		where
			group_id= :group_id) valid_types
	on (types.object_type = valid_types.rel_type)
	order by sortkey
		

	
      
} 
 ------------ 
      
	    select case when exists
	             (select 1 from rc_violations_by_removing_rel r where r.rel_id = :rel_id)
	           then 1 else 0 end
	      
    
       
b(select_rel_violation):[db_string]
 {
	#    select rel_constraint.violation(:rel_id) from dual
	# } 
 ------------ 
      
	    select rel_constraint__violation(:rel_id) 
	
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/rel-type-add.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/rel-type-add-postgresql.xql)b(select_primary_relations):[db_multirow]
 {
    select replace(lpad(' ', (t.type_level - 1) * 4), ' ', '&nbsp;') as indent,
           t.pretty_name, t.rel_type
      from (select t.pretty_name, t.object_type as rel_type, level as type_level
              from acs_object_types t
             where t.object_type not in (select g.rel_type 
                                           from group_rels g 
                                          where g.group_id = :group_id)
           connect by prior t.object_type = t.supertype
             start with t.object_type in ('membership_rel', 'composition_rel')) t,
           acs_rel_types rel_type
     where t.rel_type = rel_type.rel_type
       and (rel_type.object_type_one = :group_type 
            or acs_object_type.is_subtype_p(rel_type.object_type_one, :group_type) = 't')
} 
 ------------ 

    select repeat('&nbsp;', (t.type_level - 1) * 4) as indent,
           t.pretty_name, t.rel_type
      from (select t2.pretty_name, t2.object_type as rel_type, tree_level(t2.tree_sortkey) - tree_level(t1.tree_sortkey) + 1  as type_level
              from acs_object_types t1,
		   acs_object_types t2
             where t2.tree_sortkey between t1.tree_sortkey and tree_right(t1.tree_sortkey)
	       and t2.object_type  not in (select g.rel_type from group_rels g where g.group_id = :group_id)
	       and t1.object_type in ('membership_rel', 'composition_rel')) t,
	    acs_rel_types rel_type
       where t.rel_type = rel_type.rel_type
       and (rel_type.object_type_one = :group_type 
            or acs_object_type__is_subtype_p(rel_type.object_type_one, :group_type) = 't')

       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/apm/version-view.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/apm/version-view-postgresql.xql)b(apm_data_model_install_version):[db_0or1row]
 {
    select data_model_installed_version from (
        select version_name as data_model_installed_version
        from   apm_package_versions
        where  package_key = :package_key
        and    data_model_loaded_p = 't'
        order by apm_package_version.sortable_version_name(version_name) desc
    )
    where rownum = 1
} 
 ------------ 
    select data_model_installed_version from (
        select version_name as data_model_installed_version
        from   apm_package_versions
        where  package_key = :package_key
        and    data_model_loaded_p = 't'
        order by apm_package_version__sortable_version_name(version_name) desc
    ) as bad_postgres_needs_this
    limit 1

       
b(apm_enabled_version_info):[db_0or1row]
 {
    select version_id as installed_version_id, version_name as installed_version_name,
           enabled_p as installed_enabled_p,
           apm_package_version.version_name_greater(version_name, :version_name) as version_name_greater
    from   apm_package_versions
    where  package_key = :package_key
    and    installed_p = 't'
    and rownum = 1
} 
 ------------ 
    select version_id as installed_version_id, version_name as installed_version_name,
           enabled_p as installed_enabled_p,
           apm_package_version__version_name_greater(version_name, :version_name) as version_name_greater
    from   apm_package_versions
    where  package_key = :package_key
    and    installed_p = 't'
    limit 1
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/index.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/index-postgresql.xql)FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/apm-procs.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/apm-procs-postgresql.xql)b(invoke_new):[db_exec_plsql]
 {

      select 1 from apm_package_versions
      where version_id = :version_id
      and installed_p = 't'
    
} 
 ------------ 

      select apm_package__new(
        :package_id,
        :instance_name,
        :package_key,
        'apm_package',
        now(),
        null,
        null,
        :context_id
      );
    
       
b(dependency_remove):[db_exec_plsql]
 {
	begin
	apm_package_version.remove_dependency(
             dependency_id => :dependency_id
	);
	end;					        
    } 
 ------------ 

	select apm_package_version__remove_dependency(
             :dependency_id
	);
    
       
b(apm_highest_version_name):[db_string]
 {


      select apm_package__new(
        :package_id,
        :instance_name,
        :package_key,
        'apm_package',
        now(),
        null,
        null,
        :context_id
      );
    
      
} 
 ------------ 
      
        select version_name 
        from   apm_package_versions
        where  package_key = :package_key
        and    version_id = apm_package__highest_version(:package_key)
    
       
b(interface_remove):[db_exec_plsql]
 {
	begin
	apm_package_version.remove_interface(
             interface_id => :interface_id
	);
	end;					        
    } 
 ------------ 

	select apm_package_version__remove_interface(
             :interface_id
	);
    
       
b(parameter_register):[db_exec_plsql]
 {
	    begin
	    :1 := apm.register_parameter(
					 parameter_id => :parameter_id,
					 parameter_name => :parameter_name,
					 package_key => :package_key,
					 description => :description,
					 datatype => :datatype,
					 default_value => :default_value,
					 section_name => :section_name,
					 min_n_values => :min_n_values,
					 max_n_values => :max_n_values
	                                );
	    end;
	} 
 ------------ 

	    select apm__register_parameter(
					 :parameter_id,
					 :package_key,
					 :parameter_name,
					 :description,
					 :datatype,
					 :default_value,
					 :section_name,
					 :min_n_values,
					 :max_n_values
	                                );
	
       
b(interface_add):[db_exec_plsql]
 {
	begin
	:1 := apm_package_version.add_interface(
            interface_id => :interface_id,
	    version_id => :version_id,
	    interface_uri => :interface_uri,
	    interface_version => :interface_version
        );					 
	end;
    } 
 ------------ 

	select apm_package_version__add_interface(
            :interface_id,
	    :version_id,
	    :interface_uri,
	    :interface_version
        );					 
    
       
b(apm_package_version_installed_p):[db_string]
 {

      
        select version_name 
        from   apm_package_versions
        where  package_key = :package_key
        and    version_id = apm_package__highest_version(:package_key)
    
      
} 
 ------------ 

	select case when count(*) = 0 then 0 else 1 end 
        from apm_package_versions
	where package_key = :package_key
	and version_name = :version_name
    
       
b(dependency_add):[db_exec_plsql]
 {
	begin
	:1 := apm_package_version.add_dependency(
            dependency_id => :dependency_id,
	    version_id => :version_id,
	    dependency_uri => :dependency_uri,
	    dependency_version => :dependency_version
        );					 
	end;
    } 
 ------------ 

	select apm_package_version__add_dependency(
            :dependency_id,
	    :version_id,
	    :dependency_uri,
	    :dependency_version
        );					 
    
       
b(apm_package_url_from_id):[db_string]
 {
	select site_node.url(node_id) 
          from site_nodes 
         where object_id = :package_id
    } 
 ------------ 
      
	select site_node__url(node_id) 
          from site_nodes 
         where object_id = :package_id
    
       
b(package_types):[db_foreach]
 {


	select case when count(*) = 0 then 0 else 1 end 
        from apm_package_versions
	where package_key = :package_key
	and version_name = :version_name
    
      
} 
 ------------ 
         select package_key,
         pretty_name
         from apm_package_types
         where not (apm_package__singleton_p(package_key) = 1 and
                    apm_package__num_instances(package_key) >= 1)
         order by pretty_name
       
b(apm_highest_version):[db_exec_plsql]
 {
	begin
	:1 := apm_package.highest_version (
                    package_key => :package_key
		    );
	end;
    } 
 ------------ 

	select  apm_package__highest_version (
                    :package_key
		    );
    
       
b(apm_num_instances):[db_exec_plsql]
 {
	begin
	:1 := apm_package.num_instances(
		package_key => :package_key
		);
	end;
    } 
 ------------ 

	select apm_package__num_instances(
		:package_key
		);
    
       
b(apm_package_instance_delete):[db_exec_plsql]
 {

         select package_key,
         pretty_name
         from apm_package_types
         where not (apm_package__singleton_p(package_key) = 1 and
                    apm_package__num_instances(package_key) >= 1)
         order by pretty_name
      
} 
 ------------ 
	select apm_package__delete(:package_id);
   
b(parameter_unregister):[db_exec_plsql]
 {
	begin
	delete from apm_parameter_values 
	where parameter_id = :parameter_id;
	delete from apm_parameters 
	where parameter_id = :parameter_id;
	acs_object.del(:parameter_id);
	end;
    } 
 ------------ 
      
	begin
	delete from apm_parameter_values 
	where parameter_id = :parameter_id;
	delete from apm_parameters 
	where parameter_id = :parameter_id;
	PERFORM acs_object__delete(:parameter_id);

        return null;
	end;
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/apm/version-dependency-add.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/apm/version-dependency-add-postgresql.xql)b(apm_all_service_uri):[db_foreach]
 {
    select distinct service_uri, service_version
    from   apm_package_dependencies
    order by service_uri, apm_package_version.sortable_version_name(service_version)
} 
 ------------ 
    select distinct service_uri, service_version,
        apm_package_version__sortable_version_name(service_version)
    from apm_package_dependencies
    order by service_uri, apm_package_version__sortable_version_name(service_version)

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/tcl/package-procs.tcl) XML(c:/temp/openacs5/packages/acs-subsite/tcl/package-procs-postgresql.xql)b(create_object):[db_exec_plsql]
 {

      
      select id_column
      from acs_object_types
      where object_type = :object_type
      
    
} 
 ------------ 

	select ${package_name}__new([plpgsql_utility::generate_attribute_parameter_call \
		-prepend ":" \
		${package_name}__new \
		$pieces])

       
b(exec_plsql):[db_exec_plsql]
 {


	select ${package_name}__new([plpgsql_utility::generate_attribute_parameter_call \
		-prepend ":" \
		${package_name}__new \
		$pieces])

      
} 
 ------------ 

	select ${package_name}__${function_name}([plpgsql_utility::generate_attribute_parameter_call \
		-prepend ":" \
		${package_name}__${function_name} \
		$pieces])

       
b(select_comments):[db_1row]
 {
	    select 'Unknown' as author,
	           sysdate as creation_date
	      from dual
	} 
 ------------ 
      
	    select acs_object__name(:user_id) as author,
	           current_timestamp as creation_date
	      
	
       
b(object_type_dynamic_p):[db_string]
 {
	select case when exists (select 1 
                                   from acs_object_types t
                                  where t.dynamic_p = 't'
                                    and t.object_type = :object_type)
	            then 1 else 0 end
	  from dual
    } 
 ------------ 
      
	select case when exists (select 1 
                                   from acs_object_types t
                                  where t.dynamic_p = 't'
                                    and t.object_type = :object_type)
	            then 1 else 0 end
	  
    
       
b(select_object_types):[db_list]
 {
	select t.object_type
	  from acs_object_types t
	 where t.dynamic_p = 't'
	 start with t.object_type = :object_type
       connect by prior t.object_type = t.supertype
    } 
 ------------ 

	select t2.object_type
	  from acs_object_types t1, acs_object_types t2
	 where t2.dynamic_p = 't'
	   and t2.tree_sortkey between t1.tree_sortkey and tree_right(t1.tree_sortkey)
	   and t1.object_type = :object_type
    
       
b(select_supertype_function_params):[db_list]
 {
	select args.argument_name
	  from user_arguments args
         where args.package_name =upper(:supertype_package_name)
	   and args.object_name='NEW'
    } 
 ------------ 
      
	select args.arg_name
	  from acs_function_args args
         where args.function =upper(:supertype_package_name) || '__NEW'
    
       
b(select_object_type_param_list):[db_list_of_lists]
 {
	select cols.table_name, cols.column_name
	  from user_tab_columns cols, 
	       (select upper(t.table_name) as table_name
	          from acs_object_types t
                 start with t.object_type = :object_type
               connect by prior t.supertype = t.object_type) t
	 where cols.column_name in
	          (select args.argument_name
                     from user_arguments args
                    where args.position > 0
	              and args.object_name = upper(:object_name)
	              and args.package_name = upper(:package_name))
	   and cols.table_name = t.table_name
    } 
 ------------ 

	select cols.table_name, cols.column_name
	  from user_tab_columns cols, 
	       (select upper(t2.table_name) as table_name
	          from acs_object_types t1, acs_object_types t2
		 where t1.tree_sortkey between t2.tree_sortkey and tree_right(t2.tree_sortkey)
		   and t1.object_type = :object_type) t
	 where cols.column_name in
	          (select args.arg_name
                     from acs_function_args args
                    where args.function = upper(:package_name) || '__' || upper(:object_name))
	   and cols.table_name = t.table_name
    
       
b(select_sub_types):[db_foreach]
 {
	select t.object_type as sub_type
	  from acs_object_types t 
	 start with t.object_type = :object_type 
       connect by prior t.object_type = t.supertype
    } 
 ------------ 

	select t2.object_type as sub_type
	  from acs_object_types t1, acs_object_types t2
	 where t2.tree_sortkey between t1.tree_sortkey and tree_right(t1.tree_sortkey)
	   and t1.object_type = :object_type 
    
       
b(select_all_attributes):[db_foreach]
 {
	select upper(nvl(attr.table_name,t.table_name)) as attr_table_name, 
	       upper(nvl(attr.column_name, attr.attribute_name)) as attr_column_name, 
	       attr.ancestor_type, attr.min_n_values, attr.default_value
	  from acs_object_type_attributes attr, 
	       (select t.object_type, t.table_name, level as type_level
	          from acs_object_types t
	         start with t.object_type = :object_type
	       connect by prior t.supertype = t.object_type) t
         where attr.ancestor_type = t.object_type
           and attr.object_type = :object_type
        order by t.type_level 
    } 
 ------------ 

	select upper(coalesce(attr.table_name,t.table_name)) as attr_table_name, 
	       upper(coalesce(attr.column_name, attr.attribute_name)) as attr_column_name, 
	       attr.ancestor_type, attr.min_n_values, attr.default_value
	  from acs_object_type_attributes attr, 
	       (select t2.object_type, t2.table_name, (tree_level(t1.tree_sortkey) - tree_level(t2.tree_sortkey)) + 1 as type_level
	          from acs_object_types t1, acs_object_types t2
		 where t1.tree_sortkey between t2.tree_sortkey and tree_right(t2.tree_sortkey)
		   and t1.object_type = :object_type) t
         where attr.ancestor_type = t.object_type
           and attr.object_type = :object_type
        order by t.type_level 
    
       
q(attributes_select):[db_list_of_lists]
 "
	select a.attribute_id, 
	       nvl(a.table_name, t.table_name) as table_name,
	       nvl(a.column_name, a.attribute_name) as attribute_name, 
	       a.pretty_name, 
	       a.datatype, 
	       decode(a.min_n_values,0,'f','t') as required_p, 
               a.default_value, 
               t.table_name as object_type_table_name, 
               t.id_column as object_type_id_column
          from acs_object_type_attributes a, 
               (select t.object_type, t.table_name, t.id_column, level as type_level
                  from acs_object_types t
                 start with t.object_type=:start_with
               connect by prior t.object_type = t.supertype) t 
         where a.object_type = :object_type
           and t.object_type = a.object_type $storage_clause
         order by type_level" 
 ------------ 

	select a.attribute_id, 
	       coalesce(a.table_name, t.table_name) as table_name,
	       coalesce(a.column_name, a.attribute_name) as attribute_name, 
	       a.pretty_name, 
	       a.datatype, 
	       case when a.min_n_values = 0 then 'f' else 't' end as required_p, 
               a.default_value, 
               t.table_name as object_type_table_name, 
               t.id_column as object_type_id_column
          from acs_object_type_attributes a, 
               (select t.object_type, t.table_name, t.id_column, tree_level(t.tree_sortkey) as type_level
                from acs_object_types t, acs_object_types t2
		where t.tree_sortkey between t2.tree_sortkey and tree_right(t2.tree_sortkey)
		  and t2.object_type = :start_with) t
         where a.object_type = :object_type
           and t.object_type = a.ancestor_type $storage_clause
         order by type_level, attribute_id
       
b(package_valid_p):[db_string]
 {
	    select case when exists (select 1 
                                       from user_objects 
                                      where status = 'INVALID'
                                        and object_name = upper(:package_name)
                                        and object_type = upper(:type))
                        then 0 else 1 end
	      from dual
	} 
 ------------ 

select 1
    
       
b(select_ancestor_types):[db_foreach]
 {
	select t.object_type as ancestor_type
	  from acs_object_types t 
	 start with t.object_type = :object_type 
       connect by prior t.supertype = t.object_type
    } 
 ------------ 

	select t2.object_type as ancestor_type
	  from acs_object_types t1, acs_object_types t2
	 where t1.tree_sortkey between t2.tree_sortkey and tree_right(t2.tree_sortkey)
	   and t1.object_type = :object_type
    
       
b(select_package_func_param_list):[db_list]
 {


	select ${package_name}__${function_name}([plpgsql_utility::generate_attribute_parameter_call \
		-prepend ":" \
		${package_name}__${function_name} \
		$pieces])

      
} 
 ------------ 
	select args.arg_name
        from acs_function_args args
        where args.function = upper(:package_name) || '__' || upper(:function_name)
       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/apm/packages-install-3.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/apm/packages-install-3-postgresql.xql)b(apm_package_upgrade_from):[db_string]
 {
	    select version_name from apm_package_versions
	    where package_key = :package_key
	    and version_id = apm_package.highest_version(:package_key)
	} 
 ------------ 
      
	    select version_name from apm_package_versions
	    where package_key = :package_key
	    and version_id = apm_package__highest_version(:package_key)
	
       
FILES: TCL(c:/temp/openacs5/packages/acs-service-contract/www/binding-uninstall.tcl) XML(c:/temp/openacs5/packages/acs-service-contract/www/binding-uninstall-postgresql.xql)FILES: TCL(c:/temp/openacs5/packages/acs-content-repository/tcl/filter-procs.tcl) XML(c:/temp/openacs5/packages/acs-content-repository/tcl/filter-procs-postgresql.xql)b(get_template_url):[db_0or1row]
 {


    select live_revision from cr_items where item_id = :item_id

      
} 
 ------------ 

        select 
          content_template__get_path(
          content_item__get_template(:item_id, :context),:template_root) as template_url 
        from 
          dual

       
b(gcv_get_previous_content):[db_string]
 {


        select 
          content_template__get_path(
          content_item__get_template(:item_id, :context),:template_root) as template_url 
        from 
          dual

      
} 
 ------------ 
      
    select 
      content
    from 
      cr_revisions
    where 
      revision_id = :revision_id
  
       
b(get_template_url):[db_0or1row]
 {

      
    select 
      content
    from 
      cr_revisions
    where 
      revision_id = :revision_id
  
      
} 
 ------------ 

        select 
          content_item__get_live_revision(content_item__get_template(:item_id, :context)) as template_id,
          content_template__get_path(content_item__get_template(:item_id, :context),:template_root) as template_url 
        from 
          dual


       
b(get_template_info):[db_0or1row]
 {


        select 
          content_item__get_live_revision(content_item__get_template(:item_id, :context)) as template_id,
          content_template__get_path(content_item__get_template(:item_id, :context),:template_root) as template_url 
        from 
          dual


      
} 
 ------------ 

    select 
      item_id, content_type
    from 
      cr_items
    where
      item_id = content_item__get_id(:url, :template_root, 'f')

       
b(get_item_info):[db_0or1row]
 {


    select 
      item_id, content_type
    from 
      cr_items
    where
      item_id = content_item__get_id(:url, :template_root, 'f')

      
} 
 ------------ 

    select 
      item_id, content_type
    from 
      cr_items
    where
      item_id = content_item__get_id(:url, :content_root, 'f')

       
b(gcv_get_revision_id):[db_exec_plsql]
 {
	  begin
	    content_revision.to_temporary_clob(:revision_id);
	  end;
      } 
 ------------ 

        select 1

	 
FILES: TCL(c:/temp/openacs5/packages/acs-api-browser/www/plsql-subprograms-all.tcl) XML(c:/temp/openacs5/packages/acs-api-browser/www/plsql-subprograms-all-postgresql.xql)b(all_subprograms):[db_multirow]
 {
    select object_type as type, object_name as name
    from user_objects
    where object_type in ('PACKAGE', 'PROCEDURE', 'FUNCTION')
    order by
    decode(object_type, 'PACKAGE', 0, 'PROCEDURE', 1, 'FUNCTION', 2) asc
} 
 ------------ 

	select proname as name, 'FUNCTION' as type 
	from pg_proc 
	where proowner=(select usesysid from pg_user
	                where usename = current_user) 
	order by proname
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-content-repository/tcl/acs-content-repository-init.tcl) XML(c:/temp/openacs5/packages/acs-content-repository/tcl/acs-content-repository-init-postgresql.xql)b(schedule_releases):[db_exec_plsql]
 {begin cr_scheduled_release_exec; end;} 
 ------------ 

         select cr_scheduled_release_exec();

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/permissions/one.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/permissions/one-postgresql.xql)FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/delete.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/delete-postgresql.xql)b(select_counts):[db_1row]
 {
    select (select count(*) from group_element_map where group_id = :group_id) as elements,
           (select count(*) from rel_segments where group_id = :group_id) as segments,
           (select count(*) 
              from rel_constraints cons, rel_segments segs
             where segs.segment_id in (cons.rel_segment,cons.required_rel_segment)
               and segs.group_id = :group_id) as constraints
      from dual
} 
 ------------ 
      
    select (select count(*) from group_element_map where group_id = :group_id) as elements,
           (select count(*) from rel_segments where group_id = :group_id) as segments,
           (select count(*) 
              from rel_constraints cons, rel_segments segs
             where segs.segment_id in (cons.rel_segment,cons.required_rel_segment)
               and segs.group_id = :group_id) as constraints
      

       
b(object_name):[db_string]
 {select acs_object.name(:group_id) from dual} 
 ------------ 
      select acs_object__name(:group_id) 
       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/shared/community-member.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/shared/community-member-postgresql.xql)FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/users/member-state-change.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/users/member-state-change-postgresql.xql)q(unapprove_email):[db_exec_plsql]
 "
                begin acs_user.unapprove_email ( user_id => :user_id ); end;" 
 ------------ 
	select acs_user__unapprove_email (:user_id);
	 
b(get_states):[db_0or1row]
 {
    select email_verified_p as email_verified_p_old,
           member_state as member_state_old,
           first_names || ' ' || last_name as name,
           email,
           rel_id,
           row_id
    from cc_users
    where user_id = :user_id
} 
 ------------ 
      select u.email_verified_p as email_verified_p_old,
          mr.member_state as member_state_old,
          per.first_names || ' ' || per.last_name as name,
          part.email, mr.rel_id, u.oid as row_id
      from users u
      JOIN parties part on (part.party_id = u.user_id)
        JOIN persons per on (per.person_id = u.user_id)
      LEFT JOIN membership_rels mr on (mr.rel_id = u.user_id)
      where u.user_id = :user_id
      
       
q(approve_email):[db_exec_plsql]
 "
                begin acs_user.approve_email ( user_id => :user_id ); end;" 
 ------------ 
	select acs_user__approve_email (:user_id);
	 
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/one.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/one-postgresql.xql)b(attributes_select):[db_multirow]
 {
    select a.attribute_id, a.pretty_name, 
           a.ancestor_type, t.pretty_name as ancestor_pretty_name
      from acs_object_type_attributes a,
           (select t.object_type, t.pretty_name, level as type_level
              from acs_object_types t
             start with t.object_type='group'
           connect by prior t.object_type = t.supertype) t 
     where a.object_type = :group_type
       and t.object_type = a.ancestor_type
    order by type_level 
} 
 ------------ 

    select a.attribute_id, a.pretty_name, 
           a.ancestor_type, t.pretty_name as ancestor_pretty_name
      from acs_object_type_attributes a,
           (select t2.object_type, t2.pretty_name,
		   tree_level(t2.tree_sortkey) - tree_level(t1.tree_sortkey) + 1 as type_level		   	
              from acs_object_types t1, acs_object_types t2
	     where t1.object_type = 'group'
	       and t2.tree_sortkey between t1.tree_sortkey and tree_right(t1.tree_sortkey)) t
     where a.object_type = :group_type
       and t.object_type = a.ancestor_type
    order by type_level 

       
b(groups_select):[db_multirow]
 {
    select my_view.group_name, my_view.group_id, rownum as num 
    from (select /*+ ORDERED */ DISTINCT  g.group_name, g.group_id
           from acs_objects o, groups g,
                application_group_element_map app_group, 
                all_object_party_privilege_map perm
          where perm.object_id = g.group_id
            and perm.party_id = :user_id
            and perm.privilege = 'read'
            and g.group_id = o.object_id
            and o.object_type = :group_type
            and app_group.package_id = :package_id
            and app_group.element_id = g.group_id
          order by lower(g.group_name)) my_view 
    where rownum <= 26
} 
 ------------ 

    select my_view.group_name, my_view.group_id
    from (select DISTINCT g.group_name, g.group_id
           from acs_objects o, groups g,
                application_group_element_map app_group, 
                all_object_party_privilege_map perm
          where perm.object_id = g.group_id
            and perm.party_id = :user_id
            and perm.privilege = 'read'
            and g.group_id = o.object_id
            and o.object_type = :group_type
            and app_group.package_id = :package_id
            and app_group.element_id = g.group_id
          order by g.group_name, g.group_id) my_view 
    limit 26

       
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/new.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/groups/new-postgresql.xql)b(rel_type_info):[db_1row]
 {
    select object_type as ancestor_rel_type
      from acs_object_types
     where supertype = 'relationship'
       and object_type in (
               select object_type from acs_object_types
               start with object_type = :add_with_rel_type
               connect by object_type = prior supertype
           )
} 
 ------------ 

    select object_type as ancestor_rel_type
      from acs_object_types
     where supertype = 'relationship'
       and object_type in (
               select t2.object_type
		 from acs_object_types t1, acs_object_types t2
		where t1.object_type = :add_with_rel_type
		  and t1.tree_sortkey between t2.tree_sortkey and tree_right(t2.tree_sortkey)
           )

       
FILES: TCL(c:/temp/openacs5/packages/acs-lang/tcl/locale-procs.tcl) XML(c:/temp/openacs5/packages/acs-lang/tcl/locale-procs-postgresql.xql)b(system_utc_offset):[db_string]
 {

        select locale
        from   user_preferences
        where  user_id = :user_id
      
} 
 ------------ 
      
        select (extract(epoch from current_timestamp
                          + timezone__get_offset (timezone__get_id(:system_timezone), current_timestamp)
                         )
                - extract(epoch from current_timestamp)
               ) / 60/60;
    
       
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/00-database-procs-postgresql.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/00-database-procs-postgresql-postgresql.xql)FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/user/basic-info-update.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/user/basic-info-update-postgresql.xql)FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/pvt/unsubscribe-2.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/pvt/unsubscribe-2-postgresql.xql)FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/new-2.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/rel-types/new-2-postgresql.xql)b(pretty_plural_unique):[db_string]
 {
	    select case when exists (select 1 from acs_object_types t where t.pretty_plural = :pretty_plural)
                    then 1 else 0 end
	      from dual
	} 
 ------------ 
      
	    select case when exists (select 1 from acs_object_types t where t.pretty_plural = :pretty_plural)
                    then 1 else 0 end
	      
	
       
b(select_object_types_two):[db_list_of_lists]
 {
    select replace(lpad(' ', (level - 1) * 4), ' ', '&nbsp;') || t.pretty_name, 
           t.object_type as rel_type
      from acs_object_types t
   connect by prior t.object_type = t.supertype
     start with t.object_type=:max_object_type_two
} 
 ------------ 

    select repeat('&nbsp;', ((tree_level(t2.tree_sortkey) - tree_level(t1.tree_sortkey)) * 4)) || t2.pretty_name, 
           t2.object_type as rel_type
      from acs_object_types t1,
	   acs_object_types t2
     where t2.tree_sortkey between t1.tree_sortkey and tree_right(t1.tree_sortkey)
       and t1.object_type = :max_object_type_two

       
b(select_object_types_one):[db_list_of_lists]
 {
    select replace(lpad(' ', (level - 1) * 4), ' ', '&nbsp;') || t.pretty_name, 
           t.object_type as rel_type
      from acs_object_types t
   connect by prior t.object_type = t.supertype
     start with t.object_type=:max_object_type_one
} 
 ------------ 

    select repeat('&nbsp;', ((tree_level(t2.tree_sortkey) - tree_level(t1.tree_sortkey)) * 4)) || t2.pretty_name, 
           t2.object_type as rel_type
      from acs_object_types t1,
	   acs_object_types t2
     where t2.tree_sortkey between t1.tree_sortkey and tree_right(t1.tree_sortkey)
       and t1.object_type = :max_object_type_one

       
b(pretty_name_unique):[db_string]
 {
	    select case when exists (select 1 from acs_object_types t where t.pretty_name = :pretty_name)
                    then 1 else 0 end
	      from dual
	} 
 ------------ 
      
	    select case when exists (select 1 from acs_object_types t where t.pretty_name = :pretty_name)
                    then 1 else 0 end
	      
	
       
FILES: TCL(c:/temp/openacs5/packages/acs-admin/www/users/modify-admin-privileges.tcl) XML(c:/temp/openacs5/packages/acs-admin/www/users/modify-admin-privileges-postgresql.xql)FILES: TCL(c:/temp/openacs5/packages/acs-authentication/tcl/driver-procs.tcl) XML(c:/temp/openacs5/packages/acs-authentication/tcl/driver-procs-postgresql.xql)b(update_parameter):[db_dml]
 {

            select count(*) 
            from   auth_driver_params
            where  impl_id = :impl_id
            and    authority_id = :authority_id
            and    key = :parameter
        
} 
 ------------             
            update auth_driver_params
            set    value = :value
            where  authority_id = :authority_id
            and    impl_id = :impl_id
            and    key = :parameter
         
b(insert_parameter):[db_dml]
 {
            
            update auth_driver_params
            set    value = :value
            where  authority_id = :authority_id
            and    impl_id = :impl_id
            and    key = :parameter
        
} 
 ------------             
            insert into auth_driver_params (authority_id, impl_id, key, value)
            values (:authority_id, :impl_id, :parameter, :value)
         
FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/shared/parameters.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/shared/parameters-postgresql.xql)b(select_params_set):[db_foreach]
 {} 
 ------------ 

        select p.parameter_name as c__parameter_name
        from   apm_parameters p left outer join
               (select v.parameter_id,
                       v.attr_value
                from apm_parameter_values v
                where v.package_id = :package_id
               ) v on p.parameter_id = v.parameter_id
        where  p.package_key = (select package_key from apm_packages where package_id = :package_id)
	$section_where_clause
       
b(select_params):[]
 {


        select p.parameter_name as c__parameter_name
        from   apm_parameters p left outer join
               (select v.parameter_id,
                       v.attr_value
                from apm_parameter_values v
                where v.package_id = :package_id
               ) v on p.parameter_id = v.parameter_id
        where  p.package_key = (select package_key from apm_packages where package_id = :package_id)
	$section_where_clause
      
} 
 ------------ 

    select p.parameter_name,
           coalesce(p.description, 'No Description') as description,
           v.attr_value,
           coalesce(p.section_name, '') as section_name
    from   apm_parameters p left outer join
           (select v.parameter_id,
                   v.attr_value
            from apm_parameter_values v
            where v.package_id = :package_id
           ) v on p.parameter_id = v.parameter_id
    where  p.package_key = (select package_key from apm_packages where package_id = :package_id)
	$section_where_clause
    order  by section_name, parameter_name

       
FILES: TCL(c:/temp/openacs5/packages/acs-automated-testing/www/admin/testcase.tcl) XML(c:/temp/openacs5/packages/acs-automated-testing/www/admin/testcase-postgresql.xql)FILES: TCL(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/rel-type-add-2.tcl) XML(c:/temp/openacs5/packages/acs-subsite/www/admin/group-types/rel-type-add-2-postgresql.xql)b(types_match_p):[db_string]
 {
	    select count(*)
	      from acs_rel_types t
	     where (t.object_type_one = :group_type 
                    or acs_object_type.is_subtype_p(t.object_type_one, :group_type) = 't')
               and t.rel_type = :rel_type
	} 
 ------------ 
      
	    select count(*)
	      from acs_rel_types t
	     where (t.object_type_one = :group_type 
                    or acs_object_type__is_subtype_p(t.object_type_one, :group_type) = 't')
               and t.rel_type = :rel_type
	
       
FILES: TCL(c:/temp/openacs5/packages/acs-authentication/tcl/test/acs-authentication-procs.tcl) XML(c:/temp/openacs5/packages/acs-authentication/tcl/test/acs-authentication-procs-postgresql.xql)b(select_user_id):[db_string]
 {} 
 ------------ 
            select user_id
            from users
            where acs_permission__permission_p(:context_root_id, user_id, 'admin') = 't'
            limit 1  
         
b(select_vars):[db_1row]
 {

            select user_id
            from users
            where acs_permission__permission_p(:context_root_id, user_id, 'admin') = 't'
            limit 1  
        
} 
 ------------ 
            select u.user_id,
                   aa.authority_id,
                   u.username 
            from users u,
                       auth_authorities aa
            where u.authority_id = aa.authority_id
            and aa.short_name = 'local'
            limit 1
         
FILES: TCL(c:/temp/openacs5/packages/acs-authentication/tcl/authority-procs.tcl) XML(c:/temp/openacs5/packages/acs-authentication/tcl/authority-procs-postgresql.xql)b(delete_authority):[db_exec_plsql]
 {

          select authority_id 
          from   auth_authorities 
          where  short_name = :short_name 
      
} 
 ------------ 
            select authority__del(
                :authority_id
            );
         
b(create_authority):[db_exec_plsql]
 {

            select authority__del(
                :authority_id
            );
        
} 
 ------------ 
            select authority__new(
                :authority_id,
                null, -- object_type
                :short_name,
                :pretty_name,
                :enabled_p,
                :sort_order,
                :auth_impl_id,
                :pwd_impl_id,
                :forgotten_pwd_url,
                :change_pwd_url,
                :register_impl_id,
                :register_url,
                :help_contact_text,
                :creation_user,
                :creation_ip,
                :context_id
            );                    
         
FILES: TCL(c:/temp/openacs5/packages/acs-tcl/tcl/apm-install-procs.tcl) XML(c:/temp/openacs5/packages/acs-tcl/tcl/apm-install-procs-postgresql.xql)b(select_sortable_versions):[db_1row]
 {

      
	    update apm_package_types
		set spec_file_path = :path
	        where package_key = :package_key
	
      
} 
 ------------ 
      
	    select apm_package_version__sortable_version_name(:version_name_1) as sortable_version_1,
                   apm_package_version__sortable_version_name(:version_name_2) as sortable_version_2
            from   dual

       
b(test_f2):[db_exec_plsql]
 {

      
	    select apm_package_version__sortable_version_name(:version_name_1) as sortable_version_1,
                   apm_package_version__sortable_version_name(:version_name_2) as sortable_version_2
            from   dual

      
} 
 ------------ 

	    select apm_package_version__sortable_version_name('$f2_version_from');
	
       
b(version_greater_p):[db_string]
 {


	    select apm_package_version__sortable_version_name('$f2_version_from');
	
      
} 
 ------------ 
        select apm_package_version__version_name_greater(:provided_version, :dependency_version)
       
b(apm_package_version_enable):[db_exec_plsql]
 {
	begin
	  apm_package_version.enable(
            version_id => :version_id
	  );
	end;
    } 
 ------------ 

	  select apm_package_version__enable(
            :version_id
	  );
    
       
b(version_mark_installed):[db_dml]
 {
            update apm_package_versions
            set    installed_p = decode(version_id, :version_id, 't', 'f')
            where  package_key = :package_key
        } 
 ------------ 

            update apm_package_versions
            set    installed_p = (version_id = :version_id)
            where  package_key = :package_key
        
       
b(apm_package_version_disable):[db_exec_plsql]
 {
	begin
	  apm_package_version.disable(
            version_id => :version_id
	  );
	end;
    } 
 ------------ 

	  select apm_package_version__disable(
            :version_id
	  );
    
       
b(test_f1):[db_exec_plsql]
 {

        select apm_package_version__version_name_greater(:provided_version, :dependency_version)
      
} 
 ------------ 

	    select apm_package_version__sortable_version_name('$f1_version_from');
	
       
b(service_register):[db_exec_plsql]
 {


	    select apm_package_version__sortable_version_name('$f1_version_from');
	
      
} 
 ------------ 

	    select apm__register_service (
			:package_key,
			:pretty_name,
			:pretty_plural,
			:package_uri,
			:initial_install_p,
			:singleton_p,
			:spec_file_path,
			:spec_file_mtime
			);
	
       
b(apm_version_delete):[db_exec_plsql]
 {
	begin
	 apm_package_version.del(version_id => :version_id);	 
	end;
    } 
 ------------ 

	 select apm_package_version__delete(:version_id);	 
    
       
b(apm_dependency_check):[db_transaction]
 {


	    select apm__register_service (
			:package_key,
			:pretty_name,
			:pretty_plural,
			:package_uri,
			:initial_install_p,
			:singleton_p,
			:spec_file_path,
			:spec_file_mtime
			);
	
      
} 
 ------------ 
      
	select apm_package_version__version_name_greater(service_version, :dependency_version) as version_p
	from apm_package_dependencies d, apm_package_types a, apm_package_versions v
	where d.dependency_type = 'provides'
	and d.version_id = v.version_id
	and d.service_uri = :dependency_uri
	and v.installed_p = 't'
	and a.package_key = v.package_key
    
       
b(apm_version_upgrade):[db_exec_plsql]
 {
	begin
	    apm_package_version.upgrade(version_id => :version_id);
	end;

    } 
 ------------ 

	    select apm_package_version__upgrade(:version_id);
    
       
b(version_insert):[db_exec_plsql]
 {

      
	select apm_package_version__version_name_greater(service_version, :dependency_version) as version_p
	from apm_package_dependencies d, apm_package_types a, apm_package_versions v
	where d.dependency_type = 'provides'
	and d.version_id = v.version_id
	and d.service_uri = :dependency_uri
	and v.installed_p = 't'
	and a.package_key = v.package_key
    
      
} 
 ------------ 
		select apm_package_version__new(
			:version_id,
			:package_key,
			:version_name,
			:version_uri,
			:summary,
			:description_format,
			:description,
			:release_date,
			:vendor,
			:vendor_uri,
                        :auto_mount,
			't',
			't'
	              );
       
b(apm_package_upgrade_from):[db_string]
 {
        select version_name 
        from   apm_package_versions
        where  package_key = :package_key
        and    version_id = apm_package.highest_version(:package_key)
        and    version_name != :version_name
    } 
 ------------ 
      
	    select version_name from apm_package_versions
	    where package_key = :package_key
	    and version_id = apm_package__highest_version(:package_key)
	
       
b(apm_upgrade_for_version_p):[db_exec_plsql]
 {
	begin
	    :1 := apm_package_version.upgrade_p(
	              path => :path,
	              initial_version_name => :initial_version_name,
	              final_version_name => :final_version_name
	          );
	end;
    } 
 ------------ 

	    select apm_package_version__upgrade_p(
	              :path,
	              :initial_version_name,
	              :final_version_name
	          );
    
       
b(application_register):[db_exec_plsql]
 {

		select apm_package_version__new(
			:version_id,
			:package_key,
			:version_name,
			:version_uri,
			:summary,
			:description_format,
			:description,
			:release_date,
			:vendor,
			:vendor_uri,
                        :auto_mount,
			't',
			't'
	              );
      
} 
 ------------ 

	    select apm__register_application (
		        :package_key,
			:pretty_name,
			:pretty_plural,
			:package_uri,
			:initial_install_p,
			:singleton_p,
			:spec_file_path,
			:spec_file_mtime
          		);
	
       
b(apm_package_upgrade_p):[db_string]
 {
	select apm_package_version.version_name_greater(:version_name, version_name) upgrade_p
	from apm_package_versions
	where package_key = :package_key
	and version_id = apm_package.highest_version (:package_key)
    } 
 ------------ 
      
	select apm_package_version__version_name_greater(:version_name, version_name) as upgrade_p
	from apm_package_versions
	where package_key = :package_key
	and version_id = apm_package__highest_version (:package_key)
    
       
b(apm_version_update):[db_exec_plsql]
 {


	    select apm__register_application (
		        :package_key,
			:pretty_name,
			:pretty_plural,
			:package_uri,
			:initial_install_p,
			:singleton_p,
			:spec_file_path,
			:spec_file_mtime
          		);
	
      
} 
 ------------ 

	select apm_package_version__edit(
                                 null,
				 :version_id, 
				 :version_name, 
				 :version_uri,
				 :summary,
				 :description_format,
				 :description,
				 :release_date,
				 :vendor,
				 :vendor_uri,
                                 :auto_mount,
				 't',
				 't'				 
				 );
    
       
b(apm_package_delete):[db_exec_plsql]
 {
	begin
	    apm_package_type.drop_type(
	        package_key => :package_key,
	        cascade_p => 't'
            );
	end;
    } 
 ------------ 

	    select apm_package_type__drop_type(
	        :package_key,
	        't'
            );
    
       
