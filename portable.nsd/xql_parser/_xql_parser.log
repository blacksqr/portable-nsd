

d:\projects\ms_oacs\xql_parser>

d:\projects\ms_oacs\xql_parser>perl xparse.pl 
perl xparse.pl 
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/security-procs.tcl####################
b(get_token):[db_string]
 {select token from secret_tokens
                       	                 where token_id = :token_id} 
 ------------ 
      select token from secret_tokens
                       	                 where token_id = :token_id
       
b(update_last_hit_dml):[db_dml]
 {
        update sec_session_properties
           set last_hit = :new_last_hit
         where session_id = :id and
               property_name = :name
    } 
 ------------ 
	update sec_session_properties
	   set last_hit = :new_last_hit
	 where session_id = :id and
               property_name = :name
       
q(prop_insert_dml):[db_dml]
 "" 
 ------------ 
	insert into sec_session_properties
	  (session_id, module, property_name, secure_p, last_hit)
	select :session_id, :module, :name, :secure, :last_hit
        from dual
        where not exists (select 1
                          from sec_session_properties
                          where session_id = :session_id and
                          module = :module and
                          property_name = :name)
       
b(property_lookup_sec):[db_0or1row]
 {
	    select property_value, secure_p
	    from sec_session_properties
	    where session_id = :id
	    and module = :module
	    and property_name = :name
	} 
 ------------ 
      
	    select property_value, secure_p
	    from sec_session_properties
	    where session_id = :id
	    and module = :module
	    and property_name = :name
	
       
q(password_update):[db_dml]
 "update users set password = :new_password, salt = :salt where user_id = :user_id" 
 ------------ 
      update users set password = :new_password, salt = :salt where user_id = :user_id
       
b(password_select):[db_0or1row]
 {select password, salt from users where user_id = :user_id} 
 ------------ 
      select password, salt from users where user_id = :user_id
       
b(sessions_sweep):[db_dml]
 {
	delete from sec_session_properties
	where  :current_time - last_hit > :property_life
    } 
 ------------ 
      
	delete from sec_session_properties
	where  :current_time - last_hit > :property_life
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/user-extensions-procs.tcl####################
b(select_extensions):[db_list]
 {} 
 ------------ 
select impl_name from acs_sc_impls, acs_sc_bindings, acs_sc_contracts
where
acs_sc_impls.impl_id = acs_sc_bindings.impl_id and
acs_sc_contracts.contract_id= acs_sc_bindings.contract_id and 
acs_sc_contracts.contract_name='UserData'
 
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-xml-procs.tcl####################
b(supported_databases):[db_foreach]
 {
        select unique db_type
        from apm_package_files
        where db_type is not null
    } 
 ------------ 
      
        select distinct db_type
        from apm_package_files
        where db_type is not null
    
       
q(version_path):[db_foreach]
 "select path, file_type, db_type from apm_package_files where version_id = :version_id order by path" 
 ------------ 
      select path, file_type, db_type from apm_package_files where version_id = :version_id order by path
       
b(owner_info):[db_foreach]
 {
        select owner_uri, owner_name
        from   apm_package_owners
        where  version_id = :version_id
        order by sort_key
    } 
 ------------ 
      
        select owner_uri, owner_name
        from   apm_package_owners
        where  version_id = :version_id
        order by sort_key
    
       
b(parameter_info):[db_foreach]
 {
	select parameter_name, description, datatype, section_name, default_value, min_n_values, max_n_values
	  from apm_parameters
	 where package_key = :package_key
    } 
 ------------ 
      
	select parameter_name, description, datatype, section_name, default_value, min_n_values, max_n_values
	  from apm_parameters
	 where package_key = :package_Use of uninitialized value in concatenation (.) or string at xparse.pl line 127.
Use of uninitialized value in concatenation (.) or string at xparse.pl line 127.
key
    
       
b(dependency_info):[db_foreach]
 {
        select dependency_type, service_uri, service_version
        from   apm_package_dependencies
        where  version_id = :version_id
        order by dependency_type, service_uri
    } 
 ------------ 
      
        select dependency_type, service_uri, service_version
        from   apm_package_dependencies
        where  version_id = :version_id
        order by dependency_type, service_uri
    
       
b(package_version_select):[db_1row]
 {
        select t.package_key, t.package_uri, t.pretty_name, t.pretty_plural, t.package_type,
	t.initial_install_p, t.singleton_p, v.*
        from   apm_package_versions v, apm_package_types t
        where  v.version_id = :version_id
        and    v.package_key = t.package_key
    } 
 ------------ 
      
        select t.package_key, t.package_uri, t.pretty_name, t.pretty_plural, t.package_type,
	t.initial_install_p, t.singleton_p, v.*
        from   apm_package_versions v, apm_package_types t
        where  v.version_id = :version_id
        and    v.package_key = t.package_key
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-bootstrap-installer/installer/create-administrator-2.tcl####################
b(grant_admin):[db_exec_plsql]
 {
      begin
        acs_permission.grant_permission (
          object_id => acs.magic_object_id('security_context_root'),
          grantee_id => :user_id,
          privilege => 'admin'
        );
      end;
    } 
 ------------ 
select acs_permission__grant_permission(
	acs__magic_object_id('security_context_root'), 
	:user_id, 
	'admin')
 
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/acs-permissions-procs.tcl####################
b(n_privs):[db_string]
 {
      select count(*)
        from acs_privileges
       where privilege = :privilege
  } 
 ------------ 
      
      select count(*)
        from acs_privileges
       where privilege = :privilege
  
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-service-contract/www/binding-install.tcl####################
q(binding_install):[db_exec_plsql]
 "select acs_sc_binding__new($contract_id,$impl_id)" 
 ------------ 
         select acs_sc_binding__new(cast(:contract_id as integer), cast(:impl_id as integer))
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/request-processor-init.tcl####################
b(acs_kernel_id_get):[db_string]
 {
        select package_id from apm_packages
        where package_key = 'acs-kernel'
    } 
 ------------ 
      
	select package_id from apm_packages
	where package_key = 'acs-admin'
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/navigation-procs.tcl####################
b(context):[]
 {
    select site_node.url(node_id) as url, object_id,
           acs_object.name(object_id) as object_name,
           level
    from site_nodes
    start with node_id = :node_id
    connect by prior parent_id = node_id
    order by level asc
  } 
 ------------ 
      
    select site_node__url(n2.node_id) as url, n2.object_id,
           acs_object__name(n2.object_id) as object_name,
           tree_level(n2.tree_sortkey) as level
    from (select tree_ancestor_keys(site_node_get_tree_sortkey(:node_id)) as tree_sortkey) parents,
        site_nodes n2
    where n2.tree_sortkey = parents.tree_sortkey
 order by level asc
  
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/acs-kernel-procs.tcl####################
b(admin_exists_p):[]
 {
	select 1 as admin_exists_p
	from dual
	where exists (select 1
		      from acs_object_party_privilege_map m, users u
		      where m.object_id = 0
		      and m.party_id = u.user_id
		      and m.privilege = 'admin')
    } 
 ------------ 
      
	select 1 as admin_exists_p
	from dual
	where exists (select 1
		      from all_object_party_privilege_map m, users u
		      where m.object_id = 0
		      and m.party_id = u.user_id
		      and m.privilege = 'admin')
    
       
b(acs_admin_node_p):[db_string]
 {
	select case when count(object_id) = 0 then 0 else 1 end
	from site_nodes
	where object_id = (select package_id 
	                   from apm_packages 
	                   where package_key = 'acs-admin')
    } 
 ------------ 
      
	select case when count(object_id) = 0 then 0 else 1 end
	from site_nodes
	where object_id = (select package_id 
	                   from apm_packages 
	                   where package_key = 'acs-admin')
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/object-procs.tcl####################
b(object_type_select):[db_string]
 {
        select object_type
        from acs_objects
        where object_id = :object_id
    } 
 ------------ 
      
        select object_type
        from acs_objects
        where object_id = :object_id
    
       
b(magic_object_select):[db_string]
 {
	select object_id from acs_magic_objects where name = :name
    } 
 ------------ 
      
	select object_id from acs_magic_objects where name = :name
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-service-contract/www/binding-uninstall.tcl####################
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/community-core-procs.tcl####################
b(user_select):[db_string]
 {
        select user_id from cc_users where email = lower(:email)
    } 
 ------------ 
      
	select user_id from cc_users where upper(screen_name) = upper(:screen_name)
    
       
b(email_from_party):[db_string]
 {
        select email from parties where party_id = :party_id
    } 
 ------------ 
      
	select email from parties where party_id = :party_id
    
       
b(group_select):[db_string]
 {
        select group_id from groups where group_name = :name
    } 
 ------------ 
      
	select group_id from groups where group_name = :name
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-service-contract/www/index.tcl####################
q(invalid_uninstalled_binding):[db_multirow]
 "" 
 ------------ 
      select contract_id, contract_name, impl_name,impl_id 
      from invalid_uninstalled_bindings
    
b(valid_uninstalled_binding):[db_multirow]
 {

      select contract_id, contract_name, impl_name,impl_id 
      from invalid_uninstalled_bindings
   
} 
 ------------ 
     select contract_id, contract_name, impl_name,impl_id 
     from valid_uninstalled_bindings
    
b(orphan_implementation):[db_multirow]
 {

     select contract_id, contract_name, impl_name,impl_id 
     from valid_uninstalled_bindings
   
} 
 ------------ 
      select impl_id, impl_name, impl_contract_name  
      from orphan_implementations
    
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/admin-procs.tcl####################
q(sql_post_select_for_user_class):[db_string]
 "
	    select sql_post_select
	    from user_classes where user_class_id = [ns_dbquotevalue $user_class_id]
	" 
 ------------ 
      
	    select sql_post_select
	    from user_classes 
            where user_class_id = [ns_dbquotevalue $user_class_id]
	
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-procs.tcl####################
b(apm_package_by_version_id):[db_1row]
 {
	    select pretty_name, version_name, package_key, installed_p, distribution_uri, tagged_p
	    from apm_package_version_info where version_id = :version_id
	} 
 ------------ 
      
	    select pretty_name, version_name, package_key, installed_p, distribution_uri, tagged_p
	    from apm_package_version_info where version_id = :version_id
	
       
b(apm_package_registered_p):[db_string]
 {
	select 1 from apm_package_types 
	where package_key = :package_key
    } 
 ------------ 
      
	select 1 from apm_package_types 
	where package_key = :package_key
    
       
b(package_key_select):[db_1row]
 {
        select package_key
        from apm_package_version_info
        where version_id = :version_id
    } 
 ------------ 
      
        select package_key
        from apm_package_version_info
        where version_id = :version_id
    
       
q(pretty_name_select):[db_string]
 "
        select pretty_name
        from apm_package_file_types
        where file_type_key = :type
    " 
 ------------ 
      
        select pretty_name
        from apm_package_file_types
        where file_type_key = :type
    
       
b(file_info):[db_1]
 {
        select file_id, path
        from   apm_package_files
        where  version_id = :version_id
        and    file_type in ('tcl_procs', 'query_file')
        and    (db_type is null or db_type = '[db_type]')
        order by path
    } 
 ------------ 
      
        select file_id, path
        from   apm_package_files
        where  version_id = :version_id
        and    file_type in ('tcl_procs', 'query_file')
        and    (db_type is null or db_type = '[db_type]')
        order by path
    
       
b(parameter_update):[db_dml]
 {
       update apm_parameters 
	set parameter_name = :parameter_name,
            default_value  = :default_value,
            datatype       = :datatype, 
	    description	   = :description,
	    section_name   = :section_name,
            min_n_values   = :min_n_values,
            max_n_values   = :max_n_values
      where parameter_id = :parameter_id
    } 
 ------------ 
      
       update apm_parameters 
	set parameter_name = :parameter_name,
            default_value  = :default_value,
            datatype       = :datatype, 
	    description	   = :description,
	    section_name   = :section_name,
            min_n_values   = :min_n_values,
            max_n_values   = :max_n_values
      where parameter_id = :parameter_id
    
       
b(all_parameters_packages):[db_foreach]
 {
	select package_id, parameter_id, parameter_name 
	from apm_packages p, apm_parameters ap
	where p.package_key = ap.package_key
	and ap.parameter_id = :parameter_id

    } 
 ------------ 
      
	select package_id, parameter_id, parameter_name 
	from apm_packages p, apm_parameters ap
	where p.package_key = ap.package_key
	and ap.parameter_id = :parameter_id

    
       
b(apm_package_id_from_key):[db_string]
 {
	select package_id from apm_packages where package_key = :package_key
    } 
 ------------ 
      
	select package_id from apm_packages where package_key = :package_key
    
       
b(apm_package_installed_p):[db_string]
 {
	select 1 from apm_package_versions
	where package_key = :package_key
	and installed_p = 't'
    } 
 ------------ 
      
	select 1 from apm_package_versions
	where package_key = :package_key
	and installed_p = 't'
    
       
b(apm_version_installed_p):[db_string]
 {
	select 1 from apm_package_versions
	where version_id = :version_id
	and installed_p = 't'
    } 
 ------------ 
      
	select 1 from apm_package_versions
	where version_id = :version_id
	and installed_p = 't'
    
       
b(apm_package_key_from_id):[db_string]
 {
	select package_key from apm_packages where package_id = :package_id
    } 
 ------------ 
      
	select package_key from apm_packages where package_id = :package_id
    
       
b(apm_parameter_cache_update):[db_foreach]
 {
	select v.package_id, p.parameter_name, nvl(p.default_value, v.attr_value) as attr_value
	from apm_parameters p, apm_parameter_values v
	where p.package_key = :package_key
	and p.parameter_id = v.parameter_id (+)
    } 
 ------------ 

	select v.package_id, p.parameter_name, 
               coalesce(p.default_value, v.attr_value) as attr_value
	from apm_parameters p left outer join apm_parameter_values v
             using (parameter_id)
	where p.package_key = :package_key
    
       
b(apm_parameter_names_and_values):[db_list_of_lists]
 {
	select parameter_name, attr_value
	from apm_parameters p, apm_parameter_values v, apm_packages a
	where p.parameter_id = v.parameter_id
	and a.package_id = v.package_id
	and a.package_id = :package_id
    } 
 ------------ 
      
	select parameter_name, attr_value
	from apm_parameters p, apm_parameter_values v, apm_packages a
	where p.parameter_id = v.parameter_id
	and a.package_id = v.package_id
	and a.package_id = :package_id
    
       
b(apm_package_version_installed_p):[db_string]
 {
	select decode(count(*), 0, 0, 1) from apm_package_versions
	where version_id = :version_id
	and enabled_p = 't'
    } 
 ------------ 

	select case when count(*) = 0 then 0 else 1 end from apm_package_versions
	where version_id = :version_id
	and enabled_p = 't'
       
b(get_names):[db_list]
 {
	select parameter_name from apm_parameters
	where package_key = :package_key
    } 
 ------------ 
      
	select parameter_name from apm_parameters
	where package_key = :package_key
    
       
q(pretty_db_name_select):[db_string]
 "
        select pretty_db_name
        from apm_package_db_types
        where db_type_key = :db_type
    " 
 ------------ 
      
        select pretty_db_name
        from apm_package_db_types
        where db_type_key = :db_type
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/admin-init.tcl####################
b(path_select):[db_foreach]
 {
	select package_id, site_node.url(node_id) as url from apm_packages p, site_nodes n
	where p.package_id = n.object_id
    } 
 ------------ 
      
	select package_id, site_node__url(node_id) as url from apm_packages p, site_nodes n
	where p.package_id = n.object_id
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/security-init.tcl####################
q(secret_tokens_exists):[db_string]
 "select decode(count(*),0,0,1) from secret_tokens" 
 ------------ 

      select case when count(*) = 0 then 0 else 1 end from secret_tokens

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-bootstrap-installer/installer/create-administrator.tcl####################
q(user_exists):[db_0or1row]
 "select email from cc_users where rownum = 1" 
 ------------ 
select email from cc_users limit 1
 
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-install-procs.tcl####################
b(all_dependencies_for_version):[db_foreach]
 {
	select dependency_id from apm_package_dependencies
	where version_id = :version_id
    } 
 ------------ 
      
	select dependency_id from apm_package_dependencies
	where version_id = :version_id
    
       
b(all_parameters_for_package_key):[db_foreach]
 {
	select parameter_id, parameter_name
	from apm_parameters
	where package_key =:package_key
    } 
 ------------ 
      
	select parameter_id, parameter_name
	from apm_parameters
	where package_key =:package_key
    
       
b(apm_spec_file_register):[db_dml]
 {
	    update apm_package_types
		set spec_file_path = :path
	        where package_key = :package_key
	} 
 ------------ 
      
	    update apm_package_types
		set spec_file_path = :path
	        where package_key = :package_key
	
       
b(package_spec_path_select):[db_0or1row]
 {
            select path
            from apm_package_files
            where version_id = :version_id
            and file_type = 'package_spec'
	    and path = :info_file_name
        } 
 ------------ 
      
            select path
            from apm_package_files
            where version_id = :version_id
            and file_type = 'package_spec'
	    and path = :info_file_name
        
       
b(package_version_info_select):[db_1row]
 {
	select package_key, version_id
	from apm_package_version_info 
	where version_id = :version_id
    } 
 ------------ 
      
	select package_key, version_id
	from apm_package_version_info 
	where version_id = :version_id
    
       
b(owner_insert):[db_dml]
 {
	    insert into apm_package_owners(version_id, owner_uri, owner_name, sort_key)
	    values(:version_id, :owner_uri, :owner_name, :counter)
	} 
 ------------ 
      
	    insert into apm_package_owners(version_id, owner_uri, owner_name, sort_key)
	    values(:version_id, :owner_uri, :owner_name, :counter)
	
       
b(parameter_id_get):[db_0or1row]
 {
	    select parameter_id from apm_parameters
	    where parameter_name = :parameter_name
	    and package_key = :package_key
	} 
 ------------ 
      
	    select parameter_id from apm_parameters
	    where parameter_name = :parameter_name
	    and package_key = :package_key
	
       
b(files_delete):[db_dml]
 {
	delete from apm_package_files where version_id = :version_id
    } 
 ------------ 
      
	delete from apm_package_files where version_id = :version_id
    
       
b(apm_uninstall_record):[db_dml]
 {
	update apm_package_versions
	set    installed_p = 'f', enabled_p = 'f'
	where package_key = :package_key
    } 
 ------------ 
      
	update apm_package_versions
	set    installed_p = 'f', enabled_p = 'f'
	where package_key = :package_key
    
       
b(apm_delete_owners):[db_dml]
 {
	delete from apm_package_owners where version_id = :version_id
    } 
 ------------ 
      
	delete from apm_package_owners where version_id = :version_id
    
       
b(apm_package_version_count):[db_string]
 {
	select count(*) from apm_package_versions
	where package_key = :package_key
    } 
 ------------ 
      
	select count(*) from apm_package_versions
	where package_key = :package_key
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/deprecated-utilities-procs.tcl####################
q(nmc_getnewidnumber):[db_string]
 "select unique :id_name from id_numbers" 
 ------------ 
      select unique :id_name from id_numbers
       
q(id_number_update):[db_dml]
 "update id_numbers set :id_name = :id_name + 1" 
 ------------ 
      update id_numbers set :id_name = :id_name + 1
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/object-type-procs.tcl####################
q(object_types):[db_foreach]
 "$sql" 
 ------------ 
        $sql
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/request-processor-procs.tcl####################
b(acs_kernel_id_get):[db_string]
 {
	select package_id from apm_packages
	where package_key = 'acs-kernel'
    } 
 ------------ 
      
	select package_id from apm_packages
	where package_key = 'acs-kernel'
    
       
b(acs_admin_id_get):[db_string]
 {
        select package_id from apm_packages
        where package_key = 'acs-admin'
    } 
 ------------ 
      
        select package_id from apm_packages
        where package_key = 'acs-admin'
    
       
b(node_id):[db_1]
 {
	select node_id 
	from host_node_map
	where host = :host
    } 
 ------------ 

        select node_id 
	from host_node_map
	where host = :host

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/site-nodes-procs.tcl####################
b(unmount):[db_dml]
 {
	update site_nodes
	   set object_id = null
	 where node_id = :node_id
    } 
 ------------ 
      
	update site_nodes
	   set object_id = null
	 where node_id = :node_id
    
       
b(update_site_nodes):[db_dml]
 {
	update site_nodes
	   set object_id = :package_id
	 where node_id = :node_id
    } 
 ------------ 
      
	update site_nodes
	   set object_id = :package_id
	 where node_id = :node_id
    
       
b(get_context):[db_0or1row]
 {
        select object_id as context_id
          from site_nodes 
         where node_id = :parent_node_id
    } 
 ------------ 
      
        select object_id as context_id
          from site_nodes 
         where node_id = :parent_node_id
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-file-procs.tcl####################
q(db_type_keys):[db_list]
 "select db_type_key from apm_package_db_types" 
 ------------ 
      select db_type_key from apm_package_db_types
       
b(apm_all_files):[db_foreach]
 {
	select f.file_id, f.path
	from   apm_package_files f
	where  f.version_id = :version_id
	order by path
    } 
 ------------ 
      
	select f.file_id, f.path
	from   apm_package_files f
	where  f.version_id = :version_id
	order by path
    
       
b(apm_version_id_from_file):[db_string]
 {
	select version_id from apm_package_files
	where file_id = :file_id
    } 
 ------------ 
      
	select version_id from apm_package_files
	where file_id = :file_id
    
       
q(set_item_id):[db_dml]
 "update apm_package_versions 
                               set item_id = :item_id 
                             where version_id = :version_id" 
 ------------ 

        update apm_package_versions 
        set item_id = :item_id 
        where version_id = :version_id

       
b(item_exists_p):[db_1row]
 {select case when item_id is null 
                                    then 0 
                                    else item_id 
                                  end as item_id
                             from apm_package_versions 
                            where version_id = :version_id} 
 ------------ 

        select case when item_id is null then 0 else item_id end as item_id
          from apm_package_versions 
         where version_id = :version_id

       
q(get_revision_id):[db_0or1row]
 "select live_revision as revision_id
              from cr_items
             where item_id = :item_id" 
 ------------ 

        select live_revision as revision_id
          from cr_items
         where item_id = :item_id

       
b(package_key_select):[db_1row]
 {
                                select package_key 
                                  from apm_package_version_info 
                                 where version_id = :version_id
                               } 
 ------------ 
      select package_key from apm_package_version_info where version_id = :version_id
       
b(package_key_for_version_id):[db_string]
 {
	select package_key from apm_package_versions 
	where version_id = :version_id
    } 
 ------------ 
      
	select package_key from apm_package_versions 
	where version_id = :version_id
    
       
q(path_select):[db_list]
 "
        select path from apm_package_files
        where  version_id = :version_id
        $type_sql $db_type_sql order by path
    " 
 ------------ 
      
        select path from apm_package_files
        where  version_id = :version_id
        $type_sql $db_type_sql order by path
    
       
q(file_type_keys):[db_list]
 "select file_type_key from apm_package_file_types" 
 ------------ 
      select file_type_key from apm_package_file_types
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/widgets-procs.tcl####################
b(currency_info):[db_foreach]
 {
	select currency_name, iso 
	from currency_codes 
	where supported_p='t'
	order by currency_name 
    } 
 ------------ 
      
	select currency_name, iso 
	from currency_codes 
	where supported_p='t'
	order by currency_name 
    
       
b(all_countries):[db_foreach]
 {
	select default_name, iso from countries order by default_name 
    } 
 ------------ 
      
	select default_name, iso from countries order by default_name 
    
       
b(all_states):[db_foreach]
 {
	select state_name, abbrev from us_states order by state_name
    } 
 ------------ 
      
	select state_name, abbrev from states order by state_name
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/defs-procs.tcl####################
b(parameters_get_all):[db_foreach]
 {
	select v.package_id, p.parameter_name, v.attr_value
	from apm_parameters p, apm_parameter_values v
	where p.parameter_id = v.parameter_id
    } 
 ------------ 
      
	select v.package_id, p.parameter_name, v.attr_value
	from apm_parameters p, apm_parameter_values v
	where p.parameter_id = v.parameter_id
    
       
b(user_name_select):[db_1row]
 {
		select first_names, last_name, email
		from persons, parties
		where person_id = :user_id
		and person_id = party_id
	    } 
 ------------ 
      
		select first_names, last_name, email
		from persons, parties
		where person_id = :user_id
		and person_id = party_id
	    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/utilities-procs.tcl####################
b(zip_code_exists):[db_0or1row]
 {
		    select 1
		      from dual
		     where exists (select 1
				     from zip_codes
				    where zip_code like :zip_5)
		} 
 ------------ 
		    select 1
		      from dual
		     where exists (select 1
				     from zip_codes
				    where zip_code like :zip_5)
       
q(double_click_check):[db_0or1row]
 "
		
		select 1 as one
		from $table_name
		where $id_column_name = :generated_id
		
	    " 
 ------------ 
      
		
		select 1 as one
		from $table_name
		where $id_column_name = :generated_id
		
	    
       
b(email_unique_p):[db_string]
 {} 
 ------------ 
    select count(*)
    from dual
    where not exists (select 1
                      from parties
                      where email = lower(:email))
   
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-bootstrap-installer/installer/auto-install.tcl####################
b(main_site_id_select):[db_string]
 { 
    select package_id from apm_packages
    where instance_name = 'Main Site' 
} 
 ------------ 
	select package_id
	from apm_packages
	where instance_name = 'Main Site' 
 
q(db_types_exists):[db_string]
 "
	select case when count(*) = 0 then 0 else 1 end from apm_package_db_types" 
 ------------ 
	select case when count(*) = 0 then 0 else 1 end
	from apm_package_db_types
 
b(all_unmounted_package_key):[db_foreach]
 {
    select t.package_key 
    from apm_package_types t, apm_packages p
    where t.package_key = p.package_key(+) 
    and p.package_id is null
} 
 ------------ 
	select t.package_key
	from apm_package_types t
	    left join apm_packages p
	    using (package_key)
	where p.package_id is null
 
b(insert_apm_db_type):[db_dml]
 {
		insert into apm_package_db_types
		    (db_type_key, pretty_db_name)
		values
		    (:db_type, :db_pretty_name)
	    } 
 ------------ 
	insert into apm_package_db_types
		(db_type_key, pretty_db_name)
	values
		(:db_type, :db_pretty_name)
 

d:\projects\ms_oacs\xql_parser>perl xparse.pl 
perl xparse.pl 
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/security-procs.tcl####################
b(get_token):[db_string]
 {select token from secret_tokens
                       	                 where token_id = :token_id} 
 ------------ 
      select token from secret_tokens
                       	                 where token_id = :token_id
       
b(update_last_hit_dml):[db_dml]
 {
        update sec_session_properties
           set last_hit = :new_last_hit
         where session_id = :id and
               property_name = :name
    } 
 ------------ 
	update sec_session_properties
	   set last_hit = :new_last_hit
	 where session_id = :id and
               property_name = :name
       
q(prop_insert_dml):[db_dml]
 "" 
 ------------ 
	insert into sec_session_properties
	  (session_id, module, property_name, secure_p, last_hit)
	select :session_id, :module, :name, :secure, :last_hit
        from dual
        where not exists (select 1
                          from sec_session_properties
                          where session_id = :session_id and
                          module = :module and
                          property_name = :name)
       
b(property_lookup_sec):[db_0or1row]
 {
	    select property_value, secure_p
	    from sec_session_properties
	    where session_id = :id
	    and module = :module
	    and property_name = :name
	} 
 ------------ 
      
	    select property_value, secure_p
	    from sec_session_properties
	    where session_id = :id
	    and module = :module
	    and property_name = :name
	
       
q(password_update):[db_dml]
 "update users set password = :new_password, salt = :salt where user_id = :user_id" 
 ------------ 
      update users set password = :new_password, salt = :salt where user_id = :user_id
       
b(password_select):[db_0or1row]
 {select password, salt from users where user_id = :user_id} 
 ------------ 
      select password, salt from users where user_id = :user_id
       
b(sessions_sweep):[db_dml]
 {
	delete from sec_session_properties
	where  :current_time - last_hit > :property_life
    } 
 ------------ 
      
	delete from sec_session_properties
	where  :current_time - last_hit > :property_life
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/user-extensions-procs.tcl####################
b(select_extensions):[db_list]
 {} 
 ------------ 
select impl_name from acs_sc_impls, acs_sc_bindings, acs_sc_contracts
where
acs_sc_impls.impl_id = acs_sc_bindings.impl_id and
acs_sc_contracts.contract_id= acs_sc_bindings.contract_id and 
acs_sc_contracts.contract_name='UserData'
 
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-xml-procs.tcl####################
b(supported_databases):[db_foreach]
 {
        select unique db_type
        from apm_package_files
        where db_type is not null
    } 
 ------------ 
      
        select distinct db_type
        from apm_package_files
        where db_type is not null
    
       
q(version_path):[db_foreach]
 "select path, file_type, db_type from apm_package_files where version_id = :version_id order by path" 
 ------------ 
      select path, file_type, db_type from apm_package_files where version_id = :version_id order by path
       
b(owner_info):[db_foreach]
 {
        select owner_uri, owner_name
        from   apm_package_owners
        where  version_id = :version_id
        order by sort_key
    } 
 ------------ 
      
        select owner_uri, owner_name
        from   apm_package_owners
        where  version_id = :version_id
        order by sort_key
    
       
b(parameter_info):[db_foreach]
 {
	select parameter_name, description, datatype, section_name, default_value, min_n_values, max_n_values
	  from apm_parameters
	 where package_key = :package_key
    } 
 ------------ 
      
	select parameter_name, description, datatype, section_name, default_value, min_n_values, max_n_values
	  from apm_parameters
	 where package_key = :package_Use of uninitialized value in concatenation (.) or string at xparse.pl line 127.
Use of uninitialized value in concatenation (.) or string at xparse.pl line 127.
key
    
       
b(dependency_info):[db_foreach]
 {
        select dependency_type, service_uri, service_version
        from   apm_package_dependencies
        where  version_id = :version_id
        order by dependency_type, service_uri
    } 
 ------------ 
      
        select dependency_type, service_uri, service_version
        from   apm_package_dependencies
        where  version_id = :version_id
        order by dependency_type, service_uri
    
       
b(package_version_select):[db_1row]
 {
        select t.package_key, t.package_uri, t.pretty_name, t.pretty_plural, t.package_type,
	t.initial_install_p, t.singleton_p, v.*
        from   apm_package_versions v, apm_package_types t
        where  v.version_id = :version_id
        and    v.package_key = t.package_key
    } 
 ------------ 
      
        select t.package_key, t.package_uri, t.pretty_name, t.pretty_plural, t.package_type,
	t.initial_install_p, t.singleton_p, v.*
        from   apm_package_versions v, apm_package_types t
        where  v.version_id = :version_id
        and    v.package_key = t.package_key
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-bootstrap-installer/installer/create-administrator-2.tcl####################
b(grant_admin):[db_exec_plsql]
 {
      begin
        acs_permission.grant_permission (
          object_id => acs.magic_object_id('security_context_root'),
          grantee_id => :user_id,
          privilege => 'admin'
        );
      end;
    } 
 ------------ 
select acs_permission__grant_permission(
	acs__magic_object_id('security_context_root'), 
	:user_id, 
	'admin')
 
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/acs-permissions-procs.tcl####################
b(n_privs):[db_string]
 {
      select count(*)
        from acs_privileges
       where privilege = :privilege
  } 
 ------------ 
      
      select count(*)
        from acs_privileges
       where privilege = :privilege
  
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-service-contract/www/binding-install.tcl####################
q(binding_install):[db_exec_plsql]
 "select acs_sc_binding__new($contract_id,$impl_id)" 
 ------------ 
         select acs_sc_binding__new(cast(:contract_id as integer), cast(:impl_id as integer))
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/request-processor-init.tcl####################
b(acs_kernel_id_get):[db_string]
 {
        select package_id from apm_packages
        where package_key = 'acs-kernel'
    } 
 ------------ 
      
	select package_id from apm_packages
	where package_key = 'acs-admin'
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/navigation-procs.tcl####################
b(context):[]
 {
    select site_node.url(node_id) as url, object_id,
           acs_object.name(object_id) as object_name,
           level
    from site_nodes
    start with node_id = :node_id
    connect by prior parent_id = node_id
    order by level asc
  } 
 ------------ 
      
    select site_node__url(n2.node_id) as url, n2.object_id,
           acs_object__name(n2.object_id) as object_name,
           tree_level(n2.tree_sortkey) as level
    from (select tree_ancestor_keys(site_node_get_tree_sortkey(:node_id)) as tree_sortkey) parents,
        site_nodes n2
    where n2.tree_sortkey = parents.tree_sortkey
 order by level asc
  
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/acs-kernel-procs.tcl####################
b(admin_exists_p):[]
 {
	select 1 as admin_exists_p
	from dual
	where exists (select 1
		      from acs_object_party_privilege_map m, users u
		      where m.object_id = 0
		      and m.party_id = u.user_id
		      and m.privilege = 'admin')
    } 
 ------------ 
      
	select 1 as admin_exists_p
	from dual
	where exists (select 1
		      from all_object_party_privilege_map m, users u
		      where m.object_id = 0
		      and m.party_id = u.user_id
		      and m.privilege = 'admin')
    
       
b(acs_admin_node_p):[db_string]
 {
	select case when count(object_id) = 0 then 0 else 1 end
	from site_nodes
	where object_id = (select package_id 
	                   from apm_packages 
	                   where package_key = 'acs-admin')
    } 
 ------------ 
      
	select case when count(object_id) = 0 then 0 else 1 end
	from site_nodes
	where object_id = (select package_id 
	                   from apm_packages 
	                   where package_key = 'acs-admin')
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/object-procs.tcl####################
b(object_type_select):[db_string]
 {
        select object_type
        from acs_objects
        where object_id = :object_id
    } 
 ------------ 
      
        select object_type
        from acs_objects
        where object_id = :object_id
    
       
b(magic_object_select):[db_string]
 {
	select object_id from acs_magic_objects where name = :name
    } 
 ------------ 
      
	select object_id from acs_magic_objects where name = :name
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-service-contract/www/binding-uninstall.tcl####################
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/community-core-procs.tcl####################
b(user_select):[db_string]
 {
        select user_id from cc_users where email = lower(:email)
    } 
 ------------ 
      
	select user_id from cc_users where upper(screen_name) = upper(:screen_name)
    
       
b(email_from_party):[db_string]
 {
        select email from parties where party_id = :party_id
    } 
 ------------ 
      
	select email from parties where party_id = :party_id
    
       
b(group_select):[db_string]
 {
        select group_id from groups where group_name = :name
    } 
 ------------ 
      
	select group_id from groups where group_name = :name
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-service-contract/www/index.tcl####################
q(invalid_uninstalled_binding):[db_multirow]
 "" 
 ------------ 
      select contract_id, contract_name, impl_name,impl_id 
      from invalid_uninstalled_bindings
    
b(valid_uninstalled_binding):[db_multirow]
 {

      select contract_id, contract_name, impl_name,impl_id 
      from invalid_uninstalled_bindings
   
} 
 ------------ 
     select contract_id, contract_name, impl_name,impl_id 
     from valid_uninstalled_bindings
    
b(orphan_implementation):[db_multirow]
 {

     select contract_id, contract_name, impl_name,impl_id 
     from valid_uninstalled_bindings
   
} 
 ------------ 
      select impl_id, impl_name, impl_contract_name  
      from orphan_implementations
    
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/admin-procs.tcl####################
q(sql_post_select_for_user_class):[db_string]
 "
	    select sql_post_select
	    from user_classes where user_class_id = [ns_dbquotevalue $user_class_id]
	" 
 ------------ 
      
	    select sql_post_select
	    from user_classes 
            where user_class_id = [ns_dbquotevalue $user_class_id]
	
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-procs.tcl####################
b(apm_package_by_version_id):[db_1row]
 {
	    select pretty_name, version_name, package_key, installed_p, distribution_uri, tagged_p
	    from apm_package_version_info where version_id = :version_id
	} 
 ------------ 
      
	    select pretty_name, version_name, package_key, installed_p, distribution_uri, tagged_p
	    from apm_package_version_info where version_id = :version_id
	
       
b(apm_package_registered_p):[db_string]
 {
	select 1 from apm_package_types 
	where package_key = :package_key
    } 
 ------------ 
      
	select 1 from apm_package_types 
	where package_key = :package_key
    
       
b(package_key_select):[db_1row]
 {
        select package_key
        from apm_package_version_info
        where version_id = :version_id
    } 
 ------------ 
      
        select package_key
        from apm_package_version_info
        where version_id = :version_id
    
       
q(pretty_name_select):[db_string]
 "
        select pretty_name
        from apm_package_file_types
        where file_type_key = :type
    " 
 ------------ 
      
        select pretty_name
        from apm_package_file_types
        where file_type_key = :type
    
       
b(file_info):[db_1]
 {
        select file_id, path
        from   apm_package_files
        where  version_id = :version_id
        and    file_type in ('tcl_procs', 'query_file')
        and    (db_type is null or db_type = '[db_type]')
        order by path
    } 
 ------------ 
      
        select file_id, path
        from   apm_package_files
        where  version_id = :version_id
        and    file_type in ('tcl_procs', 'query_file')
        and    (db_type is null or db_type = '[db_type]')
        order by path
    
       
b(parameter_update):[db_dml]
 {
       update apm_parameters 
	set parameter_name = :parameter_name,
            default_value  = :default_value,
            datatype       = :datatype, 
	    description	   = :description,
	    section_name   = :section_name,
            min_n_values   = :min_n_values,
            max_n_values   = :max_n_values
      where parameter_id = :parameter_id
    } 
 ------------ 
      
       update apm_parameters 
	set parameter_name = :parameter_name,
            default_value  = :default_value,
            datatype       = :datatype, 
	    description	   = :description,
	    section_name   = :section_name,
            min_n_values   = :min_n_values,
            max_n_values   = :max_n_values
      where parameter_id = :parameter_id
    
       
b(all_parameters_packages):[db_foreach]
 {
	select package_id, parameter_id, parameter_name 
	from apm_packages p, apm_parameters ap
	where p.package_key = ap.package_key
	and ap.parameter_id = :parameter_id

    } 
 ------------ 
      
	select package_id, parameter_id, parameter_name 
	from apm_packages p, apm_parameters ap
	where p.package_key = ap.package_key
	and ap.parameter_id = :parameter_id

    
       
b(apm_package_id_from_key):[db_string]
 {
	select package_id from apm_packages where package_key = :package_key
    } 
 ------------ 
      
	select package_id from apm_packages where package_key = :package_key
    
       
b(apm_package_installed_p):[db_string]
 {
	select 1 from apm_package_versions
	where package_key = :package_key
	and installed_p = 't'
    } 
 ------------ 
      
	select 1 from apm_package_versions
	where package_key = :package_key
	and installed_p = 't'
    
       
b(apm_version_installed_p):[db_string]
 {
	select 1 from apm_package_versions
	where version_id = :version_id
	and installed_p = 't'
    } 
 ------------ 
      
	select 1 from apm_package_versions
	where version_id = :version_id
	and installed_p = 't'
    
       
b(apm_package_key_from_id):[db_string]
 {
	select package_key from apm_packages where package_id = :package_id
    } 
 ------------ 
      
	select package_key from apm_packages where package_id = :package_id
    
       
b(apm_parameter_cache_update):[db_foreach]
 {
	select v.package_id, p.parameter_name, nvl(p.default_value, v.attr_value) as attr_value
	from apm_parameters p, apm_parameter_values v
	where p.package_key = :package_key
	and p.parameter_id = v.parameter_id (+)
    } 
 ------------ 

	select v.package_id, p.parameter_name, 
               coalesce(p.default_value, v.attr_value) as attr_value
	from apm_parameters p left outer join apm_parameter_values v
             using (parameter_id)
	where p.package_key = :package_key
    
       
b(apm_parameter_names_and_values):[db_list_of_lists]
 {
	select parameter_name, attr_value
	from apm_parameters p, apm_parameter_values v, apm_packages a
	where p.parameter_id = v.parameter_id
	and a.package_id = v.package_id
	and a.package_id = :package_id
    } 
 ------------ 
      
	select parameter_name, attr_value
	from apm_parameters p, apm_parameter_values v, apm_packages a
	where p.parameter_id = v.parameter_id
	and a.package_id = v.package_id
	and a.package_id = :package_id
    
       
b(apm_package_version_installed_p):[db_string]
 {
	select decode(count(*), 0, 0, 1) from apm_package_versions
	where version_id = :version_id
	and enabled_p = 't'
    } 
 ------------ 

	select case when count(*) = 0 then 0 else 1 end from apm_package_versions
	where version_id = :version_id
	and enabled_p = 't'
       
b(get_names):[db_list]
 {
	select parameter_name from apm_parameters
	where package_key = :package_key
    } 
 ------------ 
      
	select parameter_name from apm_parameters
	where package_key = :package_key
    
       
q(pretty_db_name_select):[db_string]
 "
        select pretty_db_name
        from apm_package_db_types
        where db_type_key = :db_type
    " 
 ------------ 
      
        select pretty_db_name
        from apm_package_db_types
        where db_type_key = :db_type
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/admin-init.tcl####################
b(path_select):[db_foreach]
 {
	select package_id, site_node.url(node_id) as url from apm_packages p, site_nodes n
	where p.package_id = n.object_id
    } 
 ------------ 
      
	select package_id, site_node__url(node_id) as url from apm_packages p, site_nodes n
	where p.package_id = n.object_id
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/security-init.tcl####################
q(secret_tokens_exists):[db_string]
 "select decode(count(*),0,0,1) from secret_tokens" 
 ------------ 

      select case when count(*) = 0 then 0 else 1 end from secret_tokens

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-bootstrap-installer/installer/create-administrator.tcl####################
q(user_exists):[db_0or1row]
 "select email from cc_users where rownum = 1" 
 ------------ 
select email from cc_users limit 1
 
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-install-procs.tcl####################
b(all_dependencies_for_version):[db_foreach]
 {
	select dependency_id from apm_package_dependencies
	where version_id = :version_id
    } 
 ------------ 
      
	select dependency_id from apm_package_dependencies
	where version_id = :version_id
    
       
b(all_parameters_for_package_key):[db_foreach]
 {
	select parameter_id, parameter_name
	from apm_parameters
	where package_key =:package_key
    } 
 ------------ 
      
	select parameter_id, parameter_name
	from apm_parameters
	where package_key =:package_key
    
       
b(apm_spec_file_register):[db_dml]
 {
	    update apm_package_types
		set spec_file_path = :path
	        where package_key = :package_key
	} 
 ------------ 
      
	    update apm_package_types
		set spec_file_path = :path
	        where package_key = :package_key
	
       
b(package_spec_path_select):[db_0or1row]
 {
            select path
            from apm_package_files
            where version_id = :version_id
            and file_type = 'package_spec'
	    and path = :info_file_name
        } 
 ------------ 
      
            select path
            from apm_package_files
            where version_id = :version_id
            and file_type = 'package_spec'
	    and path = :info_file_name
        
       
b(package_version_info_select):[db_1row]
 {
	select package_key, version_id
	from apm_package_version_info 
	where version_id = :version_id
    } 
 ------------ 
      
	select package_key, version_id
	from apm_package_version_info 
	where version_id = :version_id
    
       
b(owner_insert):[db_dml]
 {
	    insert into apm_package_owners(version_id, owner_uri, owner_name, sort_key)
	    values(:version_id, :owner_uri, :owner_name, :counter)
	} 
 ------------ 
      
	    insert into apm_package_owners(version_id, owner_uri, owner_name, sort_key)
	    values(:version_id, :owner_uri, :owner_name, :counter)
	
       
b(parameter_id_get):[db_0or1row]
 {
	    select parameter_id from apm_parameters
	    where parameter_name = :parameter_name
	    and package_key = :package_key
	} 
 ------------ 
      
	    select parameter_id from apm_parameters
	    where parameter_name = :parameter_name
	    and package_key = :package_key
	
       
b(files_delete):[db_dml]
 {
	delete from apm_package_files where version_id = :version_id
    } 
 ------------ 
      
	delete from apm_package_files where version_id = :version_id
    
       
b(apm_uninstall_record):[db_dml]
 {
	update apm_package_versions
	set    installed_p = 'f', enabled_p = 'f'
	where package_key = :package_key
    } 
 ------------ 
      
	update apm_package_versions
	set    installed_p = 'f', enabled_p = 'f'
	where package_key = :package_key
    
       
b(apm_delete_owners):[db_dml]
 {
	delete from apm_package_owners where version_id = :version_id
    } 
 ------------ 
      
	delete from apm_package_owners where version_id = :version_id
    
       
b(apm_package_version_count):[db_string]
 {
	select count(*) from apm_package_versions
	where package_key = :package_key
    } 
 ------------ 
      
	select count(*) from apm_package_versions
	where package_key = :package_key
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/deprecated-utilities-procs.tcl####################
q(nmc_getnewidnumber):[db_string]
 "select unique :id_name from id_numbers" 
 ------------ 
      select unique :id_name from id_numbers
       
q(id_number_update):[db_dml]
 "update id_numbers set :id_name = :id_name + 1" 
 ------------ 
      update id_numbers set :id_name = :id_name + 1
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/object-type-procs.tcl####################
q(object_types):[db_foreach]
 "$sql" 
 ------------ 
        $sql
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/request-processor-procs.tcl####################
b(acs_kernel_id_get):[db_string]
 {
	select package_id from apm_packages
	where package_key = 'acs-kernel'
    } 
 ------------ 
      
	select package_id from apm_packages
	where package_key = 'acs-kernel'
    
       
b(acs_admin_id_get):[db_string]
 {
        select package_id from apm_packages
        where package_key = 'acs-admin'
    } 
 ------------ 
      
        select package_id from apm_packages
        where package_key = 'acs-admin'
    
       
b(node_id):[db_1]
 {
	select node_id 
	from host_node_map
	where host = :host
    } 
 ------------ 

        select node_id 
	from host_node_map
	where host = :host

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/site-nodes-procs.tcl####################
b(unmount):[db_dml]
 {
	update site_nodes
	   set object_id = null
	 where node_id = :node_id
    } 
 ------------ 
      
	update site_nodes
	   set object_id = null
	 where node_id = :node_id
    
       
b(update_site_nodes):[db_dml]
 {
	update site_nodes
	   set object_id = :package_id
	 where node_id = :node_id
    } 
 ------------ 
      
	update site_nodes
	   set object_id = :package_id
	 where node_id = :node_id
    
       
b(get_context):[db_0or1row]
 {
        select object_id as context_id
          from site_nodes 
         where node_id = :parent_node_id
    } 
 ------------ 
      
        select object_id as context_id
          from site_nodes 
         where node_id = :parent_node_id
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-file-procs.tcl####################
q(db_type_keys):[db_list]
 "select db_type_key from apm_package_db_types" 
 ------------ 
      select db_type_key from apm_package_db_types
       
b(apm_all_files):[db_foreach]
 {
	select f.file_id, f.path
	from   apm_package_files f
	where  f.version_id = :version_id
	order by path
    } 
 ------------ 
      
	select f.file_id, f.path
	from   apm_package_files f
	where  f.version_id = :version_id
	order by path
    
       
b(apm_version_id_from_file):[db_string]
 {
	select version_id from apm_package_files
	where file_id = :file_id
    } 
 ------------ 
      
	select version_id from apm_package_files
	where file_id = :file_id
    
       
q(set_item_id):[db_dml]
 "update apm_package_versions 
                               set item_id = :item_id 
                             where version_id = :version_id" 
 ------------ 

        update apm_package_versions 
        set item_id = :item_id 
        where version_id = :version_id

       
b(item_exists_p):[db_1row]
 {select case when item_id is null 
                                    then 0 
                                    else item_id 
                                  end as item_id
                             from apm_package_versions 
                            where version_id = :version_id} 
 ------------ 

        select case when item_id is null then 0 else item_id end as item_id
          from apm_package_versions 
         where version_id = :version_id

       
q(get_revision_id):[db_0or1row]
 "select live_revision as revision_id
              from cr_items
             where item_id = :item_id" 
 ------------ 

        select live_revision as revision_id
          from cr_items
         where item_id = :item_id

       
b(package_key_select):[db_1row]
 {
                                select package_key 
                                  from apm_package_version_info 
                                 where version_id = :version_id
                               } 
 ------------ 
      select package_key from apm_package_version_info where version_id = :version_id
       
b(package_key_for_version_id):[db_string]
 {
	select package_key from apm_package_versions 
	where version_id = :version_id
    } 
 ------------ 
      
	select package_key from apm_package_versions 
	where version_id = :version_id
    
       
q(path_select):[db_list]
 "
        select path from apm_package_files
        where  version_id = :version_id
        $type_sql $db_type_sql order by path
    " 
 ------------ 
      
        select path from apm_package_files
        where  version_id = :version_id
        $type_sql $db_type_sql order by path
    
       
q(file_type_keys):[db_list]
 "select file_type_key from apm_package_file_types" 
 ------------ 
      select file_type_key from apm_package_file_types
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/widgets-procs.tcl####################
b(currency_info):[db_foreach]
 {
	select currency_name, iso 
	from currency_codes 
	where supported_p='t'
	order by currency_name 
    } 
 ------------ 
      
	select currency_name, iso 
	from currency_codes 
	where supported_p='t'
	order by currency_name 
    
       
b(all_countries):[db_foreach]
 {
	select default_name, iso from countries order by default_name 
    } 
 ------------ 
      
	select default_name, iso from countries order by default_name 
    
       
b(all_states):[db_foreach]
 {
	select state_name, abbrev from us_states order by state_name
    } 
 ------------ 
      
	select state_name, abbrev from states order by state_name
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/defs-procs.tcl####################
b(parameters_get_all):[db_foreach]
 {
	select v.package_id, p.parameter_name, v.attr_value
	from apm_parameters p, apm_parameter_values v
	where p.parameter_id = v.parameter_id
    } 
 ------------ 
      
	select v.package_id, p.parameter_name, v.attr_value
	from apm_parameters p, apm_parameter_values v
	where p.parameter_id = v.parameter_id
    
       
b(user_name_select):[db_1row]
 {
		select first_names, last_name, email
		from persons, parties
		where person_id = :user_id
		and person_id = party_id
	    } 
 ------------ 
      
		select first_names, last_name, email
		from persons, parties
		where person_id = :user_id
		and person_id = party_id
	    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/utilities-procs.tcl####################
b(zip_code_exists):[db_0or1row]
 {
		    select 1
		      from dual
		     where exists (select 1
				     from zip_codes
				    where zip_code like :zip_5)
		} 
 ------------ 
		    select 1
		      from dual
		     where exists (select 1
				     from zip_codes
				    where zip_code like :zip_5)
       
q(double_click_check):[db_0or1row]
 "
		
		select 1 as one
		from $table_name
		where $id_column_name = :generated_id
		
	    " 
 ------------ 
      
		
		select 1 as one
		from $table_name
		where $id_column_name = :generated_id
		
	    
       
b(email_unique_p):[db_string]
 {} 
 ------------ 
    select count(*)
    from dual
    where not exists (select 1
                      from parties
                      where email = lower(:email))
   
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-bootstrap-installer/installer/auto-install.tcl####################
b(main_site_id_select):[db_string]
 { 
    select package_id from apm_packages
    where instance_name = 'Main Site' 
} 
 ------------ 
	select package_id
	from apm_packages
	where instance_name = 'Main Site' 
 
q(db_types_exists):[db_string]
 "
	select case when count(*) = 0 then 0 else 1 end from apm_package_db_types" 
 ------------ 
	select case when count(*) = 0 then 0 else 1 end
	from apm_package_db_types
 
b(all_unmounted_package_key):[db_foreach]
 {
    select t.package_key 
    from apm_package_types t, apm_packages p
    where t.package_key = p.package_key(+) 
    and p.package_id is null
} 
 ------------ 
	select t.package_key
	from apm_package_types t
	    left join apm_packages p
	    using (package_key)
	where p.package_id is null
 
b(insert_apm_db_type):[db_dml]
 {
		insert into apm_package_db_types
		    (db_type_key, pretty_db_name)
		values
		    (:db_type, :db_pretty_name)
	    } 
 ------------ 
	insert into apm_package_db_types
		(db_type_key, pretty_db_name)
	values
		(:db_type, :db_pretty_name)
 

d:\projects\ms_oacs\xql_parser>perl xparse.pl 
perl xparse.pl 
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/security-procs.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/security-procs.xql
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/user-extensions-procs.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/user-extensions-procs.xql
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-xml-procs.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-xml-procs.xql
d:/projects/portable.nsd/openacs-4/packages/acs-bootstrap-installer/installer/create-administrator-2.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-bootstrap-installer/installer/create-administrator-2-postgresql.xql
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/acs-permissions-procs.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/acs-permissions-procs.xql
d:/projects/portable.nsd/openacs-4/packages/acs-service-contract/www/binding-install.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-service-contract/www/binding-install-postgresql.xql
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/request-processor-init.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/request-processor-init.xql
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/navigation-procs.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/navigation-procs-postgresql.xql
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/acs-kernel-procs.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/acs-kernel-procs.xql
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/object-procs.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/object-procs.xql
d:/projects/portable.nsd/openacs-4/packages/acs-service-contract/www/binding-uninstall.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-service-contract/www/binding-uninstall-postgresql.xql
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/community-core-procs.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/community-core-procs.xql
d:/projects/portable.nsd/openacs-4/packages/acs-service-contract/www/index.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-service-contract/www/index.xql
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/admin-procs.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/admin-procs.xql
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-procs.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-procs.xql
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/admin-init.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/admin-init-postgresql.xql
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/security-init.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/security-init.xql
d:/projects/portable.nsd/openacs-4/packages/acs-bootstrap-installer/installer/create-administrator.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-bootstrap-installer/installer/create-administrator-postgresql.xql
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-install-procs.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-install-procs.xql
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/deprecated-utilities-procs.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/deprecated-utilities-procs.xql
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/object-type-procs.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/object-type-procs.xql
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/request-processor-procs.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/request-processor-procs.xql
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/site-nodes-procs.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/site-nodes-procs.xql
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-file-procs.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-file-procs.xql
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/widgets-procs.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/widgets-procs.xql
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/defs-procs.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/defs-procs.xql
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/utilities-procs.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/utilities-procs.xql
d:/projects/portable.nsd/openacs-4/packages/acs-bootstrap-installer/installer/auto-install.tcl
d:/projects/portable.nsd/openacs-4/packages/acs-bootstrap-installer/installer/auto-install.xql

d:\projects\ms_oacs\xql_parser>perl xparse.pl 
perl xparse.pl 
Global symbol "%files" requires explicit package name at xparse.pl line 56.
Execution of xparse.pl aborted due to compilation errors.

d:\projects\ms_oacs\xql_parser>perl xparse.pl 
perl xparse.pl 
Variable "%files_native" will not stay shared at xparse.pl line 45.
Variable "%files_generic" will not stay shared at xparse.pl line 50.
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-install-procs.tcl####################
b(all_dependencies_for_version):[db_foreach]
 {

      
	select dependency_id from apm_package_dependencies
	where version_id = :version_id
    
      
} 
 ------------ 
      
	select dependency_id from apm_package_dependencies
	where version_id = :version_id
    
       
b(all_parameters_for_package_key):[db_foreach]
 {

      
	select parameter_id, parameter_name
	from apm_parameters
	where package_key =:package_key
    
      
} 
 ------------ 
      
	select parameter_id, parameter_name
	from apm_parameters
	where package_key =:package_key
    
       
b(apm_spec_file_register):[db_dml]
 {

      
	    update apm_package_types
		set spec_file_path = :path
	        where package_key = :package_key
	
      
} 
 ------------ 
      
	    update apm_package_types
		set spec_file_path = :path
	        where package_key = :package_key
	
       
b(package_spec_path_select):[db_0or1row]
 {

      
            select path
            from apm_package_files
            where version_id = :version_id
            and file_type = 'package_spec'
	    and path = :info_file_name
        
      
} 
 ------------ 
      
            select path
            from apm_package_files
            where version_id = :version_id
            and file_type = 'package_spec'
	    and path = :info_file_name
        
       
b(package_version_info_select):[db_1row]
 {

      
	select package_key, version_id
	from apm_package_version_info 
	where version_id = :version_id
    
      
} 
 ------------ 
      
	select package_key, version_id
	from apm_package_version_info 
	where version_id = :version_id
    
       
b(owner_insert):[db_dml]
 {

      
	    insert into apm_package_owners(version_id, owner_uri, owner_name, sort_key)
	    values(:version_id, :owner_uri, :owner_name, :counter)
	
      
} 
 ------------ 
      
	    insert into apm_package_owners(version_id, owner_uri, owner_name, sort_key)
	    values(:version_id, :owner_uri, :owner_name, :counter)
	
       
b(parameter_id_get):[db_0or1row]
 {

      
	    select parameter_id from apm_parameters
	    where parameter_name = :parameter_name
	    and package_key = :package_key
	
      
} 
 ------------ 
      
	    select parameter_id from apm_parameters
	    where parameter_name = :parameter_name
	    and package_key = :package_key
	
       
b(files_delete):[db_dml]
 {

      
	delete from apm_package_files where version_id = :version_id
    
      
} 
 ------------ 
      
	delete from apm_package_files where version_id = :version_id
    
       
b(apm_uninstall_record):[db_dml]
 {

      
	update apm_package_versions
	set    installed_p = 'f', enabled_p = 'f'
	where package_key = :package_key
    
      
} 
 ------------ 
      
	update apm_package_versions
	set    installed_p = 'f', enabled_p = 'f'
	where package_key = :package_key
    
       
b(apm_delete_owners):[db_dml]
 {

      
	delete from apm_package_owners where version_id = :version_id
    
      
} 
 ------------ 
      
	delete from apm_package_owners where version_id = :version_id
    
       
b(apm_package_version_count):[db_string]
 {

      
	select count(*) from apm_package_versions
	where package_key = :package_key
    
      
} 
 ------------ 
      
	select count(*) from apm_package_versions
	where package_key = :package_key
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-install-procs.tcl####################
b(apm_version_delete):[db_exec_plsql]
 {
	begin
	 apm_package_version.delete(version_id => :version_id);	 
	end;
    } 
 ------------ 

	 select apm_package_version__delete(:version_id);	 
    
       
b(package_instantiate_mount):[db_exec_plsql]
 {
	        declare
  	            instance_id   apm_packages.package_id%TYPE;
	        begin
	            instance_id := apm_package.new(
	                          instance_name => :package_name,
			  	  package_key => :package_key,
				  context_id => acs.magic_object_id('default_context')
				  );
	        end;
	    } 
 ------------ 

	        select apm_package__new(
                                  null,
	                          :package_name,
			  	  :package_key,
                                  'apm_package',
                                  now(),
                                  null,
                                  null,
				  acs__magic_object_id('default_context')
				  );
	    
       
b(package_instantiate_and_mount):[db_exec_plsql]
 {
	    declare
	            main_site_id  site_nodes.node_id%TYPE;
  	            instance_id   apm_packages.package_id%TYPE;
	            node_id       site_nodes.node_id%TYPE;
	    begin
	            main_site_id := site_node.node_id('/');
	        
	            instance_id := apm_package.new(
			  	  package_key => :package_key,
				  context_id => main_site_id
				  );

		    node_id := site_node.new(
			     parent_id => main_site_id,
			     name => :package_key,
			     directory_p => 't',
			     pattern_p => 't',
			     object_id => instance_id
			  );
	    end;
	    } 
 ------------ 

	    declare
	            main_site_id  site_nodes.node_id%TYPE;
  	            instance_id   apm_packages.package_id%TYPE;
	            node_id       site_nodes.node_id%TYPE;
	    begin
	            main_site_id := site_node__node_id('/',null);
	        
	            instance_id := apm_package__new(
                                  null,
                                  null,
			  	  :package_key,
                                  'apm_package',
                                  now(),
                                  null,
                                  null,
				  main_site_id
				  );

		    node_id := site_node__new(
                             null
			     main_site_id,
			     :package_key,
			     instance_id,
			     't',
			     't',
                             null,
                             null
			  );

                    return null;
	    end;
	    
       
b(apm_package_delete):[db_exec_plsql]
 {
	begin
	    apm_package_type.drop_type(
	        package_key => :package_key,
	        cascade_p => 't'
            );
	end;
    } 
 ------------ 

	    select apm_package_type__drop_type(
	        :package_key,
	        't'
            );
    
       
b(version_exists_p):[db_0or1row]
 {
	    select version_id 
	    from apm_package_versions 
	    where package_key = :package_key
	    and version_id = apm_package.highest_version(:package_key)
	} 
 ------------ 
      
	    select version_id 
	    from apm_package_versions 
	    where package_key = :package_key
	    and version_id = apm_package__highest_version(:package_key)
	
       
b(apm_dependency_check):[db_p]
 {
	select apm_package_version.version_name_greater(service_version, :dependency_version) as version_p
	from apm_package_dependencies d, apm_package_types a, apm_package_versions v
	where d.dependency_type = 'provides'
	and d.version_id = v.version_id
	and d.service_uri = :dependency_uri
	and v.installed_p = 't'
	and a.package_key = v.package_key
    } 
 ------------ 
      
	select apm_package_version__version_name_greater(service_version, :dependency_version) as version_p
	from apm_package_dependencies d, apm_package_types a, apm_package_versions v
	where d.dependency_type = 'provides'
	and d.version_id = v.version_id
	and d.service_uri = :dependency_uri
	and v.installed_p = 't'
	and a.package_key = v.package_key
    
       
b(version_insert):[db_exec_plsql]
 {
		begin
		:1 := apm_package_version.new(
			version_id => :version_id,
			package_key => :package_key,
			version_name => :version_name,
			version_uri => :version_uri,
			summary => :summary,
			description_format => :description_format,
			description => :description,
			release_date => :release_date,
			vendor => :vendor,
			vendor_uri => :vendor_uri,
			installed_p => 't',
			data_model_loaded_p => 't'
	              );
		end;
	    } 
 ------------ 
		select apm_package_version__new(
			:version_id,
			:package_key,
			:version_name,
			:version_uri,
			:summary,
			:description_format,
			:description,
			:release_date,
			:vendor,
			:vendor_uri,
			't',
			't'
	              );
       
b(apm_upgrade_for_version_p):[db_exec_plsql]
 {
	begin
	    :1 := apm_package_version.upgrade_p(
	              path => :path,
	              initial_version_name => :initial_version_name,
	              final_version_name => :final_version_name
	          );
	end;
    } 
 ------------ 

	    select apm_package_version__upgrade_p(
	              :path,
	              :initial_version_name,
	              :final_version_name
	          );
    
       
b(version_mark_installed):[db_dml]
 {
            update apm_package_versions
            set    installed_p = decode(version_id, :version_id, 't', 'f')
            where  package_key = :package_key
        } 
 ------------ 

            update apm_package_versions
            set    installed_p = (version_id = :version_id)
            where  package_key = :package_key
        
       
b(apm_package_version_disable):[db_exec_plsql]
 {
	begin
	  apm_package_version.disable(
            version_id => :version_id
	  );
	end;
    } 
 ------------ 

	  select apm_package_version__disable(
            :version_id
	  );
    
       
b(service_register):[db_exec_plsql]
 {
	    select apm__register_service (
			:package_key,
			:pretty_name,
			:pretty_plural,
			:package_uri,
			:initial_install_p,
			:singleton_p,
			:spec_file_path,
			:spec_file_mtime
			);
	} 
 ------------ 

	    select apm__register_service (
			:package_key,
			:pretty_name,
			:pretty_plural,
			:package_uri,
			:initial_install_p,
			:singleton_p,
			:spec_file_path,
			:spec_file_mtime
			);
	
       
b(application_register):[db_exec_plsql]
 {
	    select apm__register_application (
		        :package_key,
			:pretty_name,
			:pretty_plural,
			:package_uri,
			:initial_install_p,
			:singleton_p,
			:spec_file_path,
			:spec_file_mtime
          		);
	} 
 ------------ 

	    select apm__register_application (
		        :package_key,
			:pretty_name,
			:pretty_plural,
			:package_uri,
			:initial_install_p,
			:singleton_p,
			:spec_file_path,
			:spec_file_mtime
          		);
	
       
b(apm_version_update):[db_exec_plsql]
 {
	begin
	:1 := apm_package_version.edit(
				 version_id => :version_id, 
				 version_name => :version_name, 
				 version_uri => :version_uri,
				 summary => :summary,
				 description_format => :description_format,
				 description => :description,
				 release_date => :release_date,
				 vendor => :vendor,
				 vendor_uri => :vendor_uri,
				 installed_p => 't',
				 data_model_loaded_p => 't'				 
				 );
	end;
    } 
 ------------ 

	select apm_package_version__edit(
                                 null,
				 :version_id, 
				 :version_name, 
				 :version_uri,
				 :summary,
				 :description_format,
				 :description,
				 :release_date,
				 :vendor,
				 :vendor_uri,
				 't',
				 't'				 
				 );
    
       
q(test):[db_exec_plsql]
 "
	    begin
	    :1 := apm_package_version.sortable_version_name('$f2_version_from');
	    end;
	" 
 ------------ 

	    select apm_package_version__sortable_version_name('$f1_version_from');
	
       
b(apm_version_upgrade):[db_exec_plsql]
 {
	begin
	    apm_package_version.upgrade(version_id => :version_id);
	end;

    } 
 ------------ 

	    select apm_package_version__upgrade(:version_id);
    
       
b(apm_package_upgrade_p):[db_string]
 {
	select apm_package_version.version_name_greater(:version_name, version_name) upgrade_p
	from apm_package_versions
	where package_key = :package_key
	and version_id = apm_package.highest_version (:package_key)
    } 
 ------------ 
      
	select apm_package_version__version_name_greater(:version_name, version_name) as upgrade_p
	from apm_package_versions
	where package_key = :package_key
	and version_id = apm_package__highest_version (:package_key)
    
       
b(apm_package_version_enable):[db_exec_plsql]
 {
	begin
	  apm_package_version.enable(
            version_id => :version_id
	  );
	end;
    } 
 ------------ 

	  select apm_package_version__enable(
            :version_id
	  );
    
       

d:\projects\ms_oacs\xql_parser>perl xparse.pl 
perl xparse.pl 
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-install-procs.tcl####################
b(all_dependencies_for_version):[db_foreach]
 {

      
	select dependency_id from apm_package_dependencies
	where version_id = :version_id
    
      
} 
 ------------ 
      
	select dependency_id from apm_package_dependencies
	where version_id = :version_id
    
       
b(all_parameters_for_package_key):[db_foreach]
 {

      
	select parameter_id, parameter_name
	from apm_parameters
	where package_key =:package_key
    
      
} 
 ------------ 
      
	select parameter_id, parameter_name
	from apm_parameters
	where package_key =:package_key
    
       
b(apm_spec_file_register):[db_dml]
 {

      
	    update apm_package_types
		set spec_file_path = :path
	        where package_key = :package_key
	
      
} 
 ------------ 
      
	    update apm_package_types
		set spec_file_path = :path
	        where package_key = :package_key
	
       
b(package_spec_path_select):[db_0or1row]
 {

      
            select path
            from apm_package_files
            where version_id = :version_id
            and file_type = 'package_spec'
	    and path = :info_file_name
        
      
} 
 ------------ 
      
            select path
            from apm_package_files
            where version_id = :version_id
            and file_type = 'package_spec'
	    and path = :info_file_name
        
       
b(package_version_info_select):[db_1row]
 {

      
	select package_key, version_id
	from apm_package_version_info 
	where version_id = :version_id
    
      
} 
 ------------ 
      
	select package_key, version_id
	from apm_package_version_info 
	where version_id = :version_id
    
       
b(owner_insert):[db_dml]
 {

      
	    insert into apm_package_owners(version_id, owner_uri, owner_name, sort_key)
	    values(:version_id, :owner_uri, :owner_name, :counter)
	
      
} 
 ------------ 
      
	    insert into apm_package_owners(version_id, owner_uri, owner_name, sort_key)
	    values(:version_id, :owner_uri, :owner_name, :counter)
	
       
b(parameter_id_get):[db_0or1row]
 {

      
	    select parameter_id from apm_parameters
	    where parameter_name = :parameter_name
	    and package_key = :package_key
	
      
} 
 ------------ 
      
	    select parameter_id from apm_parameters
	    where parameter_name = :parameter_name
	    and package_key = :package_key
	
       
b(files_delete):[db_dml]
 {

      
	delete from apm_package_files where version_id = :version_id
    
      
} 
 ------------ 
      
	delete from apm_package_files where version_id = :version_id
    
       
b(apm_uninstall_record):[db_dml]
 {

      
	update apm_package_versions
	set    installed_p = 'f', enabled_p = 'f'
	where package_key = :package_key
    
      
} 
 ------------ 
      
	update apm_package_versions
	set    installed_p = 'f', enabled_p = 'f'
	where package_key = :package_key
    
       
b(apm_delete_owners):[db_dml]
 {

      
	delete from apm_package_owners where version_id = :version_id
    
      
} 
 ------------ 
      
	delete from apm_package_owners where version_id = :version_id
    
       
b(apm_package_version_count):[db_string]
 {

      
	select count(*) from apm_package_versions
	where package_key = :package_key
    
      
} 
 ------------ 
      
	select count(*) from apm_package_versions
	where package_key = :package_key
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-install-procs.tcl####################
b(apm_version_delete):[db_exec_plsql]
 {
	begin
	 apm_package_version.delete(version_id => :version_id);	 
	end;
    } 
 ------------ 

	 select apm_package_version__delete(:version_id);	 
    
       
b(package_instantiate_mount):[db_exec_plsql]
 {
	        declare
  	            instance_id   apm_packages.package_id%TYPE;
	        begin
	            instance_id := apm_package.new(
	                          instance_name => :package_name,
			  	  package_key => :package_key,
				  context_id => acs.magic_object_id('default_context')
				  );
	        end;
	    } 
 ------------ 

	        select apm_package__new(
                                  null,
	                          :package_name,
			  	  :package_key,
                                  'apm_package',
                                  now(),
                                  null,
                                  null,
				  acs__magic_object_id('default_context')
				  );
	    
       
b(package_instantiate_and_mount):[db_exec_plsql]
 {
	    declare
	            main_site_id  site_nodes.node_id%TYPE;
  	            instance_id   apm_packages.package_id%TYPE;
	            node_id       site_nodes.node_id%TYPE;
	    begin
	            main_site_id := site_node.node_id('/');
	        
	            instance_id := apm_package.new(
			  	  package_key => :package_key,
				  context_id => main_site_id
				  );

		    node_id := site_node.new(
			     parent_id => main_site_id,
			     name => :package_key,
			     directory_p => 't',
			     pattern_p => 't',
			     object_id => instance_id
			  );
	    end;
	    } 
 ------------ 

	    declare
	            main_site_id  site_nodes.node_id%TYPE;
  	            instance_id   apm_packages.package_id%TYPE;
	            node_id       site_nodes.node_id%TYPE;
	    begin
	            main_site_id := site_node__node_id('/',null);
	        
	            instance_id := apm_package__new(
                                  null,
                                  null,
			  	  :package_key,
                                  'apm_package',
                                  now(),
                                  null,
                                  null,
				  main_site_id
				  );

		    node_id := site_node__new(
                             null
			     main_site_id,
			     :package_key,
			     instance_id,
			     't',
			     't',
                             null,
                             null
			  );

                    return null;
	    end;
	    
       
b(apm_package_delete):[db_exec_plsql]
 {
	begin
	    apm_package_type.drop_type(
	        package_key => :package_key,
	        cascade_p => 't'
            );
	end;
    } 
 ------------ 

	    select apm_package_type__drop_type(
	        :package_key,
	        't'
            );
    
       
b(version_exists_p):[db_0or1row]
 {
	    select version_id 
	    from apm_package_versions 
	    where package_key = :package_key
	    and version_id = apm_package.highest_version(:package_key)
	} 
 ------------ 
      
	    select version_id 
	    from apm_package_versions 
	    where package_key = :package_key
	    and version_id = apm_package__highest_version(:package_key)
	
       
b(apm_dependency_check):[db_p]
 {
	select apm_package_version.version_name_greater(service_version, :dependency_version) as version_p
	from apm_package_dependencies d, apm_package_types a, apm_package_versions v
	where d.dependency_type = 'provides'
	and d.version_id = v.version_id
	and d.service_uri = :dependency_uri
	and v.installed_p = 't'
	and a.package_key = v.package_key
    } 
 ------------ 
      
	select apm_package_version__version_name_greater(service_version, :dependency_version) as version_p
	from apm_package_dependencies d, apm_package_types a, apm_package_versions v
	where d.dependency_type = 'provides'
	and d.version_id = v.version_id
	and d.service_uri = :dependency_uri
	and v.installed_p = 't'
	and a.package_key = v.package_key
    
       
b(version_insert):[db_exec_plsql]
 {
		begin
		:1 := apm_package_version.new(
			version_id => :version_id,
			package_key => :package_key,
			version_name => :version_name,
			version_uri => :version_uri,
			summary => :summary,
			description_format => :description_format,
			description => :description,
			release_date => :release_date,
			vendor => :vendor,
			vendor_uri => :vendor_uri,
			installed_p => 't',
			data_model_loaded_p => 't'
	              );
		end;
	    } 
 ------------ 
		select apm_package_version__new(
			:version_id,
			:package_key,
			:version_name,
			:version_uri,
			:summary,
			:description_format,
			:description,
			:release_date,
			:vendor,
			:vendor_uri,
			't',
			't'
	              );
       
b(apm_upgrade_for_version_p):[db_exec_plsql]
 {
	begin
	    :1 := apm_package_version.upgrade_p(
	              path => :path,
	              initial_version_name => :initial_version_name,
	              final_version_name => :final_version_name
	          );
	end;
    } 
 ------------ 

	    select apm_package_version__upgrade_p(
	              :path,
	              :initial_version_name,
	              :final_version_name
	          );
    
       
b(version_mark_installed):[db_dml]
 {
            update apm_package_versions
            set    installed_p = decode(version_id, :version_id, 't', 'f')
            where  package_key = :package_key
        } 
 ------------ 

            update apm_package_versions
            set    installed_p = (version_id = :version_id)
            where  package_key = :package_key
        
       
b(apm_package_version_disable):[db_exec_plsql]
 {
	begin
	  apm_package_version.disable(
            version_id => :version_id
	  );
	end;
    } 
 ------------ 

	  select apm_package_version__disable(
            :version_id
	  );
    
       
b(service_register):[db_exec_plsql]
 {
	    select apm__register_service (
			:package_key,
			:pretty_name,
			:pretty_plural,
			:package_uri,
			:initial_install_p,
			:singleton_p,
			:spec_file_path,
			:spec_file_mtime
			);
	} 
 ------------ 

	    select apm__register_service (
			:package_key,
			:pretty_name,
			:pretty_plural,
			:package_uri,
			:initial_install_p,
			:singleton_p,
			:spec_file_path,
			:spec_file_mtime
			);
	
       
b(application_register):[db_exec_plsql]
 {
	    select apm__register_application (
		        :package_key,
			:pretty_name,
			:pretty_plural,
			:package_uri,
			:initial_install_p,
			:singleton_p,
			:spec_file_path,
			:spec_file_mtime
          		);
	} 
 ------------ 

	    select apm__register_application (
		        :package_key,
			:pretty_name,
			:pretty_plural,
			:package_uri,
			:initial_install_p,
			:singleton_p,
			:spec_file_path,
			:spec_file_mtime
          		);
	
       
b(apm_version_update):[db_exec_plsql]
 {
	begin
	:1 := apm_package_version.edit(
				 version_id => :version_id, 
				 version_name => :version_name, 
				 version_uri => :version_uri,
				 summary => :summary,
				 description_format => :description_format,
				 description => :description,
				 release_date => :release_date,
				 vendor => :vendor,
				 vendor_uri => :vendor_uri,
				 installed_p => 't',
				 data_model_loaded_p => 't'				 
				 );
	end;
    } 
 ------------ 

	select apm_package_version__edit(
                                 null,
				 :version_id, 
				 :version_name, 
				 :version_uri,
				 :summary,
				 :description_format,
				 :description,
				 :release_date,
				 :vendor,
				 :vendor_uri,
				 't',
				 't'				 
				 );
    
       
q(test):[db_exec_plsql]
 "
	    begin
	    :1 := apm_package_version.sortable_version_name('$f2_version_from');
	    end;
	" 
 ------------ 

	    select apm_package_version__sortable_version_name('$f1_version_from');
	
       
b(apm_version_upgrade):[db_exec_plsql]
 {
	begin
	    apm_package_version.upgrade(version_id => :version_id);
	end;

    } 
 ------------ 

	    select apm_package_version__upgrade(:version_id);
    
       
b(apm_package_upgrade_p):[db_string]
 {
	select apm_package_version.version_name_greater(:version_name, version_name) upgrade_p
	from apm_package_versions
	where package_key = :package_key
	and version_id = apm_package.highest_version (:package_key)
    } 
 ------------ 
      
	select apm_package_version__version_name_greater(:version_name, version_name) as upgrade_p
	from apm_package_versions
	where package_key = :package_key
	and version_id = apm_package__highest_version (:package_key)
    
       
b(apm_package_version_enable):[db_exec_plsql]
 {
	begin
	  apm_package_version.enable(
            version_id => :version_id
	  );
	end;
    } 
 ------------ 

	  select apm_package_version__enable(
            :version_id
	  );
    
       

d:\projects\ms_oacs\xql_parser>perl xparse.pl 
perl xparse.pl 
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-install-procs.tcl####################
b(all_dependencies_for_version):[db_foreach]
 {

      
	select dependency_id from apm_package_dependencies
	where version_id = :version_id
    
      
} 
 ------------ 
      
	select dependency_id from apm_package_dependencies
	where version_id = :version_id
    
       
b(all_parameters_for_package_key):[db_foreach]
 {

      
	select parameter_id, parameter_name
	from apm_parameters
	where package_key =:package_key
    
      
} 
 ------------ 
      
	select parameter_id, parameter_name
	from apm_parameters
	where package_key =:package_key
    
       
b(apm_spec_file_register):[db_dml]
 {

      
	    update apm_package_types
		set spec_file_path = :path
	        where package_key = :package_key
	
      
} 
 ------------ 
      
	    update apm_package_types
		set spec_file_path = :path
	        where package_key = :package_key
	
       
b(package_spec_path_select):[db_0or1row]
 {

      
            select path
            from apm_package_files
            where version_id = :version_id
            and file_type = 'package_spec'
	    and path = :info_file_name
        
      
} 
 ------------ 
      
            select path
            from apm_package_files
            where version_id = :version_id
            and file_type = 'package_spec'
	    and path = :info_file_name
        
       
b(package_version_info_select):[db_1row]
 {

      
	select package_key, version_id
	from apm_package_version_info 
	where version_id = :version_id
    
      
} 
 ------------ 
      
	select package_key, version_id
	from apm_package_version_info 
	where version_id = :version_id
    
       
b(owner_insert):[db_dml]
 {

      
	    insert into apm_package_owners(version_id, owner_uri, owner_name, sort_key)
	    values(:version_id, :owner_uri, :owner_name, :counter)
	
      
} 
 ------------ 
      
	    insert into apm_package_owners(version_id, owner_uri, owner_name, sort_key)
	    values(:version_id, :owner_uri, :owner_name, :counter)
	
       
b(parameter_id_get):[db_0or1row]
 {

      
	    select parameter_id from apm_parameters
	    where parameter_name = :parameter_name
	    and package_key = :package_key
	
      
} 
 ------------ 
      
	    select parameter_id from apm_parameters
	    where parameter_name = :parameter_name
	    and package_key = :package_key
	
       
b(files_delete):[db_dml]
 {

      
	delete from apm_package_files where version_id = :version_id
    
      
} 
 ------------ 
      
	delete from apm_package_files where version_id = :version_id
    
       
b(apm_uninstall_record):[db_dml]
 {

      
	update apm_package_versions
	set    installed_p = 'f', enabled_p = 'f'
	where package_key = :package_key
    
      
} 
 ------------ 
      
	update apm_package_versions
	set    installed_p = 'f', enabled_p = 'f'
	where package_key = :package_key
    
       
b(apm_delete_owners):[db_dml]
 {

      
	delete from apm_package_owners where version_id = :version_id
    
      
} 
 ------------ 
      
	delete from apm_package_owners where version_id = :version_id
    
       
b(apm_package_version_count):[db_string]
 {

      
	select count(*) from apm_package_versions
	where package_key = :package_key
    
      
} 
 ------------ 
      
	select count(*) from apm_package_versions
	where package_key = :package_key
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-install-procs.tcl####################
b(apm_version_delete):[db_exec_plsql]
 {
	begin
	 apm_package_version.delete(version_id => :version_id);	 
	end;
    } 
 ------------ 

	 select apm_package_version__delete(:version_id);	 
    
       
b(package_instantiate_mount):[db_exec_plsql]
 {
	        declare
  	            instance_id   apm_packages.package_id%TYPE;
	        begin
	            instance_id := apm_package.new(
	                          instance_name => :package_name,
			  	  package_key => :package_key,
				  context_id => acs.magic_object_id('default_context')
				  );
	        end;
	    } 
 ------------ 

	        select apm_package__new(
                                  null,
	                          :package_name,
			  	  :package_key,
                                  'apm_package',
                                  now(),
                                  null,
                                  null,
				  acs__magic_object_id('default_context')
				  );
	    
       
b(package_instantiate_and_mount):[db_exec_plsql]
 {
	    declare
	            main_site_id  site_nodes.node_id%TYPE;
  	            instance_id   apm_packages.package_id%TYPE;
	            node_id       site_nodes.node_id%TYPE;
	    begin
	            main_site_id := site_node.node_id('/');
	        
	            instance_id := apm_package.new(
			  	  package_key => :package_key,
				  context_id => main_site_id
				  );

		    node_id := site_node.new(
			     parent_id => main_site_id,
			     name => :package_key,
			     directory_p => 't',
			     pattern_p => 't',
			     object_id => instance_id
			  );
	    end;
	    } 
 ------------ 

	    declare
	            main_site_id  site_nodes.node_id%TYPE;
  	            instance_id   apm_packages.package_id%TYPE;
	            node_id       site_nodes.node_id%TYPE;
	    begin
	            main_site_id := site_node__node_id('/',null);
	        
	            instance_id := apm_package__new(
                                  null,
                                  null,
			  	  :package_key,
                                  'apm_package',
                                  now(),
                                  null,
                                  null,
				  main_site_id
				  );

		    node_id := site_node__new(
                             null
			     main_site_id,
			     :package_key,
			     instance_id,
			     't',
			     't',
                             null,
                             null
			  );

                    return null;
	    end;
	    
       
b(apm_package_delete):[db_exec_plsql]
 {
	begin
	    apm_package_type.drop_type(
	        package_key => :package_key,
	        cascade_p => 't'
            );
	end;
    } 
 ------------ 

	    select apm_package_type__drop_type(
	        :package_key,
	        't'
            );
    
       
b(version_exists_p):[db_0or1row]
 {
	    select version_id 
	    from apm_package_versions 
	    where package_key = :package_key
	    and version_id = apm_package.highest_version(:package_key)
	} 
 ------------ 
      
	    select version_id 
	    from apm_package_versions 
	    where package_key = :package_key
	    and version_id = apm_package__highest_version(:package_key)
	
       
b(apm_dependency_check):[db_p]
 {
	select apm_package_version.version_name_greater(service_version, :dependency_version) as version_p
	from apm_package_dependencies d, apm_package_types a, apm_package_versions v
	where d.dependency_type = 'provides'
	and d.version_id = v.version_id
	and d.service_uri = :dependency_uri
	and v.installed_p = 't'
	and a.package_key = v.package_key
    } 
 ------------ 
      
	select apm_package_version__version_name_greater(service_version, :dependency_version) as version_p
	from apm_package_dependencies d, apm_package_types a, apm_package_versions v
	where d.dependency_type = 'provides'
	and d.version_id = v.version_id
	and d.service_uri = :dependency_uri
	and v.installed_p = 't'
	and a.package_key = v.package_key
    
       
b(version_insert):[db_exec_plsql]
 {
		begin
		:1 := apm_package_version.new(
			version_id => :version_id,
			package_key => :package_key,
			version_name => :version_name,
			version_uri => :version_uri,
			summary => :summary,
			description_format => :description_format,
			description => :description,
			release_date => :release_date,
			vendor => :vendor,
			vendor_uri => :vendor_uri,
			installed_p => 't',
			data_model_loaded_p => 't'
	              );
		end;
	    } 
 ------------ 
		select apm_package_version__new(
			:version_id,
			:package_key,
			:version_name,
			:version_uri,
			:summary,
			:description_format,
			:description,
			:release_date,
			:vendor,
			:vendor_uri,
			't',
			't'
	              );
       
b(apm_upgrade_for_version_p):[db_exec_plsql]
 {
	begin
	    :1 := apm_package_version.upgrade_p(
	              path => :path,
	              initial_version_name => :initial_version_name,
	              final_version_name => :final_version_name
	          );
	end;
    } 
 ------------ 

	    select apm_package_version__upgrade_p(
	              :path,
	              :initial_version_name,
	              :final_version_name
	          );
    
       
b(version_mark_installed):[db_dml]
 {
            update apm_package_versions
            set    installed_p = decode(version_id, :version_id, 't', 'f')
            where  package_key = :package_key
        } 
 ------------ 

            update apm_package_versions
            set    installed_p = (version_id = :version_id)
            where  package_key = :package_key
        
       
b(apm_package_version_disable):[db_exec_plsql]
 {
	begin
	  apm_package_version.disable(
            version_id => :version_id
	  );
	end;
    } 
 ------------ 

	  select apm_package_version__disable(
            :version_id
	  );
    
       
b(service_register):[db_exec_plsql]
 {
	    select apm__register_service (
			:package_key,
			:pretty_name,
			:pretty_plural,
			:package_uri,
			:initial_install_p,
			:singleton_p,
			:spec_file_path,
			:spec_file_mtime
			);
	} 
 ------------ 

	    select apm__register_service (
			:package_key,
			:pretty_name,
			:pretty_plural,
			:package_uri,
			:initial_install_p,
			:singleton_p,
			:spec_file_path,
			:spec_file_mtime
			);
	
       
b(application_register):[db_exec_plsql]
 {
	    select apm__register_application (
		        :package_key,
			:pretty_name,
			:pretty_plural,
			:package_uri,
			:initial_install_p,
			:singleton_p,
			:spec_file_path,
			:spec_file_mtime
          		);
	} 
 ------------ 

	    select apm__register_application (
		        :package_key,
			:pretty_name,
			:pretty_plural,
			:package_uri,
			:initial_install_p,
			:singleton_p,
			:spec_file_path,
			:spec_file_mtime
          		);
	
       
b(apm_version_update):[db_exec_plsql]
 {
	begin
	:1 := apm_package_version.edit(
				 version_id => :version_id, 
				 version_name => :version_name, 
				 version_uri => :version_uri,
				 summary => :summary,
				 description_format => :description_format,
				 description => :description,
				 release_date => :release_date,
				 vendor => :vendor,
				 vendor_uri => :vendor_uri,
				 installed_p => 't',
				 data_model_loaded_p => 't'				 
				 );
	end;
    } 
 ------------ 

	select apm_package_version__edit(
                                 null,
				 :version_id, 
				 :version_name, 
				 :version_uri,
				 :summary,
				 :description_format,
				 :description,
				 :release_date,
				 :vendor,
				 :vendor_uri,
				 't',
				 't'				 
				 );
    
       
q(test):[db_exec_plsql]
 "
	    begin
	    :1 := apm_package_version.sortable_version_name('$f2_version_from');
	    end;
	" 
 ------------ 

	    select apm_package_version__sortable_version_name('$f1_version_from');
	
       
b(apm_version_upgrade):[db_exec_plsql]
 {
	begin
	    apm_package_version.upgrade(version_id => :version_id);
	end;

    } 
 ------------ 

	    select apm_package_version__upgrade(:version_id);
    
       
b(apm_package_upgrade_p):[db_string]
 {
	select apm_package_version.version_name_greater(:version_name, version_name) upgrade_p
	from apm_package_versions
	where package_key = :package_key
	and version_id = apm_package.highest_version (:package_key)
    } 
 ------------ 
      
	select apm_package_version__version_name_greater(:version_name, version_name) as upgrade_p
	from apm_package_versions
	where package_key = :package_key
	and version_id = apm_package__highest_version (:package_key)
    
       
b(apm_package_version_enable):[db_exec_plsql]
 {
	begin
	  apm_package_version.enable(
            version_id => :version_id
	  );
	end;
    } 
 ------------ 

	  select apm_package_version__enable(
            :version_id
	  );
    
       

d:\projects\ms_oacs\xql_parser>perl xparse.pl 
perl xparse.pl 



^C
d:\projects\ms_oacs\xql_parser>
d:\projects\ms_oacs\xql_parser>
d:\projects\ms_oacs\xql_parser>
d:\projects\ms_oacs\xql_parser>

d:\projects\ms_oacs\xql_parser>

d:\projects\ms_oacs\xql_parser>perl xparse.pl 
perl xparse.pl 
^C
d:\projects\ms_oacs\xql_parser>perl -d xparse.pl 
perl -d xparse.pl 
Default die handler restored.

Loading DB routines from perl5db.pl version 1.07
Editor support available.

Enter h or `h h' for help, or `perldoc perldebug' for more help.

main::(xparse.pl:32):	main();
  DB<1> s
main::main(xparse.pl:35):	    our %files_generic;
  DB<1> n
main::main(xparse.pl:36):	    our %files_native;
  DB<1> n
main::main(xparse.pl:54):	    find (\&wanted, 'd:/projects/portable.nsd/openacs-4/packages/');    
  DB<1> n
main::main(xparse.pl:56):	    while (my ($key, $value) = each %files_generic) {
  DB<1> n
main::main(xparse.pl:58):		qd_filter ($key, $value);
  DB<1> p $key
d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-procs.tcl
  DB<2> n
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-procs.tcl####################
n
b(apm_package_by_version_id):[db_1row]
 {

      
	    select pretty_name, version_name, package_key, installed_p, distribution_uri, tagged_p
	    from apm_package_version_info where version_id = :version_id
	
      
} 
 ------------ 
      
	    select pretty_name, version_name, package_key, installed_p, distribution_uri, tagged_p
	    from apm_package_version_info where version_id = :version_id
	
       
b(apm_package_registered_p):[db_string]
 {

      
	select 1 from apm_package_types 
	where package_key = :package_key
    
      
} 
 ------------ 
      
	select 1 from apm_package_types 
	where package_key = :package_key
    
       
b(package_key_select):[db_1row]
 {

      
        select package_key
        from apm_package_version_info
        where version_id = :version_id
    
      
} 
 ------------ 
      
        select package_key
        from apm_package_version_info
        where version_id = :version_id
    
       
b(pretty_name_select):[db_string]
 {

      
        select pretty_name
        from apm_package_file_types
        where file_type_key = :type
    
      
} 
 ------------ 
      
        select pretty_name
        from apm_package_file_types
        where file_type_key = :type
    
       
b(file_info):[db_1]
 {

      
        select file_id, path
        from   apm_package_files
        where  version_id = :version_id
        and    file_type in ('tcl_procs', 'query_file')
        and    (db_type is null or db_type = '[db_type]')
        order by path
    
      
} 
 ------------ 
      
        select file_id, path
        from   apm_package_files
        where  version_id = :version_id
        and    file_type in ('tcl_procs', 'query_file')
        and    (db_type is null or db_type = '[db_type]')
        order by path
    
       
b(parameter_update):[db_dml]
 {

      
       update apm_parameters 
	set parameter_name = :parameter_name,
            default_value  = :default_value,
            datatype       = :datatype, 
	    description	   = :description,
	    section_name   = :section_name,
            min_n_values   = :min_n_values,
            max_n_values   = :max_n_values
      where parameter_id = :parameter_id
    
      
} 
 ------------ 
      
       update apm_parameters 
	set parameter_name = :parameter_name,
            default_value  = :default_value,
            datatype       = :datatype, 
	    description	   = :description,
	    section_name   = :section_name,
            min_n_values   = :min_n_values,
            max_n_values   = :max_n_values
      where parameter_id = :parameter_id
    
       
b(all_parameters_packages):[db_foreach]
 {

      
	select package_id, parameter_id, parameter_name 
	from apm_packages p, apm_parameters ap
	where p.package_key = ap.package_key
	and ap.parameter_id = :parameter_id

    
      
} 
 ------------ 
      
	select package_id, parameter_id, parameter_name 
	from apm_packages p, apm_parameters ap
	where p.package_key = ap.package_key
	and ap.parameter_id = :parameter_id

    
       
b(apm_package_id_from_key):[db_string]
 {

      
	select package_id from apm_packages where package_key = :package_key
    
      
} 
 ------------ 
      
	select package_id from apm_packages where package_key = :package_key
    
       
b(apm_package_installed_p):[db_string]
 {

      
	select 1 from apm_package_versions
	where package_key = :package_key
	and installed_p = 't'
    
      
} 
 ------------ 
      
	select 1 from apm_package_versions
	where package_key = :package_key
	and installed_p = 't'
    
       
b(apm_version_installed_p):[db_string]
 {

      
	select 1 from apm_package_versions
	where version_id = :version_id
	and installed_p = 't'
    
      
} 
 ------------ 
      
	select 1 from apm_package_versions
	where version_id = :version_id
	and installed_p = 't'
    
       
b(apm_package_key_from_id):[db_string]
 {

      
	select package_key from apm_packages where package_id = :package_id
    
      
} 
 ------------ 
      
	select package_key from apm_packages where package_id = :package_id
    
       
b(apm_parameter_cache_update):[db_foreach]
 {


	select v.package_id, p.parameter_name, 
               coalesce(p.default_value, v.attr_value) as attr_value
	from apm_parameters p left outer join apm_parameter_values v
             using (parameter_id)
	where p.package_key = :package_key
    
      
} 
 ------------ 

	select v.package_id, p.parameter_name, 
               coalesce(p.default_value, v.attr_value) as attr_value
	from apm_parameters p left outer join apm_parameter_values v
             using (parameter_id)
	where p.package_key = :package_key
    
       
b(apm_parameter_names_and_values):[db_list_of_lists]
 {

      
	select parameter_name, attr_value
	from apm_parameters p, apm_parameter_values v, apm_packages a
	where p.parameter_id = v.parameter_id
	and a.package_id = v.package_id
	and a.package_id = :package_id
    
      
} 
 ------------ 
      
	select parameter_name, attr_value
	from apm_parameters p, apm_parameter_values v, apm_packages a
	where p.parameter_id = v.parameter_id
	and a.package_id = v.package_id
	and a.package_id = :package_id
    
       
b(apm_package_version_installed_p):[db_string]
 {


	select case when count(*) = 0 then 0 else 1 end from apm_package_versions
	where version_id = :version_id
	and enabled_p = 't'
      
} 
 ------------ 

	select case when count(*) = 0 then 0 else 1 end from apm_package_versions
	where version_id = :version_id
	and enabled_p = 't'
       
b(get_names):[db_list]
 {

      
	select parameter_name from apm_parameters
	where package_key = :package_key
    
      
} 
 ------------ 
      
	select parameter_name from apm_parameters
	where package_key = :package_key
    
       
b(pretty_db_name_select):[db_string]
 {

      
        select pretty_db_name
        from apm_package_db_types
        where db_type_key = :db_type
    
      
} 
 ------------ 
      
        select pretty_db_name
        from apm_package_db_types
        where db_type_key = :db_type
    
       
main::main(xparse.pl:56):	    while (my ($key, $value) = each %files_generic) {
  DB<2> main::main(xparse.pl:61):	    while (my ($key, $value) = each %files_native) {
  DB<2> c
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-procs.tcl####################
b(apm_package_url_from_key):[db_string]
 {
	select site_node.url(node_id) 
          from site_nodes 
         where object_id = :package_id
    } 
 ------------ 
      
	select site_node__url(node_id) 
          from site_nodes 
         where object_id = :package_id
    
       
b(dependency_add):[db_exec_plsql]
 {
	begin
	:1 := apm_package_version.add_dependency(
            dependency_id => :dependency_id,
	    version_id => :version_id,
	    dependency_uri => :dependency_uri,
	    dependency_version => :dependency_version
        );					 
	end;
    } 
 ------------ 

	select apm_package_version__add_dependency(
            :dependency_id,
	    :version_id,
	    :dependency_uri,
	    :dependency_version
        );					 
    
       
b(parameter_unregister):[db_exec_plsql]
 {
	begin
	delete from apm_parameter_values 
	where parameter_id = :parameter_id;
	delete from apm_parameters 
	where parameter_id = :parameter_id;
	acs_object.delete(:parameter_id);
	end;
    } 
 ------------ 
      
	begin
	delete from apm_parameter_values 
	where parameter_id = :parameter_id;
	delete from apm_parameters 
	where parameter_id = :parameter_id;
	PERFORM acs_object__delete(:parameter_id);

        return null;
	end;
    
       
b(interface_remove):[db_exec_plsql]
 {
	begin
	apm_package_version.remove_interface(
             interface_id => :interface_id
	);
	end;					        
    } 
 ------------ 

	select apm_package_version__remove_interface(
             :interface_id
	);
    
       
b(apm_num_instances):[db_exec_plsql]
 {
	begin
	:1 := apm_package.num_instances(
		package_key => :package_key
		);
	end;
    } 
 ------------ 

	select apm_package__num_instances(
		:package_key
		);
    
       
b(apm_package_instance_new):[db_l]
 {
	begin
      :1 := apm_package.new(
        package_id => :package_id,
        instance_name => :instance_name,
        package_key => :package_key,
        context_id => :context_id
      );
	end;
    } 
 ------------ 

      select apm_package__new(
        :package_id,
        :instance_name,
        :package_key,
        'apm_package',
        now(),
        null,
        null,
        :context_id
      );
    
       
b(apm_package_version_installed_p):[db_string]
 {


	select case when count(*) = 0 then 0 else 1 end from apm_package_versions
	where version_id = :version_id
	and enabled_p = 't'
      
} 
 ------------ 

	select case when count(*) = 0 then 0 else 1 end 
        from apm_package_versions
	where package_key = :package_key
	and version_name = :version_name
    
       
b(interface_add):[db_exec_plsql]
 {
	begin
	:1 := apm_package_version.add_interface(
            interface_id => :interface_id,
	    version_id => :version_id,
	    interface_uri => :interface_uri,
	    interface_version => :interface_version
        );					 
	end;
    } 
 ------------ 

	select apm_package_version__add_interface(
            :interface_id,
	    :version_id,
	    :interface_uri,
	    :interface_version
        );					 
    
       
b(dependency_remove):[db_exec_plsql]
 {
	begin
	apm_package_version.remove_dependency(
             dependency_id => :dependency_id
	);
	end;					        
    } 
 ------------ 

	select apm_package_version__remove_dependency(
             :dependency_id
	);
    
       
b(parameter_register):[db_exec_plsql]
 {
	    begin
	    :1 := apm.register_parameter(
					 parameter_id => :parameter_id,
					 parameter_name => :parameter_name,
					 package_key => :package_key,
					 description => :description,
					 datatype => :datatype,
					 default_value => :default_value,
					 section_name => :section_name,
					 min_n_values => :min_n_values,
					 max_n_values => :max_n_values
	                                );
	    end;
	} 
 ------------ 

	    select apm__register_parameter(
					 :parameter_id,
					 :package_key,
					 :parameter_name,
					 :description,
					 :datatype,
					 :default_value,
					 :section_name,
					 :min_n_values,
					 :max_n_values
	                                );
	
       
b(apm_highest_version):[db_exec_plsql]
 {
	begin
	:1 := apm_package.highest_version (
                    package_key => :package_key
		    );
	end;
    } 
 ------------ 

	select  apm_package__highest_version (
                    :package_key
		    );
    
       
Debugged program terminated.  Use q to quit or R to restart,
  use O inhibit_exit to avoid stopping after program termination,
  h q, h R or h O to get additional info.  
  DB<2> q

d:\projects\ms_oacs\xql_parser>perl xparse.pl 
perl xparse.pl 
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/security-procs.tcl####################
b(get_token):[db_string]
 {

      select token from secret_tokens
                       	                 where token_id = :token_id
      
} 
 ------------ 
      select token from secret_tokens
                       	                 where token_id = :token_id
       
b(update_last_hit_dml):[db_dml]
 {

	update sec_session_properties
	   set last_hit = :new_last_hit
	 where session_id = :id and
               property_name = :name
      
} 
 ------------ 
	update sec_session_properties
	   set last_hit = :new_last_hit
	 where session_id = :id and
               property_name = :name
       
b(prop_insert_dml):[db_dml]
 {

	insert into sec_session_properties
	  (session_id, module, property_name, secure_p, last_hit)
	select :session_id, :module, :name, :secure, :last_hit
        from dual
        where not exists (select 1
                          from sec_session_properties
                          where session_id = :session_id and
                          module = :module and
                          property_name = :name)
      
} 
 ------------ 
	insert into sec_session_properties
	  (session_id, module, property_name, secure_p, last_hit)
	select :session_id, :module, :name, :secure, :last_hit
        from dual
        where not exists (select 1
                          from sec_session_properties
                          where session_id = :session_id and
                          module = :module and
                          property_name = :name)
       
b(property_lookup_sec):[db_0or1row]
 {

      
	    select property_value, secure_p
	    from sec_session_properties
	    where session_id = :id
	    and module = :module
	    and property_name = :name
	
      
} 
 ------------ 
      
	    select property_value, secure_p
	    from sec_session_properties
	    where session_id = :id
	    and module = :module
	    and property_name = :name
	
       
b(password_update):[db_dml]
 {

      update users set password = :new_password, salt = :salt where user_id = :user_id
      
} 
 ------------ 
      update users set password = :new_password, salt = :salt where user_id = :user_id
       
b(password_select):[db_0or1row]
 {

      select password, salt from users where user_id = :user_id
      
} 
 ------------ 
      select password, salt from users where user_id = :user_id
       
b(sessions_sweep):[db_dml]
 {

      
	delete from sec_session_properties
	where  :current_time - last_hit > :property_life
    
      
} 
 ------------ 
      
	delete from sec_session_properties
	where  :current_time - last_hit > :property_life
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-file-procs.tcl####################
b(db_type_keys):[db_list]
 {

      select db_type_key from apm_package_db_types
      
} 
 ------------ 
      select db_type_key from apm_package_db_types
       
b(apm_all_files):[db_foreach]
 {

      
	select f.file_id, f.path
	from   apm_package_files f
	where  f.version_id = :version_id
	order by path
    
      
} 
 ------------ 
      
	select f.file_id, f.path
	from   apm_package_files f
	where  f.version_id = :version_id
	order by path
    
       
b(apm_version_id_from_file):[db_string]
 {

      
	select version_id from apm_package_files
	where file_id = :file_id
    
      
} 
 ------------ 
      
	select version_id from apm_package_files
	where file_id = :file_id
    
       
b(set_item_id):[db_dml]
 {


        update apm_package_versions 
        set item_id = :item_id 
        where version_id = :version_id

      
} 
 ------------ 

        update apm_package_versions 
        set item_id = :item_id 
        where version_id = :version_id

       
b(item_exists_p):[db_1row]
 {


        select case when item_id is null then 0 else item_id end as item_id
          from apm_package_versions 
         where version_id = :version_id

      
} 
 ------------ 

        select case when item_id is null then 0 else item_id end as item_id
          from apm_package_versions 
         where version_id = :version_id

       
b(get_revision_id):[db_0or1row]
 {


        select live_revision as revision_id
          from cr_items
         where item_id = :item_id

      
} 
 ------------ 

        select live_revision as revision_id
          from cr_items
         where item_id = :item_id

       
b(package_key_select):[db_1row]
 {

      select package_key from apm_package_version_info where version_id = :version_id
      
} 
 ------------ 
      select package_key from apm_package_version_info where version_id = :version_id
       
b(package_key_for_version_id):[db_string]
 {

      
	select package_key from apm_package_versions 
	where version_id = :version_id
    
      
} 
 ------------ 
      
	select package_key from apm_package_versions 
	where version_id = :version_id
    
       
b(path_select):[db_list]
 {

      
        select path from apm_package_files
        where  version_id = :version_id
        $type_sql $db_type_sql order by path
    
      
} 
 ------------ 
      
        select path from apm_package_files
        where  version_id = :version_id
        $type_sql $db_type_sql order by path
    
       
b(file_type_keys):[db_list]
 {

      select file_type_key from apm_package_file_types
      
} 
 ------------ 
      select file_type_key from apm_package_file_types
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/object-procs.tcl####################
b(object_type_select):[db_string]
 {

      
        select object_type
        from acs_objects
        where object_id = :object_id
    
      
} 
 ------------ 
      
        select object_type
        from acs_objects
        where object_id = :object_id
    
       
b(magic_object_select):[db_string]
 {

      
	select object_id from acs_magic_objects where name = :name
    
      
} 
 ------------ 
      
	select object_id from acs_magic_objects where name = :name
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/defs-procs.tcl####################
b(parameters_get_all):[db_foreach]
 {

      
	select v.package_id, p.parameter_name, v.attr_value
	from apm_parameters p, apm_parameter_values v
	where p.parameter_id = v.parameter_id
    
      
} 
 ------------ 
      
	select v.package_id, p.parameter_name, v.attr_value
	from apm_parameters p, apm_parameter_values v
	where p.parameter_id = v.parameter_id
    
       
b(user_name_select):[db_1row]
 {

      
		select first_names, last_name, email
		from persons, parties
		where person_id = :user_id
		and person_id = party_id
	    
      
} 
 ------------ 
      
		select first_names, last_name, email
		from persons, parties
		where person_id = :user_id
		and person_id = party_id
	    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/request-processor-procs.tcl####################
b(acs_kernel_id_get):[db_string]
 {

      
	select package_id from apm_packages
	where package_key = 'acs-kernel'
    
      
} 
 ------------ 
      
	select package_id from apm_packages
	where package_key = 'acs-kernel'
    
       
b(acs_admin_id_get):[db_string]
 {

      
        select package_id from apm_packages
        where package_key = 'acs-admin'
    
      
} 
 ------------ 
      
        select package_id from apm_packages
        where package_key = 'acs-admin'
    
       
b(node_id):[db_1]
 {


        select node_id 
	from host_node_map
	where host = :host

      
} 
 ------------ 

        select node_id 
	from host_node_map
	where host = :host

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/object-type-procs.tcl####################
b(object_types):[db_foreach]
 {

        $sql
      
} 
 ------------ 
        $sql
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/site-nodes-procs.tcl####################
b(unmount):[db_dml]
 {

      
	update site_nodes
	   set object_id = null
	 where node_id = :node_id
    
      
} 
 ------------ 
      
	update site_nodes
	   set object_id = null
	 where node_id = :node_id
    
       
b(update_site_nodes):[db_dml]
 {

      
	update site_nodes
	   set object_id = :package_id
	 where node_id = :node_id
    
      
} 
 ------------ 
      
	update site_nodes
	   set object_id = :package_id
	 where node_id = :node_id
    
       
b(get_context):[db_0or1row]
 {

      
        select object_id as context_id
          from site_nodes 
         where node_id = :parent_node_id
    
      
} 
 ------------ 
      
        select object_id as context_id
          from site_nodes 
         where node_id = :parent_node_id
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/community-core-procs.tcl####################
b(user_select):[db_string]
 {

      
	select user_id from cc_users where upper(screen_name) = upper(:screen_name)
    
      
} 
 ------------ 
      
	select user_id from cc_users where upper(screen_name) = upper(:screen_name)
    
       
b(email_from_party):[db_string]
 {

      
	select email from parties where party_id = :party_id
    
      
} 
 ------------ 
      
	select email from parties where party_id = :party_id
    
       
b(group_select):[db_string]
 {

      
	select group_id from groups where group_name = :name
    
      
} 
 ------------ 
      
	select group_id from groups where group_name = :name
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/acs-permissions-procs.tcl####################
b(n_privs):[db_string]
 {

      
      select count(*)
        from acs_privileges
       where privilege = :privilege
  
      
} 
 ------------ 
      
      select count(*)
        from acs_privileges
       where privilege = :privilege
  
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/security-procs.tcl####################
q(sql_test_1):[db_string]
 "select test_sql('select 1 from dual where 1=[DoubleApos $value]') from dual" 
 ------------ 
      select test_sql('select 1  where 1=[DoubleApos $value]') 
       
q(sql_test_2):[db_string]
 "select test_sql('select 1 from dual where 1=[DoubleApos " 
 ------------ 
      select test_sql('select 1  where 1=[DoubleApos "'$value'"]') 
       
b(insert_random_token):[db_dml]
 {
	    insert /*+ APPEND */ into secret_tokens(token_id, token, timestamp)
	    values(sec_security_token_id_seq.nextval, :random_token, sysdate)
	} 
 ------------ 

	    insert into secret_tokens(token_id, token, token_timestamp)
	    values(sec_security_token_id_seq.nextval, :random_token, now())
	
       
b(get_secret_tokens):[db_foreach]
 {
	    select * from (
	    select token_id, token
	    from secret_tokens
	    sample(15)
	    ) where rownum < :num_tokens
	} 
 ------------ 
      
    select token_id, token
    from secret_tokens,
         (select trunc(random()*(select count(*)-15 from secret_tokens))::integer as first) r
    where token_id >= r.first and r.first+15 > token_id;
	
       
b(update_last_visit):[db_dml]
 {
        update users
        set second_to_last_visit = last_visit,
            last_visit = sysdate,
            n_sessions = n_sessions + 1
        where user_id = :user_id
    } 
 ------------ 

        update users
        set second_to_last_visit = last_visit,
            last_visit = now(),
            n_sessions = n_sessions + 1
        where user_id = :user_id
    
       
b(prop_update_dml):[db_dml]
 {

	insert into sec_session_properties
	  (session_id, module, property_name, secure_p, last_hit)
	select :session_id, :module, :name, :secure, :last_hit
        from dual
        where not exists (select 1
                          from sec_session_properties
                          where session_id = :session_id and
                          module = :module and
                          property_name = :name)
      
} 
 ------------ 
        update sec_session_properties
        set property_value = :value,
          secure_p = :secure,
          last_hit = :last_hit 
        where session_id = :session_id and
          module = :module and
          property_name = :name
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/apm-file-procs.tcl####################
b(distribution_tar_ball_select):[db_blob_get_file]
 {
                 select content 
                   from cr_revisions 
                  where revision_id = (select content_item.get_latest_revision(item_id)
                                         from apm_package_versions 
                                         where version_id = :version_id)
                 } 
 ------------ 

   select '[cr_fs_path]' || r.content as content, i.storage_type
     from cr_revisions r, cr_items i
    where r.item_id = i.item_id
      and r.revision_id = (select content_item__get_latest_revision(item_id)
                             from apm_package_versions 
                            where version_id = :version_id)

       
v(create_item):[db_exec_plsql]
 $create_item 
 ------------ 

select content_item__new(
         varchar :name,
         null,
         null,
         null,
         now(),
         null,
         null,
         :creation_ip,
         'content_item',
         'content_revision',
         null,
         null,
         'text/plain',
         null,
         null,
         'file'
         )

       
b(update_tarball):[db_dml]
 {update cr_revisions
                              set content = empty_blob()
                            where revision_id = :revision_id
                        returning content into :1} 
 ------------ 

    update cr_revisions
    set content = '[set content_file [cr_create_content_file $item_id $revision_id $tmpfile]]'
    where revision_id = :revision_id

       
b(apm_file_remove):[db_t]
 {
	begin
	apm_package_version.remove_file(
				path => :path,
				version_id => :version_id
				);
	end;
    } 
 ------------ 

	select apm_package_version__remove_file(
				:version_id,
				:path
				)
    
       
b(apm_file_add):[db_t]
 {
	begin
	:1 := apm_package_version.add_file(
		file_id => :file_id,
		version_id => :version_id,
		path => :path,
		file_type => :file_type,
                db_type => :db_type
		);
	end;
    } 
 ------------ 

	select apm_package_version__add_file(
		:file_id,
		:version_id,
		:path,
		:file_type,
                :db_type
		)
    
       
b(update_content_length):[db_dml]
 {
                update apm_package_versions
                   set content_length = (select dbms_lob.getlength(content)
                                           from cr_revisons
                                          where revision_id = :revision_id)
                 where version_id = :version_id
                } 
 ------------ 

                update apm_package_versions
                set content_length = [cr_file_size $content_file]
                where version_id = :version_id

       
v(create_revision):[db_exec_plsql]
 $create_revision 
 ------------ 

  declare
        v_revision_id      integer;
  begin

  v_revision_id := content_revision__new(
                                       :title,
                                       'gzipped tarfile',
                                       now(),
                                       'text/plain',
                                       null,
                                       'not_important',
                                       :item_id,
                                       null,
                                       now(),
                                       :user_id,
                                       :creation_ip
                                       );

  update cr_items
  set live_revision = v_revision_id
  where item_id = :item_id;

  return v_revision_id;

  end;

       
FILE:#############################################d:/projects/portable.nsd/op
not well-formed at line 15, column 32, byte 580 at D:/Perl/site/lib/XML/Parser.pm line 168
enacs-4/packages/acs-tcl/tcl/object-procs.tcl####################
b(object_name_get):[db_exec_plsql]
 {
	begin :1 := acs_object.name(:object_id); end;
    } 
 ------------ 

        select acs_object__name(:object_id); 
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/defs-procs.tcl####################
b(query_string_record):[db_dml]
 {
	insert into query_strings 
	(query_date, query_string, subsection, n_results, user_id) values
	(sysdate, :query_string, :subsection, :n_results, :user_id)
    } 
 ------------ 

	insert into query_strings 
	(query_date, query_string, subsection, n_results, user_id) values
	(now(), :query_string, :subsection, :n_results, :user_id)
    
       
b(ad_parameter_set):[db_exec_plsql]
 {
		begin
		  apm.set_value(
			  package_id => :package_id,
			  parameter_name => :name,
			  attr_value => :set
			);
		end;
	    } 
 ------------ 

		  select apm__set_value(
			  :package_id,
			  :name,
			  :set
			);
	    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/request-processor-procs.tcl####################
b(root_get):[db_1row]
 {
           select site_node.url(:node_id) as url
           from dual
       } 
 ------------ 
      
	select site_node__url(:node_id) as url
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-tcl/tcl/object-type-procs.tcl####################

d:\projects\ms_oacs\xql_parser>perl xparse.pl 
perl xparse.pl 
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/attributes/enum-add-2.tcl####################
b(select_max_sort_order):[db_string]
 {
    select nvl(max(v.sort_order),0)
      from acs_enum_values v
     where v.attribute_id = :attribute_id
} 
 ------------ 
      
    select coalesce(max(v.sort_order),0)
      from acs_enum_values v
     where v.attribute_id = :attribute_id

       
b(delete_enum_value):[db_dml]
 {
		delete from acs_enum_values 
		 where attribute_id = :attribute_id 
		   and sort_order = :sort_order
	    } 
 ------------ 
      
		delete from acs_enum_values 
		 where attribute_id = :attribute_id 
		   and sort_order = :sort_order
	    
       
b(update_enum_value):[db_dml]
 {
		update acs_enum_values v
		   set v.pretty_name = :pretty_name
		 where v.attribute_id = :attribute_id
		   and v.sort_order = :sort_order
	    } 
 ------------ 
      
		update acs_enum_values
		   set pretty_name = :pretty_name
		 where attribute_id = :attribute_id
		   and sort_order = :sort_order
	    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-segments/constraints/index.tcl####################
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/mapping-remove.tcl####################
b(select_info):[db_0or1row]
 {
    select g.rel_type, g.group_type, 
           t.pretty_name as rel_pretty_name, t2.pretty_name as group_type_pretty_name
      from acs_object_types t, acs_object_types t2, group_type_rels g
     where g.group_rel_type_id = :group_rel_type_id
       and t.object_type = g.rel_type
       and t2.object_type = g.group_type
} 
 ------------ 
      
    select g.rel_type, g.group_type, 
           t.pretty_name as rel_pretty_name, t2.pretty_name as group_type_pretty_name
      from acs_object_types t, acs_object_types t2, group_type_rels g
     where g.group_rel_type_id = :group_rel_type_id
       and t.object_type = g.rel_type
       and t2.object_type = g.group_type

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/users/new.tcl####################
b(group_info):[db_1row]
 {
    select group_name as add_to_group_name, 
           join_policy as add_to_group_join_policy
    from groups
    where group_id = :add_to_group_id
} 
 ------------ 
      
    select group_name as add_to_group_name, 
           join_policy as add_to_group_join_policy
    from groups
    where group_id = :add_to_group_id

       
b(creation_name_query):[db_string]
 {
	    select p.first_names || ' ' || p.last_name 
	              || ' (' || pa.email || ')'
            from persons p, parties pa
            where p.person_id = pa.party_id and p.person_id = :creation_user
	    } 
 ------------ 
      
	    select p.first_names || ' ' || p.last_name 
	              || ' (' || pa.email || ')'
            from persons p, parties pa
            where p.person_id = pa.party_id and p.person_id = :creation_user
	    
       
b(select_type_info):[db_1row]
 {
    select t.pretty_name as user_type_pretty_name,
           t.table_name
      from acs_object_types t
     where t.object_type = :user_type
} 
 ------------ 
      
    select t.pretty_name as user_type_pretty_name,
           t.table_name
      from acs_object_types t
     where t.object_type = :user_type

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/attributes/add.tcl####################
b(object_pretty_name):[db_string]
 {
    select t.pretty_name 
      from acs_object_types t
     where t.object_type = :object_type
} 
 ------------ 
      
    select t.pretty_name 
      from acs_object_types t
     where t.object_type = :object_type

       
b(select_datatypes):[db_foreach]
 {
    select d.datatype
      from acs_datatypes d
     order by lower(d.datatype)
} 
 ------------ 
      
    select d.datatype
      from acs_datatypes d
     order by lower(d.datatype)

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/roles/edit.tcl####################
b(select_role_props):[db_1row]
 {
    select r.pretty_name, r.pretty_plural
      from acs_rel_roles r 
     where r.role = :role
} 
 ------------ 
      
    select r.pretty_name, r.pretty_plural
      from acs_rel_roles r 
     where r.role = :role

       
b(update_role):[db_dml]
 {
	update acs_rel_roles r
	   set r.pretty_name = :pretty_name,
	       r.pretty_plural = :pretty_plural
	 where r.role = :role
    } 
 ------------ 
      
	update acs_rel_roles r
	   set r.pretty_name = :pretty_name,
	       r.pretty_plural = :pretty_plural
	 where r.role = :role
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/group-types/change-join-policy-2.tcl####################
b(set_default_join_policy):[db_dml]
 {
	insert into group_types
	(group_type, default_join_policy)
	values
	(:group_type, :default_join_policy)
    } 
 ------------ 
      
	insert into group_types
	(group_type, default_join_policy)
	values
	(:group_type, :default_join_policy)
    
       
b(select_pretty_name):[db_0or1row]
 {
    select t.dynamic_p,
           decode(gt.group_type, null, 0, 1) as group_type_exists_p
      from acs_object_types t, group_types gt
     where t.object_type = :group_type
       and t.object_type = gt.group_type(+)
} 
 ------------ 

    select t.dynamic_p,
           case when gt.group_type = null then 0 else 1 end as group_type_exists_p
      from acs_object_types t left outer join group_types gt on (t.object_type = gt.group_type)
     where t.object_type = :group_type

       
b(update_join_policy):[db_dml]
 {
	update group_types
	set default_join_policy = :default_join_policy
	where group_type = :group_type
    } 
 ------------ 
      
	update group_types
	set default_join_policy = :default_join_policy
	where group_type = :group_type
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/host-node-map/index.tcl####################
b(node_list):[db_foreach]
 {
    select name, node_id
    from site_nodes
} 
 ------------ 

          select name, node_id
	  from site_nodes
      
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/one.tcl####################
b(select_pretty_name):[db_0or1row]
 {
    select t.pretty_name as rel_type_pretty_name, t.table_name, t.id_column, t.dynamic_p
      from acs_object_types t
     where t.object_type = :rel_type
} 
 ------------ 
      
    select t.pretty_name as rel_type_pretty_name, t.table_name, t.id_column, t.dynamic_p
      from acs_object_types t
     where t.object_type = :rel_type

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-segments/delete-2.tcl####################
b(select_group_id):[db_string]
 {
	    select s.group_id from rel_segments s where s.segment_id = :segment_id
	} 
 ------------ 
      
	    select s.group_id from rel_segments s where s.segment_id = :segment_id
	
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/user/portrait/upload-2.tcl####################
q(update_image_info):[db_dml]
 "
	    update images
	    set width = :original_width, height = :original_height
	    where image_id = :revision_id" 
 ------------ 

	update images
	set width = :original_width, height = :original_height
	where image_id = :revision_id

         
q(get_item_id):[db_0or1row]
 "select object_id_two as item_id
from acs_rels
where object_id_one = :user_id
and rel_type = 'user_portrait_rel'" 
 ------------ 

        select object_id_two as item_id
        from acs_rels
        where object_id_one = :user_id
        and rel_type = 'user_portrait_rel'

         
v(upload_image_info):[db_dml]
 $upload_image_info 
 ------------ 

                insert into images
                (image_id, width, height)
                values
                (:revision_id, :original_width, :original_height)

         
q(get_revision_id):[db_0or1row]
 "select live_revision as revision_id
    from cr_items
    where item_id = :item_id" 
 ------------ 

        select live_revision as revision_id
        from cr_items
        where item_id = :item_id

         
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/roles/new.tcl####################
b(role_exists_p):[db_string]
 {
	select count(r.role) from acs_rel_roles r where r.role = :role
    } 
 ------------ 
      
	select count(r.role) from acs_rel_roles r where r.role = :role
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/tcl/rel-types-procs.tcl####################
b(insert_rel_type):[db_dml]
 {} 
 ------------ 
insert into group_type_rels
(group_rel_type_id, group_type, rel_type)
values
(acs_object_id_seq.nextval, :group_type, :rel_type)
 
b(delete_rel_type):[db_dml]
 {

insert into group_type_rels
(group_rel_type_id, group_type, rel_type)
values
(acs_object_id_seq.nextval, :group_type, :rel_type)

} 
 ------------ 
delete from group_type_rels
where group_type= :group_type
and rel_type= :rel_type
 
b(update_type):[db_dml]
 {FOO} 
 ------------ 
update acs_object_types set dynamic_p='t' where object_type = :rel_type
 
b(parent_rel_type):[db_0or1row]
 {
	    select table_name as references_table,
	           id_column as references_column
	      from acs_object_types
	     where object_type=:supertype
	} 
 ------------ 
      
	    select table_name as references_table,
	           id_column as references_column
	      from acs_object_types
	     where object_type=:supertype
	
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/group-types/rel-type-remove.tcl####################
b(select_info):[db_0or1row]
 {
    select g.rel_type, g.group_type, 
           t.pretty_name as rel_pretty_name, t2.pretty_name as group_type_pretty_name
      from acs_object_types t, acs_object_types t2, group_type_rels g
     where g.group_rel_type_id = :group_rel_type_id
       and t.object_type = g.rel_type
       and t2.object_type = g.group_type
} 
 ------------ 
      
    select g.rel_type, g.group_type, 
           t.pretty_name as rel_pretty_name, t2.pretty_name as group_type_pretty_name
      from acs_object_types t, acs_object_types t2, group_type_rels g
     where g.group_rel_type_id = :group_rel_type_id
       and t.object_type = g.rel_type
       and t2.object_type = g.group_type

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-segments/constraints/delete.tcl####################
b(select_constraint_props):[db_0or1row]
 {
    select c.constraint_name, s.segment_name
      from rel_constraints c, application_group_segments s,
           application_group_segments s2
     where c.rel_segment = s.segment_id
       and c.constraint_id = :constraint_id
       and s.package_id = :package_id
       and s2.segment_id = c.required_rel_segment
       and s2.package_id = :package_id
} 
 ------------ 
      
    select c.constraint_name, s.segment_name
      from rel_constraints c, application_group_segments s,
           application_group_segments s2
     where c.rel_segment = s.segment_id
       and c.constraint_id = :constraint_id
       and s.package_id = :package_id
       and s2.segment_id = c.required_rel_segment
       and s2.package_id = :package_id

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/register/user-new-2.tcl####################
q(user_exists):[db_string]
 "select count(*) from registered_users where user_id = :user_id" 
 ------------ 
      select count(*) from registered_users where user_id = :user_id
       
FILE:######
not well-formed at line 14, column 84, byte 378 at D:/Perl/site/lib/XML/Parser.pm line 168
###########################################################

d:\projects\ms_oacs\xql_parser>perl xparse.pl 
perl xparse.pl 
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/attributes/enum-add-2.tcl####################
b(select_max_sort_order):[db_string]
 {

      
    select coalesce(max(v.sort_order),0)
      from acs_enum_values v
     where v.attribute_id = :attribute_id

      
} 
 ------------ 
      
    select coalesce(max(v.sort_order),0)
      from acs_enum_values v
     where v.attribute_id = :attribute_id

       
b(delete_enum_value):[db_dml]
 {

      
		delete from acs_enum_values 
		 where attribute_id = :attribute_id 
		   and sort_order = :sort_order
	    
      
} 
 ------------ 
      
		delete from acs_enum_values 
		 where attribute_id = :attribute_id 
		   and sort_order = :sort_order
	    
       
b(update_enum_value):[db_dml]
 {

      
		update acs_enum_values
		   set pretty_name = :pretty_name
		 where attribute_id = :attribute_id
		   and sort_order = :sort_order
	    
      
} 
 ------------ 
      
		update acs_enum_values
		   set pretty_name = :pretty_name
		 where attribute_id = :attribute_id
		   and sort_order = :sort_order
	    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-segments/constraints/index.tcl####################
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/mapping-remove.tcl####################
b(select_info):[db_0or1row]
 {

      
    select g.rel_type, g.group_type, 
           t.pretty_name as rel_pretty_name, t2.pretty_name as group_type_pretty_name
      from acs_object_types t, acs_object_types t2, group_type_rels g
     where g.group_rel_type_id = :group_rel_type_id
       and t.object_type = g.rel_type
       and t2.object_type = g.group_type

      
} 
 ------------ 
      
    select g.rel_type, g.group_type, 
           t.pretty_name as rel_pretty_name, t2.pretty_name as group_type_pretty_name
      from acs_object_types t, acs_object_types t2, group_type_rels g
     where g.group_rel_type_id = :group_rel_type_id
       and t.object_type = g.rel_type
       and t2.object_type = g.group_type

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/users/new.tcl####################
b(group_info):[db_1row]
 {

      
    select group_name as add_to_group_name, 
           join_policy as add_to_group_join_policy
    from groups
    where group_id = :add_to_group_id

      
} 
 ------------ 
      
    select group_name as add_to_group_name, 
           join_policy as add_to_group_join_policy
    from groups
    where group_id = :add_to_group_id

       
b(creation_name_query):[db_string]
 {

      
	    select p.first_names || ' ' || p.last_name 
	              || ' (' || pa.email || ')'
            from persons p, parties pa
            where p.person_id = pa.party_id and p.person_id = :creation_user
	    
      
} 
 ------------ 
      
	    select p.first_names || ' ' || p.last_name 
	              || ' (' || pa.email || ')'
            from persons p, parties pa
            where p.person_id = pa.party_id and p.person_id = :creation_user
	    
       
b(select_type_info):[db_1row]
 {

      
    select t.pretty_name as user_type_pretty_name,
           t.table_name
      from acs_object_types t
     where t.object_type = :user_type

      
} 
 ------------ 
      
    select t.pretty_name as user_type_pretty_name,
           t.table_name
      from acs_object_types t
     where t.object_type = :user_type

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/attributes/add.tcl####################
b(object_pretty_name):[db_string]
 {

      
    select t.pretty_name 
      from acs_object_types t
     where t.object_type = :object_type

      
} 
 ------------ 
      
    select t.pretty_name 
      from acs_object_types t
     where t.object_type = :object_type

       
b(select_datatypes):[db_foreach]
 {

      
    select d.datatype
      from acs_datatypes d
     order by lower(d.datatype)

      
} 
 ------------ 
      
    select d.datatype
      from acs_datatypes d
     order by lower(d.datatype)

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/roles/edit.tcl####################
b(select_role_props):[db_1row]
 {

      
    select r.pretty_name, r.pretty_plural
      from acs_rel_roles r 
     where r.role = :role

      
} 
 ------------ 
      
    select r.pretty_name, r.pretty_plural
      from acs_rel_roles r 
     where r.role = :role

       
b(update_role):[db_dml]
 {

      
	update acs_rel_roles r
	   set r.pretty_name = :pretty_name,
	       r.pretty_plural = :pretty_plural
	 where r.role = :role
    
      
} 
 ------------ 
      
	update acs_rel_roles r
	   set r.pretty_name = :pretty_name,
	       r.pretty_plural = :pretty_plural
	 where r.role = :role
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/group-types/change-join-policy-2.tcl####################
b(set_default_join_policy):[db_dml]
 {

      
	insert into group_types
	(group_type, default_join_policy)
	values
	(:group_type, :default_join_policy)
    
      
} 
 ------------ 
      
	insert into group_types
	(group_type, default_join_policy)
	values
	(:group_type, :default_join_policy)
    
       
b(select_pretty_name):[db_0or1row]
 {


    select t.dynamic_p,
           case when gt.group_type = null then 0 else 1 end as group_type_exists_p
      from acs_object_types t left outer join group_types gt on (t.object_type = gt.group_type)
     where t.object_type = :group_type

      
} 
 ------------ 

    select t.dynamic_p,
           case when gt.group_type = null then 0 else 1 end as group_type_exists_p
      from acs_object_types t left outer join group_types gt on (t.object_type = gt.group_type)
     where t.object_type = :group_type

       
b(update_join_policy):[db_dml]
 {

      
	update group_types
	set default_join_policy = :default_join_policy
	where group_type = :group_type
    
      
} 
 ------------ 
      
	update group_types
	set default_join_policy = :default_join_policy
	where group_type = :group_type
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/host-node-map/index.tcl####################
b(node_list):[db_foreach]
 {


          select name, node_id
	  from site_nodes
      
      
} 
 ------------ 

          select name, node_id
	  from site_nodes
      
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/one.tcl####################
b(select_pretty_name):[db_0or1row]
 {

      
    select t.pretty_name as rel_type_pretty_name, t.table_name, t.id_column, t.dynamic_p
      from acs_object_types t
     where t.object_type = :rel_type

      
} 
 ------------ 
      
    select t.pretty_name as rel_type_pretty_name, t.table_name, t.id_column, t.dynamic_p
      from acs_object_types t
     where t.object_type = :rel_type

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-segments/delete-2.tcl####################
b(select_group_id):[db_string]
 {

      
	    select s.group_id from rel_segments s where s.segment_id = :segment_id
	
      
} 
 ------------ 
      
	    select s.group_id from rel_segments s where s.segment_id = :segment_id
	
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/user/portrait/upload-2.tcl####################
b(update_image_info):[db_dml]
 {


	update images
	set width = :original_width, height = :original_height
	where image_id = :revision_id

        
} 
 ------------ 

	update images
	set width = :original_width, height = :original_height
	where image_id = :revision_id

         
b(get_item_id):[db_0or1row]
 {


        select object_id_two as item_id
        from acs_rels
        where object_id_one = :user_id
        and rel_type = 'user_portrait_rel'

        
} 
 ------------ 

        select object_id_two as item_id
        from acs_rels
        where object_id_one = :user_id
        and rel_type = 'user_portrait_rel'

         
b(upload_image_info):[db_dml]
 {


                insert into images
                (image_id, width, height)
                values
                (:revision_id, :original_width, :original_height)

        
} 
 ------------ 

                insert into images
                (image_id, width, height)
                values
                (:revision_id, :original_width, :original_height)

         
b(get_revision_id):[db_0or1row]
 {


        select live_revision as revision_id
        from cr_items
        where item_id = :item_id

        
} 
 ------------ 

        select live_revision as revision_id
        from cr_items
        where item_id = :item_id

         
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/roles/new.tcl####################
b(role_exists_p):[db_string]
 {

      
	select count(r.role) from acs_rel_roles r where r.role = :role
    
      
} 
 ------------ 
      
	select count(r.role) from acs_rel_roles r where r.role = :role
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/tcl/rel-types-procs.tcl####################
b(insert_rel_type):[db_dml]
 {

delete from group_type_rels
where group_type= :group_type
and rel_type= :rel_type

} 
 ------------ 
insert into group_type_rels
(group_rel_type_id, group_type, rel_type)
values
(acs_object_id_seq.nextval, :group_type, :rel_type)
 
b(delete_rel_type):[db_dml]
 {

insert into group_type_rels
(group_rel_type_id, group_type, rel_type)
values
(acs_object_id_seq.nextval, :group_type, :rel_type)

} 
 ------------ 
delete from group_type_rels
where group_type= :group_type
and rel_type= :rel_type
 
b(update_type):[db_dml]
 {

update acs_object_types set dynamic_p='t' where object_type = :rel_type

} 
 ------------ 
update acs_object_types set dynamic_p='t' where object_type = :rel_type
 
b(parent_rel_type):[db_0or1row]
 {

      
	    select table_name as references_table,
	           id_column as references_column
	      from acs_object_types
	     where object_type=:supertype
	
      
} 
 ------------ 
      
	    select table_name as references_table,
	           id_column as references_column
	      from acs_object_types
	     where object_type=:supertype
	
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/group-types/rel-type-remove.tcl####################
b(select_info):[db_0or1row]
 {

      
    select g.rel_type, g.group_type, 
           t.pretty_name as rel_pretty_name, t2.pretty_name as group_type_pretty_name
      from acs_object_types t, acs_object_types t2, group_type_rels g
     where g.group_rel_type_id = :group_rel_type_id
       and t.object_type = g.rel_type
       and t2.object_type = g.group_type

      
} 
 ------------ 
      
    select g.rel_type, g.group_type, 
           t.pretty_name as rel_pretty_name, t2.pretty_name as group_type_pretty_name
      from acs_object_types t, acs_object_types t2, group_type_rels g
     where g.group_rel_type_id = :group_rel_type_id
       and t.object_type = g.rel_type
       and t2.object_type = g.group_type

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-segments/constraints/delete.tcl####################
b(select_constraint_props):[db_0or1row]
 {

      
    select c.constraint_name, s.segment_name
      from rel_constraints c, application_group_segments s,
           application_group_segments s2
     where c.rel_segment = s.segment_id
       and c.constraint_id = :constraint_id
       and s.package_id = :package_id
       and s2.segment_id = c.required_rel_segment
       and s2.package_id = :package_id

      
} 
 ------------ 
      
    select c.constraint_name, s.segment_name
      from rel_constraints c, application_group_segments s,
           application_group_segments s2
     where c.rel_segment = s.segment_id
       and c.constraint_id = :constraint_id
       and s.package_id = :package_id
       and s2.segment_id = c.required_rel_segment
       and s2.package_id = :package_id

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/register/user-new-2.tcl####################
b(user_exists):[db_string]
 {

      select count(*) from registered_users where user_id = :user_id
      
} 
 ------------ 
      select count(*) from registered_users where user_id = :user_id
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/user/basic-info-update-2.tcl####################
Parse Error: 
not well-formed at line 14, column 84, byte 378 at D:/Perl/site/lib/XML/Parser.pm line 168

FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/delete.tcl####################
b(select_subtypes):[db_foreach]
 {
	select t.object_type as rel_type, t.pretty_name
          from acs_object_types t
         where t.supertype = :rel_type
    } 
 ------------ 
      
	select t.object_type as rel_type, t.pretty_name
          from acs_object_types t
         where t.supertype = :rel_type
    
       
b(select_pretty_name):[db_string]
 {
    select t.pretty_name
      from acs_object_types t
     where t.object_type = :rel_type
} 
 ------------ 
      
    select t.pretty_name
      from acs_object_types t
     where t.object_type = :rel_type

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/tcl/subsite-procs.tcl####################
b(parent_subsite_query):[db_0or1row]
 {
		select m.group_id as supersite_group_id,
                       p.instance_name as supersite_name
		from application_group_element_map m,
                     apm_packages p
		where p.package_id = m.package_id
                  and container_id = group_id
                  and element_id = :subsite_group_id
                  and rel_type = 'composition_rel'
	    } 
 ------------ 
      
		select m.group_id as supersite_group_id,
                       p.instance_name as supersite_name
		from application_group_element_map m,
                     apm_packages p
		where p.package_id = m.package_id
                  and container_id = group_id
                  and element_id = :subsite_group_id
                  and rel_type = 'composition_rel'
	    
       
b(subsite_name_query):[db_string]
 {
	    select instance_name
	    from apm_packages
	    where package_id = :package_id
	} 
 ------------ 
      
	    select instance_name
	    from apm_packages
	    where package_id = :package_id
	
       
b(select_pretty_name):[db_string]
 {
	select pretty_name from acs_object_types 
	where object_type = :object_type
    } 
 ------------ 
      
	select pretty_name from acs_object_types 
	where object_type = :object_type
    
       
b(select_name_exists_p):[db_string]
 {
	select count(*) 
	  from site_nodes
	 where parent_id = :node_id
	   and name = :instance_name
    } 
 ------------ 
      
	select count(*) 
	  from site_nodes
	 where parent_id = :node_id
	   and name = :instance_name
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/roles/delete.tcl####################
b(select_role_pretty_name):[db_string]
 {
    select r.pretty_name from acs_rel_roles r where r.role = :role
} 
 ------------ 
      
    select r.pretty_name from acs_rel_roles r where r.role = :role

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/tcl/group-type-procs.tcl####################
b(insert_group_type):[db_dml]
 {} 
 ------------ 
		insert into group_types (group_type) values (:group_type)
	 
b(supertype_table_column):[db_1row]
 {
	    select t.table_name as references_table,
                   t.id_column as references_column
  	      from acs_object_types t
	     where t.object_type = :supertype
	} 
 ------------ 
      
	    select t.table_name as references_table,
                   t.id_column as references_column
  	      from acs_object_types t
	     where t.object_type = :supertype
	
       
b(select_group_id_column):[db_string]
 {
	    select upper(id_column) from acs_object_types where object_type='group'
	} 
 ------------ 
      
	    select upper(id_column) from acs_object_types where object_type='group'
	
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/group-types/change-join-policy.tcl####################
b(select_pretty_name):[db_0or1row]
 {
    select t.pretty_name as group_type_pretty_name, t.dynamic_p,
           nvl(gt.default_join_policy, 'open') as default_join_policy
      from acs_object_types t, group_types gt
     where t.object_type = :group_type
       and t.object_type = gt.group_type(+)
} 
 ------------ 

    select t.pretty_name as group_type_pretty_name, t.dynamic_p,
           coalesce(gt.default_join_policy, 'open') as default_join_policy
      from acs_object_types t left outer join group_types gt on (t.object_type = gt.group_type)
     where t.object_type = :group_type

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/site-map/package-new.tcl####################
b(package_new_doubleclick_ck):[db_string]
 {
	select decode(count(*), 0, 0, 1) 
 	from apm_packages
	where package_id = :new_package_id
    } 
 ------------ 
      
	select case when count(*) = 0 then 0 else 1 end 
 	from apm_packages
	where package_id = :new_package_id
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/new-2.tcl####################
b(select_object_types):[db_l]
 {
    select r.object_type_one as max_object_type_one, 
           r.object_type_two as max_object_type_two,
           t.pretty_name as supertype_pretty_name,
           r.role_one as supertype_role_one, r.role_two as supertype_role_two,
           r.min_n_rels_one as supertype_min_n_rels_one,
           r.max_n_rels_one as supertype_max_n_rels_one,
           r.min_n_rels_two as supertype_min_n_rels_two,
           r.max_n_rels_two as supertype_max_n_rels_two
      from acs_object_types t, acs_rel_types r
     where r.rel_type = :supertype
       and r.rel_type = t.object_type
} 
 ------------ 
      
    select r.object_type_one as max_object_type_one, 
           r.object_type_two as max_object_type_two,
           t.pretty_name as supertype_pretty_name,
           r.role_one as supertype_role_one, r.role_two as supertype_role_two,
           r.min_n_rels_one as supertype_min_n_rels_one,
           r.max_n_rels_one as supertype_max_n_rels_one,
           r.min_n_rels_two as supertype_min_n_rels_two,
           r.max_n_rels_two as supertype_max_n_rels_two
      from acs_object_types t, acs_rel_types r
     where r.rel_type = :supertype
       and r.rel_type = t.object_type

       
b(select_roles):[db_list_of_lists]
 {
    select r.pretty_name, r.role
      from acs_rel_roles r
     order by lower(r.role)
} 
 ------------ 
      
    select r.pretty_name, r.role
      from acs_rel_roles r
     order by lower(r.role)

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/site-map/mount-2.tcl####################
b(mount):[db_dml]
 {
    update site_nodes
    set object_id = :package_id
    where node_id = :node_id
    and object_id is null
  } 
 ------------ 
      
    update site_nodes
    set object_id = :package_id
    where node_id = :node_id
    and object_id is null
  
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/tcl/package-procs.tcl####################
b(select_type_info):[db_1row]
 {
	select t.package_name
	  from acs_object_types t 
	 where t.object_type = :object_type
    } 
 ------------ 

	select t.table_name, t.id_column
          from acs_object_types t
	 where t.object_type = :object_type
	
       
b(select_package_name):[db_string]
 {
	select t.package_name
	  from acs_object_types t
	 where t.object_type = :object_type
    } 
 ------------ 
      
	select t.package_name
	  from acs_object_types t
	 where t.object_type = :object_type
    
       
b(select_type_info):[db_1row]
 {


	select t.table_name, t.id_column
          from acs_object_types t
	 where t.object_type = :object_type
	
      
} 
 ------------ 
      
	select t.table_name, t.id_column, lower(t.package_name) as package_name, t.supertype
	  from acs_object_types t
	 where t.object_type = :object_type
    
       
b(package_select):[db_0or1row]
 {
	    select t.package_name
	      from acs_object_types t
	     where t.object_type = :object_type
	} 
 ------------ 
      
	    select t.package_name
	      from acs_object_types t
	     where t.object_type = :object_type
	
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/pvt/unsubscribe.tcl####################
q(nospam):[db_0or1row]
 "select dont_spam_me_p
from user_preferences
where user_id = :user_id" 
 ------------ 
      select dont_spam_me_p
from user_preferences
where user_id = :user_id
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/register/awaiting-email-verification.tcl####################
q(register_member_state_authorized_set):[db_dml]
 "update users set 
email_verified_p = 't'
where user_id = :user_id" 
 ------------ 
      update users set 
email_verified_p = 't'
where user_id = :user_id
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/pvt/home.tcl####################
Parse Error: 
not well-formed at line 8, column 29, byte 179 at D:/Perl/site/lib/XML/Parser.pm line 168

FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/tcl/rel-segments-procs.tcl####################
b(select_dependant_constraints):[db_foreach]
 {
	select c.constraint_id
	  from rel_constraints c
	 where c.required_rel_segment = :segment_id
    } 
 ------------ 
      
	select c.constraint_id
	  from rel_constraints c
	 where c.required_rel_segment = :segment_id
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/host-node-map/add.tcl####################
b(host_node_insert):[db_dml]
 {
    insert into host_node_map 
    (host, node_id)
    values 
    (:host, :root)
} 
 ------------ 


    insert into host_node_map 
    (host, node_id)
    values 
    (:host, :root)

     
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/permissions/grant.tcl####################
b(privileges):[db_foreach]
 {
  select privilege
  from acs_privileges
  order by privilege
} 
 ------------ 
      
  select privilege
  from acs_privileges
  order by privilege

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/attributes/edit-one.tcl####################
b(attribute_properties):[db_1row]
 {
    select a.pretty_name as attribute_pretty_name, a.datatype, a.attribute_id,
           nvl(a.column_name,a.attribute_name) as attribute_column,
           t.id_column as type_column, t.table_name as type_table, t.object_type,
           a.min_n_values
      from acs_attributes a, acs_object_types t
     where a.attribute_id = :attribute_id
       and a.object_type = t.object_type
} 
 ------------ 
      
    select a.pretty_name as attribute_pretty_name, a.datatype, a.attribute_id,
           coalesce(a.column_name,a.attribute_name) as attribute_column,
           t.id_column as type_column, t.table_name as type_table, t.object_type,
           a.mmatch found but not categorized for "attribute_update" (in d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/attributes/edit-one.tcl)  at xparse.pl line 141.
Use of uninitialized value in concatenation (.) or string at xparse.pl line 144.
Use of uninitialized value in concatenation (.) or string at xparse.pl line 144.
in_n_values
      from acs_attributes a, acs_object_types t
     where a.attribute_id = :attribute_id
       and a.object_type = t.object_type

       
 \
	    "update $type_table 
 [db_dml]
  
 ------------ 
      update $type_table 
                set $attribute_column = :attribute_value 
              where $type_column = :id_column
       
b(select_enum_values):[db_list_of_lists]
 {
	select enum.pretty_name, enum.enum_value
	  from acs_enum_values enum
	 where enum.attribute_id = :attribute_id 
	 order by enum.sort_order
    } 
 ------------ 
      
	select enum.pretty_name, enum.enum_value
	  from acs_enum_values enum
	 where enum.attribute_id = :attribute_id 
	 order by enum.sort_order
    
       
q(select_value):[db_1row]
 "
    select my_view.$attribute_column as current_value
      from ([package_object_view $object_type]) my_view
     where my_view.object_id = :id_column
" 
 ------------ 
      
    select my_view.$attribute_column as current_value
      from ([package_object_view $object_type]) my_view
     where my_view.object_id = :id_column

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/add.tcl####################
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/object-types/one.tcl####################
Parse Error: 
undefined entity at line 68, column 41, byte 1536 at D:/Perl/site/lib/XML/Parser.pm line 168

FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/attributes/enum-add.tcl####################
b(number_values):[db_string]
 {
    select count(*) 
      from acs_enum_values v
     where v.attribute_id = :attribute_id
} 
 ------------ 
      
    select count(*) 
      from acs_enum_values v
     where v.attribute_id = :attribute_id

       
b(select_attr_name):[db_1row]
 {
    select a.pretty_name as attribute_pretty_name
      from acs_attributes a
     where a.attribute_id = :attribute_id
} 
 ------------ 
      
    select a.pretty_name as attribute_pretty_name
      from acs_attributes a
     where a.attribute_id = :attribute_id

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/site-map/new.tcl####################
Parse Error: 
not well-formed at line 11, column 23, byte 291 at D:/Perl/site/lib/XML/Parser.pm line 168

FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/register/email-password-2.tcl####################
q(password_answer):[db_0]
 "select password_answer from users where user_id = :user_id" 
 ------------ 
      select password_answer from users where user_id = :user_id
       
q(users_state_authorized_or_deleted):[db_0or1row]
 "select 
email from cc_users where user_id=:user_id
-- and user_state in ('authorized','deleted')" 
 ------------ 
      select 
email from cc_users where user_id=:user_id
       
q(first_last_name):[db_0or1row]
 "select first_names db_first_names, last_name db_last_name from cc_users where user_id = $user_id" 
 ------------ 
      select first_names as db_first_names, last_name as db_last_name from cc_users where user_id = $user_id
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/register/email-password.tcl####################
q(question):[]
 "select password_question from users where user_id = :user_id" 
 ------------ 
      select password_question from users where user_id = :user_id
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/register/email-confirm.tcl####################
q(register_email_confirm_update3):[db_dml]
 "update users
                        set email_verified_p = 't'
                        where user_id = :user_id" 
 ------------ 
      update users
                        set email_verified_p = 't'
                        where user_id = :user_id
       
q(register_email_user_update):[db_dml]
 "update users 
                        set email_verified_p = 't'
                        where user_id = :user_id" 
 ------------ 
      update users 
                        set email_verified_p = 't'
                        where user_id = :user_id
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/group-types/one.tcl####################
b(select_pretty_name):[db_0or1row]
 {
    select t.pretty_name as group_type_pretty_name, t.dynamic_p,
           nvl(gt.default_join_policy, 'open') as default_join_policy
      from acs_object_types t, group_types gt
     where t.object_type = :group_type
       and t.object_type = gt.group_type(+)
} 
 ------------ 

    select t.pretty_name as group_type_pretty_name, t.dynamic_p,
           coalesce(gt.default_join_policy, 'open') as default_join_policy
      from acs_object_types t
	     left outer join group_types gt
               on (t.object_type = gt.group_type)
     where t.object_type = :group_type

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/group-types/groups-list.tcl####################
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/permissions/one.tcl####################
b(security_inherit_p):[db_f]
 {
    select security_inherit_p
    from acs_objects
    where object_id = :object_id
  } 
 ------------ 
      
    select security_inherit_p
    from acs_objects
    where object_id = :object_id
  
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/relations/one.tcl####################
b(select_member_state):[db_0or1row]
 {
    select member_state from membership_rels
    where rel_id = :rel_id
} 
 ------------ 
      
    select member_state from membership_rels
    where rel_id = :rel_id

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/tcl/group-procs.tcl####################
b(package_select):[db_0or1row]
 {
	    select t.package_name, t.object_type
	    from acs_object_types t
	    where t.object_type = (select o.object_type 
                                     from acs_objects o 
                                    where o.object_id = :group_id)
	} 
 ------------ 
      
	    select t.package_name, lower(t.id_column) as id_column
	      from acs_object_types t
	     where t.object_type = :group_type
	
       
q(group_id_from_name):[db_string]
 "
	  select group_id from groups where group_name=:group_name" 
 ------------ 
	  select group_id from groups where group_name=:group_name
       
b(select_join_policy):[db_string]
 {
	    select join_policy from groups where group_id = :group_id
	} 
 ------------ 
      
	    select join_policy from groups where group_id = :group_id
	
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/groups/rel-type-remove-2.tcl####################
b(select_group_id):[db_0or1row]
 {
    select g.group_id, g.rel_type
      from group_rels g, acs_object_types t
     where g.rel_type = t.object_type
       and g.group_rel_id = :group_rel_id
} 
 ------------ 
      
    select g.group_id, g.rel_type
      from group_rels g, acs_object_types t
     where g.rel_type = t.object_type
       and g.group_rel_id = :group_rel_id

       
b(remove_relationship_type):[db_dml]
 {
	    delete from group_rels where group_rel_id = :group_rel_id
	} 
 ------------ 
      
	    delete from group_rels where group_rel_id = :group_rel_id
	
       
b(select_segments):[db_0or1row]
 {
	    select segment_id
	      from rel_segments 
	     where group_id = :group_id
	       and rel_type = :rel_type
	} 
 ------------ 
      
	    select segment_id
	      from rel_segments 
	     where group_id = :group_id
	       and rel_type = :rel_type
	
       
b(select_rel_ids):[db_list]
 {
	select r.rel_id 
          from acs_rels r
	 where r.rel_type = :rel_type
	   and r.object_id_one = :group_id
    } 
 ------------ 
      
	select r.rel_id 
          from acs_rels r
	 where r.rel_type = :rel_type
	   and r.object_id_one = :group_id
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/groups/elements-display-list.tcl####################
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/host-node-map/delete.tcl####################
b(host_node_delete):[db_dml]
 {
    delete from host_node_map 
    where host = :host
    and node_id = :node_id
} 
 ------------ 

    delete from host_node_map 
    where host = :host
    and node_id = :node_id

     
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/register/user-new.tcl####################
q(find_person):[db_0or1row]
 "" 
 ------------ 
      select parties.party_id as user_id, persons.first_names, persons.last_name
      from parties, persons
      where parties.party_id = persons.person_id
        and parties.email = lower(:email)
    
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/add-2.tcl####################
b(update_rel_type_mapping):[db_dml]
 {
    insert into group_type_allowed_rels
    (constraint_id, group_type, rel_type)
    values
    (:constraint_id, :object_type, :rel_type)
} 
 ------------ 
      
    insert into group_type_allowed_rels
    (constraint_id, group_type, rel_type)
    values
    (:constraint_id, :object_type, :rel_type)

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/user/basic-info-update.tcl####################
q(biography):[db_string]
 "
select attr_value
from acs_attribute_values
where object_id = :user_id
and attribute_id =
   (select attribute_id
    from acs_attributes
    where object_type = 'person'
    and attribute_name = 'bio')" 
 ------------ 
      
select attr_value
from acs_attribute_values
where object_id = :user_id
and attribute_id =
   (select attribute_id
    from acs_attributes
    where object_type = 'person'
    and attribute_name = 'bio')
       
q(general_info):[db_1row]
 "select first_names, last_name, email, url, screen_name
           from cc_users 
          where user_id=:user_id" 
 ------------ 
      select first_names, last_name, email, url, screen_name
           from cc_users 
          where user_id=:user_id
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-segments/constraints/new.tcl####################
Parse Error: 
not well-formed at line 9, column 25, byte 205 at D:/Perl/site/lib/XML/Parser.pm line 168

FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-segments/new-3.tcl####################
b(select_segment_id):[db_string]
 {
	select s.segment_id
	  from rel_segments s
	 where s.group_id = :group_id
	   and s.rel_type = :rel_type
    } 
 ------------ 
      
	select s.segment_id
	  from rel_segments s
	 where s.group_id = :group_id
	   and s.rel_type = :rel_type
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/user/password-update.tcl####################
q(user_information):[db_1row]
 "select first_names, 
last_name, email, url from cc_users where user_id=:user_id" 
 ------------ 
      select first_names, 
last_name, email, url from cc_users where user_id=:user_id
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/groups/change-join-policy.tcl####################
b(group_info):[db_1row]
 {
    select g.group_name, g.join_policy
      from groups g
     where g.group_id = :group_id
} 
 ------------ 
      
    select g.group_name, g.join_policy
      from groups g
     where g.group_id = :group_id

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/group-types/rel-type-add-2.tcl####################
b(exists_p):[db_string]
 {select count(*) from group_type_rels where group_type = :group_type and rel_type = :rel_type} 
 ------------ 
      select count(*) from group_type_rels where group_type = :group_type and rel_type = :rel_type
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/parties/new.tcl####################
b(group_info):[db_1row]
 {
    select group_name as add_to_group_name, 
           join_policy as add_to_group_join_policy
    from groups
    where group_id = :add_to_group_id
} 
 ------------ 
      
    select group_name as add_to_group_name, 
           join_policy as add_to_group_join_policy
    from groups
    where group_id = :add_to_group_id

       
b(select_type_info):[db_1row]
 {
    select t.pretty_name as party_type_pretty_name,
           t.table_name
      from acs_object_types t
     where t.object_type = :party_type
} 
 ------------ 
      
    select t.pretty_name as party_type_pretty_name,
           t.table_name
      from acs_object_types t
     where t.object_type = :party_type

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/attributes/delete-2.tcl####################
b(select_object_type):[db_string]
 {
	    select attr.object_type 
	      from acs_attributes attr
	     where attr.attribute_id = :attribute_id
	} 
 ------------ 
      
	    select attr.object_type 
	      from acs_attributes attr
	     where attr.attribute_id = :attribute_id
	
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/shared/portrait-bits.tcl####################
q(get_item_id):[db_0or1row]
 "" 
 ------------ 
         select c.item_id
         from acs_rels a, cr_items c
         where a.object_id_two = c.item_id
           and a.object_id_one = :user_id
           and a.rel_type = 'user_portrait_rel'
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/register/deleted-user.tcl####################
b(register_deleted_member_state):[db_0or1row]
 {
    select member_state from cc_users where user_id = :user_id
} 
 ------------ 
      
    select member_state from cc_users where user_id = :user_id

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/register/restore-user.tcl####################
b(member_state_authorized_transistion):[db_dml]
 {
	update membership_rels
	set member_state = 'approved'  
	where rel_id = :rel_id
    } 
 ------------ 
      
	update membership_rels
	set member_state = 'approved'  
	where rel_id = :rel_id
    
       
b(user_state_info):[db_0or1row]
 {
    select member_state, email, rel_id from cc_users where user_id = :user_id
} 
 ------------ 
      
    select member_state, email, rel_id from cc_users where user_id = :user_id

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/site-map/instance-delete.tcl####################
b(instance_delete_doubleclick_ck):[db_string]
 {
	select decode(count(*), 0, 0, 1) from apm_packages
	where package_id = :package_id
    } 
 ------------ 
      
	select case when count(*) = 0 then 0 else 1 end from apm_packages
	where package_id = :package_id
    
       
b(package_mounted_p):[db_string]
 {
	    select decode(count(*),0, 0, 1) 
	    from apm_packages p, site_nodes s
	    where package_id = :package_id
	    and p.package_id = s.object_id
	} 
 ------------ 
      
	    select case when count(*) = 0 then 0 else 1 end 
	    from apm_packages p, site_nodes s
	    where package_id = :package_id
	    and p.package_id = s.object_id
	
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/relations/add.tcl####################
b(group_info):[db_1row]
 {
    select group_name, join_policy
    from groups
    where group_id = :group_id
} 
 ------------ 
      
    select group_name, join_policy
    from groups
    where group_id = :group_id

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/roles/index.tcl####################
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/register/awaiting-approval.tcl####################
q(register_member_state_authorized_set):[db_dml]
 "update membership_rels set member_state = 'approved' where rel_id = :rel_id" 
 ------------ 
      update membership_rels set member_state = 'approved' where rel_id = :rel_id
       
q(register_member_state_information):[db_0or1row]
 "select member_state, email, email_verified_p, rel_id
from cc_users where user_id = :user_id 
and  (member_state is null or member_state = 'rejected' or member_state = 'needs approval')" 
 ------------ 
      select member_state, email, email_verified_p, rel_id
from cc_users where user_id = :user_id 
and  (member_state is null or member_state = 'rejected' or member_state = 'needs approval')
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/mapping-remove-2.tcl####################
b(delete_group_type_rel_mapping):[db_dml]
 {
	delete from group_type_rels 
	 where group_type_rel_id = :group_type_rel_id
    } 
 ------------ 
      
	delete from group_type_rels 
	 where group_type_rel_id = :group_type_rel_id
    
       
b(delete_group_rel_mapping):[db_dml]
 {
	delete from group_rels 
	 where group_rel_id = :group_rel_id
    } 
 ------------ 
      
	delete from group_rels 
	 where group_rel_id = :group_rel_id
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/pvt/alerts.tcl####################
q(name_get):[db_1row]
 "select first_names, last_name, email, url from persons, parties where persons.person_id = parties.party_id and party_id =:user_id" 
 ------------ 
      select first_names, last_name, email, url from persons, parties where persons.person_id = parties.party_id and party_id =:user_id
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/rels-list.tcl####################
b(select_pretty_name):[db_0or1row]
 {
    select t.pretty_name as rel_type_pretty_name
      from acs_object_types t
     where t.object_type = :rel_type
} 
 ------------ 
      
    select t.pretty_name as rel_type_pretty_name
      from acs_object_types t
     where t.object_type = :rel_type

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/object-types/alphabetical-index.tcl####################
b(object_type_in_alphabetical_order):[db_foreach]
 {
    select object_type,
           pretty_name
      from acs_object_types
     order by lower(pretty_name)
} 
 ------------ 
      
    select object_type,
           pretty_name
      from acs_object_types
     order by lower(pretty_name)

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/groups/one.tcl####################
b(group_info):[db_1row]
 {
    select g.group_name, g.join_policy,
           o.object_type as group_type
      from groups g, acs_objects o, acs_object_types t
     where g.group_id = o.object_id
       and o.object_type = t.object_type
       and g.group_id = :group_id
} 
 ------------ 
      
    select g.group_name, g.join_policy,
           o.object_type as group_type
      from groups g, acs_objects o, acs_object_types t
     where g.group_id = o.object_id
       and o.object_type = t.object_type
       and g.group_id = :group_id

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/site-map/index.tcl####################
b(root_node):[db_1row]
 {
  select parent_id, object_id
  from site_nodes
  where node_id = :root_id
} 
 ------------ 
      
  select parent_id, object_id
  from site_nodes
  where node_id = :root_id

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/relations/change-member-state.tcl####################
b(update_member_state):[db_dml]
 {
    update membership_rels
    set member_state = :member_state
    where rel_id = :rel_id
} 
 ------------ 
      
    update membership_rels
    set member_state = :member_state
    where rel_id = :rel_id

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/attributes/delete.tcl####################
b(select_object_type):[db_1row]
 {
    select a.object_type, a.pretty_name as attribute_pretty_name
      from acs_attributes a  
     where a.attribute_id = :attribute_id
} 
 ------------ 
      
    select a.object_type, a.pretty_name as attribute_pretty_name
      from acs_attributes a  
     where a.attribute_id = :attribute_id

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/tcl/application-group-procs.tcl####################
b(group_name_query):[db_string]
 {
		select substr(instance_name, 1, 90)
		from apm_packages
		where package_id = :package_id
	    } 
 ------------ 
      
		select substr(instance_name, 1, 90)
		from apm_packages
		where package_id = :package_id
	    
       
q(parent_node_id):[db_string]
 "" 
 ------------ 
      
		select parent_id
                from site_nodes
                where object_id = :package_id
	    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/groups/rel-type-add.tcl####################
b(select_group_type):[db_1row]
 {
    select o.object_type as group_type
      from acs_objects o
     where o.object_id = :group_id
} 
 ------------ 
      
    select o.object_type as group_type
      from acs_objects o
     where o.object_id = :group_id

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/site-map/unmount.tcl####################
b(unmount):[db_dml]
 {
    update site_nodes
    set object_id = null
    where node_id = :node_id
  } 
 ------------ 
      
    update site_nodes
    set object_id = null
    where node_id = :node_id
  
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-segments/delete.tcl####################
b(select_segment_info):[db_1row]
 {
    select s.segment_name 
      from rel_segments s
     where s.segment_id = :segment_id
} 
 ------------ 
      
    select s.segment_name 
      from rel_segments s
     where s.segment_id = :segment_id

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-segments/constraints/delete-2.tcl####################
b(select_constraint_props):[db_0or1row]
 {
	select 1
        from rel_constraints c, application_group_segments s,
             application_group_segments s2
	where c.rel_segment = s.segment_id
          and c.constraint_id = :constraint_id
          and s.package_id = :package_id
          and s2.segment_id = c.required_rel_segment
          and s2.package_id = :package_id
    } 
 ------------ 
      
	select 1
        from rel_constraints c, application_group_segments s,
             application_group_segments s2
	where c.rel_segment = s.segment_id
          and c.constraint_id = :constraint_id
          and s.package_id = :package_id
          and s2.segment_id = c.required_rel_segment
          and s2.package_id = :package_id
    
       
b(select_segment_id):[db_0or1row]
 {
	    select c.rel_segment as segment_id from rel_constraints c where c.constraint_id = :constraint_id
	} 
 ------------ 
      
	    select c.rel_segment as segment_id from rel_constraints c where c.constraint_id = :constraint_id
	
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/groups/rel-type-add-2.tcl####################
b(select_group_type):[db_1row]
 {
	    select o.object_type as group_type
	      from acs_objects o
	     where o.object_id = :group_id
	} 
 ------------ 
      
	    select o.object_type as group_type
	      from acs_objects o
	     where o.object_id = :group_id
	
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/groups/index.tcl####################
b(subsite_info):[db_1row]
 {
    select ag.group_id as subsite_group_id, ap.instance_name
    from application_groups ag, apm_packages ap
    where ag.package_id = ap.package_id
      and ag.package_id = :package_id
} 
 ------------ 
      
    select ag.group_id as subsite_group_id, ap.instance_name
    from application_groups ag, apm_packages ap
    where ag.package_id = ap.package_id
      and ag.package_id = :package_id

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/tcl/attribute-procs.tcl####################
b(delete_enum_value):[db_dml]
 {
        delete from acs_enum_values v
        where v.attribute_id = :attribute_id
        and v.enum_value = :enum_value
    } 
 ------------ 
      
        delete from acs_enum_values v
        where v.attribute_id = :attribute_id
        and v.enum_value = :enum_value
    
       
b(insert_enum_value):[db_dml]
 {
	insert into acs_enum_values
	(attribute_id, sort_order, enum_value, pretty_name)
	select :attribute_id, :sort_order, :enum_value, :enum_value
	from dual
	where not exists (select 1 
	from acs_enum_values v2
	where v2.pretty_name = :enum_value
	and v2.attribute_id = :attribute_id)
    } 
 ------------ 
	insert into acs_enum_values
	(attribute_id, sort_order, enum_value, pretty_name)
	select :attribute_id, :sort_order, :enum_value, :enum_value
	from dual
	where not exists (select 1 
	from acs_enum_values v2
	where v2.pretty_name = :enum_value
	and v2.attribute_id = :attribute_id)
 
b(select_attr_info):[db_0or1row]
 {
        select a.object_type, a.attribute_name, 
               decode(a.storage,'type_specific',t.table_name,a.table_name) as table_name,
	       nvl(a.column_name, a.attribute_name) as column_name
          from acs_attributes a, acs_object_types t
         where a.attribute_id = :attribute_id
           and t.object_type = a.object_type
    } 
 ------------ 
      
        select a.object_type, a.attribute_name, 
               case when a.storage = 'type_specific' then t.table_name else a.table_name end as table_name,
	       coalesce(a.column_name, a.attribute_name) as column_name
          from acs_attributes a, acs_object_types t
         where a.attribute_id = :attribute_id
           and t.object_type = a.object_type
    
       
b(select_enum_values):[db_list_of_lists]
 {
		select enum.pretty_name, enum.enum_value
		from acs_enum_values enum
		where enum.attribute_id = :attribute_id 
		order by enum.sort_order
	    } 
 ------------ 
      
		select enum.pretty_name, enum.enum_value
		from acs_enum_values enum
		where enum.attribute_id = :attribute_id 
		order by enum.sort_order
	    
       
b(object_type_query):[db_string]
 {
	    select object_type from acs_objects where object_id = :object_id
	} 
 ------------ 
      
	    select object_type from acs_objects where object_id = :object_id
	
       
b(select_last_sort_order):[db_0or1row]
 {
        select v.sort_order as old_sort_order
          from acs_enum_values v
         where v.attribute_id = :attribute_id
           and v.enum_value = :enum_value
    } 
 ------------ 
      
        select v.sort_order as old_sort_order
          from acs_enum_values v
         where v.attribute_id = :attribute_id
           and v.enum_value = :enum_value
    
       
b(update_sort_order):[db_dml]
 {
            update acs_enum_values v
               set v.sort_order = v.sort_order - 1
             where v.attribute_id = :attribute_id
               and v.sort_order > :old_sort_order
        } 
 ------------ 
      
            update acs_enum_values v
               set v.sort_order = v.sort_order - 1
             where v.attribute_id = :attribute_id
               and v.sort_order > :old_sort_order
        
       
b(select_attribute_id):[db_string]
 {
        select a.attribute_id
          from acs_attributes a
         where a.object_type = :object_type
           and a.attribute_name = :attribute_name
    } 
 ------------ 
      
        select a.attribute_id
          from acs_attributes a
         where a.object_type = :object_type
           and a.attribute_name = :attribute_name
    
       
q(attribute_select):[db_foreach]
 "
        select * 
          from ($package_object_view) 
         where object_id = :object_id
	" 
 ------------ 
      
        select * 
          from ($package_object_view) 
         where object_id = :object_id
	
       
b(select_table):[db_0or1row]
 {
        select t.table_name
          from acs_object_types t
         where t.object_type = :object_type
    } 
 ------------ 
      
        select t.table_name
          from acs_object_types t
         where t.object_type = :object_type
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/site-map/delete.tcl####################
b(parent_select):[db_string]
 {
      select parent_id
      from site_nodes
      where node_id = :node_id
    } 
 ------------ 
      
      select parent_id
      from site_nodes
      where node_id = :node_id
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-segments/one.tcl####################
b(select_segment_info):[db_1row]
 {
    select count(*) as number_elements
      from rel_segment_party_map map, acs_object_party_privilege_map perm
     where perm.object_id = map.party_id
       and perm.party_id = :user_id
       and perm.privilege = 'read' 
       and map.segment_id = :segment_id
} 
 ------------ 
      
    select count(*) as number_elements
      from rel_segment_party_map map, acs_object_party_privilege_map perm
     where perm.object_id = map.party_id
       and perm.party_id = :user_id
       and perm.privilege = 'read' 
       and map.segment_id = :segment_id

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/register/user-join.tcl####################
b(group_info):[db_1row]
 {
    select group_name, join_policy
    from groups
    where group_id = :group_id
} 
 ------------ 
      
    select group_name, join_policy
    from groups
    where group_id = :group_id

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/tcl/subsite-callback-procs.tcl####################
b(select_object_type):[db_1row]
 {
	    select object_type
	      from acs_objects 
	     where object_id = :object_id
	} 
 ------------ 
      
	    select object_type
	      from acs_objects 
	     where object_id = :object_id
	
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/tcl/party-procs.tcl####################
b(package_select):[db_0or1row]
 {
	    select t.package_name, lower(t.id_column) as id_column
	      from acs_object_types t
	     where t.object_type = :party_type
	} 
 ------------ 
      
	    select t.package_name, lower(t.id_column) as id_column
	      from acs_object_types t
	     where t.object_type = :party_type
	
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/attributes/value-delete.tcl####################
b(select_pretty_name):[db_0or1row]
 {
    select v.pretty_name
      from acs_enum_values v
     where v.attribute_id = :attribute_id
       and v.enum_value = :enum_value
} 
 ------------ 
      
    select v.pretty_name
      from acs_enum_values vmatch found but not categorized for "enum_values" (in d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/attributes/one.tcl)  at xparse.pl line 141.
Use of uninitialized value in concatenation (.) or string at xparse.pl line 144.

     where v.attribute_id = :attribute_id
       and v.enum_value = :enum_value

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/register/banned-user.tcl####################
b(register_banned_member_state):[db_0or1row]
 {
    select member_state from cc_users 
    where user_id = :user_id } 
 ------------ 
      
    select member_state from cc_users 
    where user_id = :user_id 
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/attributes/one.tcl####################
 enum_values {
	select v.enum_[db_multirow]
  
 ------------ 
      
	select v.enum_value, v.pretty_name
	  from acs_enum_values v
	 where v.attribute_id = :attribute_id
	 order by v.sort_order
    
       
b(select_attribute_info):[db_1row]
 {
    select a.attribute_id, a.object_type, a.table_name, a.attribute_name, 
           a.pretty_name, a.pretty_plural, a.sort_order, a.datatype, 
           a.default_value, a.min_n_values, a.max_n_values, a.storage, 
           a.static_p, a.column_name, t.dynamic_p
     from acs_attributes a, acs_object_types t
    where a.object_type = t.object_type
      and a.attribute_id = :attribute_id
} 
 ------------ 
      
    select a.attribute_id, a.object_type, a.table_name, a.attribute_name, 
           a.pretty_name, a.pretty_plural, a.sort_order, a.datatype, 
           a.default_value, a.min_n_values, a.max_n_values, a.storage, 
           a.static_p, a.column_name, t.dynamic_p
     from acs_attributes a, acs_object_types t
    where a.object_type = t.object_type
      and a.attribute_id = :attribute_id

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/groups/elements-by-group-type.tcl####################
b(select_group_types):[db_foreach]
 {
    select /*+ ORDERED */ 
           t.object_type, t.pretty_name, count(g.group_id) as number_groups
      from groups g, acs_objects o, acs_object_types t,
           application_group_element_map app_group
     where o.object_id = g.group_id
       and o.object_type = t.object_type
       and app_group.package_id = :package_id
       and app_group.element_id = g.group_id
     group by t.object_type, t.pretty_name
     order by lower(t.pretty_name)
} 
 ------------ 

    select
           t.object_type, t.pretty_name, count(g.group_id) as number_groups
      from groups g, acs_objects o, acs_object_types t,
           application_group_element_map app_group
     where o.object_id = g.group_id
       and o.object_type = t.object_type
       and app_group.package_id = :package_id
       and app_group.element_id = g.group_id
     group by t.object_type, t.pretty_name
     order by lower(t.pretty_name)

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/tcl/relation-procs.tcl####################
b(select_rel_info):[db_0or1row]
 {
	    select s.segment_id, r.object_id_two as party_id
  	      from rel_segments s, acs_rels r
	     where r.object_id_one = s.group_id
	       and r.rel_type = s.rel_type
	       and r.rel_id = :rel_id
	} 
 ------------ 

	select s.segment_id, r.object_id_two as party_id, t.package_name
	  from acs_rels r
	         left outer join rel_segments s
		   on (r.object_id_one = s.group_id and r.rel_type = s.rel_type), 
	       acs_object_types t
	 where r.rel_type = t.object_type
	  and r.rel_id = :rel_id
    
       
b(select_required_rel_segments):[db_foreach]
 {
	select distinct s.segment_id, s.group_id, s.rel_type,
	       g.group_name, g.join_policy, t.pretty_name as rel_type_pretty_name,
               nvl(dl.dependency_level, 0)
	from rc_all_constraints c, 
             (select rel_segment, required_rel_segment
              from rc_segment_required_seg_map
	      where rel_side = 'two'
	      UNION ALL
	      select segment_id, segment_id
	      from rel_segments) map,
             rel_segments s, 
             rc_segment_dependency_levels dl,
	     groups g, acs_object_types t
	where c.group_id = :group_id
	  and c.rel_type = :rel_type
	  and c.required_rel_segment = map.rel_segment
          and map.required_rel_segment = s.segment_id
          and s.segment_id = dl.segment_id(+)
	  and g.group_id = s.group_id
	  and t.object_type = s.rel_type
        order by nvl(dl.dependency_level, 0)
    } 
 ------------ 

	select distinct s.segment_id, s.group_id, s.rel_type,
	       g.group_name, g.join_policy, t.pretty_name as rel_type_pretty_name,
               coalesce(dl.dependency_level, 0)
	from rc_all_constraints c, 
             (select rel_segment, required_rel_segment
              from rc_segment_required_seg_map
	      where rel_side = 'two'
	      UNION ALL
	      select segment_id, segment_id
	      from rel_segments) map,
             rel_segments s left outer join rc_segment_dependency_levels dl using (segment_id),
	     groups g, acs_object_types t
	where c.group_id = :group_id
	  and c.rel_type = :rel_type
	  and c.required_rel_segment = map.rel_segment
          and map.required_rel_segment = s.segment_id
	  and g.group_id = s.group_id
	  and t.object_type = s.rel_type
        order by coalesce(dl.dependency_level, 0)
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/register/email-password-3.tcl####################
q(update_question):[db_dml]
 "update users set password_question = :question, password_answer = :answer where user_id = :user_id" 
 ------------ 
      update users set password_question = :question, password_answer = :answer where user_id = :user_id
       
q(first_last_names):[db_0or1row]
 "select first_names db_first_names, last_name db_last_name, password_question from cc_users where user_id = :user_id" 
 ------------ 
      select first_names as db_first_names, last_name as db_last_name, password_question from cc_users where user_id = :user_id
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/site-map/parameter-set-2.tcl####################
b(apm_parameters_set):[db_foreach]
 {
	select parameter_id, parameter_name
	from apm_parameters
	where package_key = :package_key
    } 
 ------------ 
      
	select parameter_id, parameter_name
	from apm_parameters
	where package_key = :package_key
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/roles/one.tcl####################
b(select_role_props):[db_0or1row]
 {
    select r.pretty_name, r.pretty_plural
      from acs_rel_roles r 
     where r.role = :role
} 
 ------------ 
      
    select r.pretty_name, r.pretty_plural
      from acs_rel_roles r 
     where r.role = :role

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/group-types/delete-2.tcl####################
b(select_type_info):[db_0or1row]
 {
    select t.table_name, t.package_name
      from acs_object_types t
     where t.object_type=:group_type
} 
 ------------ 
      
    select t.table_name, t.package_name
      from acs_object_types t
     where t.object_type=:group_type

       
b(select_group_ids):[db_list]
 {
	    select o.object_id
	    from acs_objects o, acs_object_party_privilege_map perm
	    where perm.object_id = o.object_id
              and perm.party_id = :user_id
              and perm.privilege = 'delete'
	      and o.object_type = :group_type
	} 
 ------------ 
      
	    select distinct o.object_id
	    from acs_objects o, all_object_party_privilege_map perm
	    where perm.object_id = o.object_id
              and perm.party_id = :user_id
              and perm.privilege = 'delete'
	      and o.object_type = :group_type
	
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/pvt/set-on-vacation-until.tcl####################
q(pvt_set_vacation_update):[db_dml]
 "update users set no_alerts_until = :on_vacation_until where user_id = :user_id" 
 ------------ 
      updaUse of uninitialized value in concatenation (.) or string at xparse.pl line 144.
te users set no_alerts_until = :on_vacation_until where user_id = :user_id
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/pvt/set-on-vacation-to-null.tcl####################
b(pvt_unset_no_alerts_until):[db_dml]
 {
	    update users 
	    set no_alerts_until = :clear
	    where user_id = :user_id
    } 
 ------------ 
      
	    update users 
	    set no_alerts_until = :clear
	    where user_id = :user_id
    
       
b(no_alerts_until):[]
 {
    select no_alerts_until from users where user_id = :user_id
} 
 ------------ 
      
    select no_alerts_until from users where user_id = :user_id

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/groups/change-join-policy-2.tcl####################
b(update_join_policy):[db_dml]
 {
    update groups
    set join_policy = :join_policy
    where group_id = :group_id
} 
 ------------ 
      
    update groups
    set join_policy = :join_policy
    where group_id = :group_id

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/register/user-login.tcl####################
b(user_login_user_id_from_email):[db_0or1row]
 {
    select user_id, member_state, email_verified_p
    from cc_users
    where email = :email} 
 ------------ 
      
    select user_id, member_state, email_verified_p
    from cc_users
    where email = lower(:email)
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/groups/new.tcl####################
b(group_info):[db_1row]
 {
    select group_name as add_to_group_name, 
           join_policy as add_to_group_join_policy
    from groups
    where group_id = :add_to_group_id
} 
 ------------ 
      
    select group_name as add_to_group_name, 
           join_policy as add_to_group_join_policy
    from groups
    where group_id = :add_to_group_id

       
b(group_exists_p):[db_string]
 {
	    select count(*) from groups where group_id = :group_id
	} 
 ------------ 
      
	    select count(*) from groups where group_id = :group_id
	
       
b(select_type_info):[db_1row]
 {
    select t.pretty_name as group_type_pretty_name,
           t.table_name
      from acs_object_types t
     where t.object_type = :group_type
} 
 ------------ 
      
    select t.pretty_name as group_type_pretty_name,
           t.table_name
      from acs_object_types t
     where t.object_type = :group_type

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/group-types/delete.tcl####################
b(groups_of_this_type):[db_string]
 {
    select count(o.object_id) 
      from acs_objects o
     where o.object_type = :group_type
} 
 ------------ 
      
    select count(o.object_id) 
      from acs_objects o
     where o.object_type = :group_type

       
b(select_subtypes):[db_foreach]
 {
	select t.object_type as group_type, t.pretty_name
          from acs_object_types t
         where t.supertype = :group_type
    } 
 ------------ 
      
	select t.object_type as group_type, t.pretty_name
          from acs_object_types t
         where t.supertype = :group_type
    
       
b(select_rel_types):[db_foreach]
 {
	select rel.rel_type, t.pretty_name
          from acs_rel_types rel, acs_object_types t
         where (rel.object_type_one = :group_type 
                or rel.object_type_two = :group_type)
	   and rel.rel_type = t.object_type
    } 
 ------------ 
      
	select rel.rel_type, t.pretty_name
          from acs_rel_types rel, acs_object_types t
         where (rel.object_type_one = :group_type 
                or rel.object_type_two = :group_type)
	   and rel.rel_type = t.object_type
    
       
b(select_pretty_name):[db_0or1row]
 {
    select t.pretty_name as group_type_pretty_name
      from acs_object_types t
     where t.object_type = :group_type
} 
 ------------ 
      
    select t.pretty_name as group_type_pretty_name
      from acs_object_types t
     where t.object_type = :group_type

       
b(relations_to_this_type):[db_string]
 {
    select count(r.rel_id)
      from acs_rels r
     where r.rel_type in (select t.rel_type
                            from acs_rel_types t
                           where t.object_type_one = :group_type
                              or t.object_type_two = :group_type)
} 
 ------------ 
      
    select count(r.rel_id)
      from acs_rels r
     where r.rel_type in (select t.rel_type
                            from acs_rel_types t
                           where t.object_type_one = :group_type
                              or t.object_type_two = :group_type)

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/delete-2.tcl####################
b(select_rel_ids):[db_list]
 {
	select r.rel_id
	  from acs_rels r, acs_object_party_privilege_map perm
	 where perm.object_id = r.rel_id
	  and perm.party_id = :user_id
	  and perm.privilege = 'delete'
	  and r.rel_type = :rel_type
    } 
 ------------ 
      
	select r.rel_id
	  from acs_rels r, acs_object_party_privilege_map perm
	 where perm.object_id = r.rel_id
	  and perm.party_id = :user_id
	  and perm.privilege = 'delete'
	  and r.rel_type = :rel_type
    
       
b(select_segment_id):[db_string]
 {
	select s.segment_id
	  from rel_segments s, acs_object_party_privilege_map perm
	 where perm.object_id = s.segment_id
 	   and perm.party_id = :user_id
	   and perm.privilege = 'delete'
	   and s.rel_type = :rel_type
    } 
 ------------ 
      
	select s.segment_id
	  from rel_segments s, acs_object_party_privilege_map perm
	 where perm.object_id = s.segment_id
 	   and perm.party_id = :user_id
	   and perm.privilege = 'delete'
	   and s.rel_type = :rel_type
    
       
b(select_type_info):[db_1row]
 {
	select t.table_name 
	  from acs_object_types t
	 where t.object_type = :rel_type
    } 
 ------------ 
      
	select t.table_name 
	  from acs_object_types t
	 where t.object_type = :rel_type
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/group-types/rel-type-remove-2.tcl####################
b(select_group_type):[db_1row]
 {
	select g.group_type
	from group_type_rels g 
	where g.group_rel_type_id = :group_rel_type_id
    } 
 ------------ 
      
	select g.group_type
	from group_type_rels g 
	where g.group_rel_type_id = :group_rel_type_id
    
       
b(remove_relation):[db_dml]
 {
	    delete from group_type_rels where group_rel_type_id = :group_rel_type_id
	} 
 ------------ 
      
	    delete from group_type_rels where group_rel_type_id = :group_rel_type_id
	
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/index.tcl####################
b(subsite_name):[db_string]
 {
    select p.instance_name 
      from apm_packages p
     where p.package_id = :package_id
} 
 ------------ 
      
    select p.instance_name 
      from apm_packages p
     where p.package_id = :package_id

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/group-types/groups-display.tcl####################
b(select_type_info):[db_0or1row]
 {
    select t.pretty_name as group_type_pretty_name
      from acs_object_types t
     where t.object_type = :group_type
} 
 ------------ 
      
    select t.pretty_name as group_type_pretty_name
      from acs_object_types t
     where t.object_type = :group_type

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/attributes/enum-add-2.tcl####################
b(insert_enum_value):[db_dml]
 {
		    insert into acs_enum_values v
		    (attribute_id, sort_order, enum_value, pretty_name)
		    select :attribute_id, :sort_order, :pretty_name, :pretty_name
		    from dual
		    where not exists (select 1 
                                        from acs_enum_values v2
                                       where v2.pretty_name = :pretty_name
                                         and v2.attribute_id = :attribute_id)
		} 
 ------------ 
      
		    insert into acs_enum_values
		    (attribute_id, sort_order, enum_value, pretty_name)
		    select :attribute_id, :sort_order, :pretty_name, :pretty_name
		    
		    where not exists (select 1 
                                        from acs_enum_values v2
                                       where v2.pretty_name = :pretty_name
                                         and v2.attribute_id = :attribute_id)
		
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/index.tcl####################
Parse Error: 
undefined entity at line 11, column 27, byte 412 at D:/Perl/site/lib/XML/Parser.pm line 168

FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-segments/new.tcl####################
Parse Error: 
undefined entity at line 9, column 12, byte 231 at D:/Perl/site/lib/XML/Parser.pm line 168

FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/users/new.tcl####################
b(rel_type_info):[db_1row]
 {
    select object_type as ancestor_rel_type
      from acs_object_types
     where supertype = 'relationship'
       and object_type in (
               select object_type from acs_object_types
               start with object_type = :add_with_rel_type
               connect by object_type = prior supertype
           )
} 
 ------------ 

    select object_type as ancestor_rel_type
      from acs_object_types
     where supertype = 'relationship'
       and object_type in (
               select t1.object_type
	         from acs_object_types t1, acs_object_types t2
		where t2.tree_sortkey between t1.tree_sortkey and tree_right(t1.tree_sortkey)
		  and t2.object_type = :add_with_rel_type
	   )

       
q(user_new_2_rowid_for_email):[db_string]
 "select rowid from users where user_id = :user_id" 
 ------------ 
      select rowid from users where user_id = :user_id
       
b(user_exists):[db_string]
 {
	select case when exists
	                 (select 1 from users where user_id = :user_id)
	       then 1 else 0 end
	from dual
    } 
 ------------ 
      
	select case when exists
	                 (select 1 from users where user_id = :user_id)
	       then 1 else 0 end
	
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/permissions/index.tcl####################
b(adminable_objects):[db_foreach]
 {
  select o.object_id, acs_object.name(o.object_id) as name
  from acs_objects o, acs_object_party_privilege_map map
  where map.object_id = o.object_id
    and map.party_id = :user_id
    and map.privilege = 'admin'
} 
 ------------ 
      
  select distinct o.object_id, acs_object__name(o.object_id) as name
  from acs_objects o, all_object_party_privilege_map map
  where map.object_id = o.object_id
    and map.party_id = :user_id
    and map.privilege = 'admin'

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/relations/remove.tcl####################
b(select_dependants):[db_foreach]
 {
	select r.viol_rel_id as rel_id,
	       acs_object_type.pretty_name(r.viol_rel_type) as rel_type_pretty_name,
	       acs_object.name(r.viol_object_id_one) as object_id_one_name, 
	       acs_object.name(r.viol_object_id_two) as object_id_two_name
	  from rc_violations_by_removing_rel r
	 where r.rel_id = :rel_id
    } 
 ------------ 
      
	select r.viol_rel_id as rel_id,
	       acs_object_type__pretty_name(r.viol_rel_type) as rel_type_pretty_name,
	       acs_object__name(r.viol_object_id_one) as object_id_one_name, 
	       acs_object__name(r.viol_object_id_two) as object_id_two_name
	  from rc_violations_by_removing_rel r
	 where r.rel_id = :rel_id
    
       
b(select_rel_info):[db_0or1row]
 {
    select acs_object_type.pretty_name(r.rel_type) as rel_type_pretty_name,
           acs_object.name(r.object_id_one) as object_id_one_name,
           acs_object.name(r.object_id_two) as object_id_two_name,
           r.object_id_two
      from acs_rels r
     where r.rel_id = :rel_id} 
 ------------ 
      
    select acs_object_type__pretty_name(r.rel_type) as rel_type_pretty_name,
           acs_object__name(r.object_id_one) as object_id_one_name,
           acs_object__name(r.object_id_two) as object_id_two_name,
           r.object_id_two
      from acs_rels r
     where r.rel_id = :rel_id
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/site-map/parameter-set.tcl####################
b(package_info):[db_1row]
 {
    select package_key, acs_object.name(package_id) instance_name
    from apm_packages
    where package_id = :package_id
} 
 ------------ 
      
    select package_key, acs_object__name(package_id) as instance_name
    from apm_packages
    where package_id = :package_id

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/host-node-map/index.tcl####################
b(host_node_pair):[db_foreach]
 {
    select host, node_id, site_node.url(node_id) as url 
    from host_node_map
} 
 ------------ 

    select host, node_id, site_node__url(node_id) as url 
    from host_node_map
      
       
q(root_id):[db_f]
 "select site_node.node_id('/') from dual" 
 ------------ 
      
      select site_node__node_id('/', null)
      
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/one.tcl####################
b(select_rel_type_properties):[db_1row]
 {
    select t1.pretty_name as object_type_one_pretty_name, 
           r.object_type_one, acs_rel_type.role_pretty_name(r.role_one) as role_one_pretty_name, 
           r.role_one, r.min_n_rels_one, r.max_n_rels_one,
           t2.pretty_name as object_type_two_pretty_name, 
           r.object_type_two, acs_rel_type.role_pretty_name(r.role_two) as role_two_pretty_name, 
           r.role_two, r.min_n_rels_two, r.max_n_rels_two
      from acs_rel_types r, acs_object_types t1, acs_object_types t2
     where r.rel_type = :rel_type
       and r.object_type_one = t1.object_type
       and r.object_type_two = t2.object_type
} 
 ------------ 
      
    select t1.pretty_name as object_type_one_pretty_name, 
           r.object_type_one, acs_rel_type__role_pretty_name(r.role_one) as role_one_pretty_name, 
           r.role_one, r.min_n_rels_one, r.max_n_rels_one,
           t2.pretty_name as object_type_two_pretty_name, 
           r.object_type_two, acs_rel_type__role_pretty_name(r.role_two) as role_two_pretty_name, 
           r.role_two, r.min_n_rels_two, r.max_n_rels_two
      from acs_rel_types r, acs_object_types t1, acs_object_types t2
     where r.rel_type = :rel_type
       and r.object_type_one = t1.object_type
       and r.object_type_two = t2.object_type

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/permissions/toggle-inherit.tcl####################
b(toggle_inherit):[db_dml]
 {
  update acs_objects
  set security_inherit_p = decode(security_inherit_p, 't', 'f', 'f', 't')
  where object_id = :object_id
} 
 ------------ 

  update acs_objects
  set security_inherit_p = not security_inherit_p
  where object_id = :object_id

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/user/portrait/upload-2.tcl####################
v(create_rel):[db_exec_plsql]
 $create_rel 
 ------------ 

        select acs_rel__new (
         null,
         'user_portrait_rel',
         :user_id,
         :item_id,
         null,
         null,
         null
        )


         
v(create_item):[db_exec_plsql]
 $create_item 
 ------------ 

  select content_item__new(
         varchar :name,
         null,
         null,
         null,
     Use of uninitialized value in concatenation (.) or string at xparse.pl line 144.
    now(),
         null,
         null,
         :creation_ip,
         'content_item',
         'content_revision',
         null,
         null,
         'text/plain',
         null,
         null
         )


         
v(create_revision):[db_exec_plsql]
 $create_revision 
 ------------ 

  declare
        v_revision_id      integer;
  begin

  v_revision_id := content_revision__new(
                                       :title,
                                       :portrait_comment,
                                       now(),
                                       :guessed_file_type,
                                       null,
                                       null,
                                       :item_id,
                                       null,
                                       now(),
                                       :user_id,
                                       :creation_ip
                                       );

  update cr_items
  set live_revision = v_revision_id
  where item_id = :item_id;

  return v_revision_id;

  end;

         
q(update_photo_info):[db_dml]
 "
	    update cr_revisions
	    set description = :portrait_comment,
	        publish_date = sysdate,
	        mime_type = :guessed_file_type,
	        title = :title
	    where revision_id = :revision_id" 
 ------------ 

	update cr_revisions
	set description = :portrait_comment,
	    publish_date = now(),
	    mime_type = :guessed_file_type,
	    title = :title
	where revision_id = :revision_id
 
         
v(update_photo):[]
 $update_photo 
 ------------ 

        update cr_revisions
        set lob = [set __lob_id [db_string get_lob_id "select empty_lob()"]]
        where revision_id = :revision_id

         
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/roles/new.tcl####################
b(create_role):[db_exec_plsql]
 {
	    begin acs_rel_type.create_role(role => :role, pretty_name => :pretty_name, pretty_plural => :pretty_plural); end;
	} 
 ------------ 
	    select acs_rel_type__create_role(:role, :pretty_name, :pretty_plural)
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/tcl/rel-types-procs.tcl####################
Parse Error: 
not well-formed at line 26, column 60, byte 852 at D:/Perl/site/lib/XML/Parser.pm line 168

FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/tcl/plsql-utility-procs.tcl####################
b(object_type_exists_p):[db_string]
 {
	    select case when exists (select 1 from acs_object_types where object_type=:object_type)
                        then 1
                        else 0
                   end
              from dual
	} 
 ------------ 
      
	    select case when exists (select 1 from acs_object_types where object_type=:object_type)
                        then 1
                        else 0
                   end
              
	
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/register/user-new-2.tcl####################
q(user_new_2_rowid_for_email):[db_string]
 "select rowid from users where user_id = :user_id" 
 ------------ 
      select oid from users where user_id = :user_id
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/site-map/unmounted.tcl####################
b(packages_normal_select):[db_foreach]
 {
  select package_id, acs_object.name(package_id) as name
  from
  apm_packages
  where (acs_permission.permission_p(package_id, :user_id, 'read') = 't' or
         acs_permission.permission_p(package_id, acs.magic_object_id('the_public'), 'read') = 't')
    and apm_package.singleton_p(package_key) = 0
    and not exists (select 1
                    from site_nodes
                    where object_id = package_id)  
  order by name
} 
 ------------ 
      
  select package_id, acs_object__name(package_id) as name
  from
  apm_packages
  where (acs_permission__permission_p(package_id, :user_id, 'read') = 't' or
         acs_permission__permission_p(package_id, acs__magic_object_id('the_public'), 'read') = 't')
    and apm_package__singleton_p(package_key) = 0
    and not exists (select 1
                    from site_nodes
                    where object_id = package_id)  
  order by name

       
b(packages_singleton_select):[db_foreach]
 {
  select package_id, acs_object.name(package_id) as name
  from
  apm_packages
  where (acs_permission.permission_p(package_id, :user_id, 'read') = 't' or
         acs_permission.permission_p(package_id, acs.magic_object_id('the_public'), 'read') = 't')
    and apm_package.singleton_p(package_key) = 1
    and not exists (select 1
                    from site_nodes
                    where object_id = package_id)  
  order by name
} 
 ------------ 
      
  select package_id, acs_object__name(package_id) as name
  from
  apm_packages
  where (acs_permission__permission_p(package_id, :user_id, 'read') = 't' or
         acs_permission__permission_p(package_id, acs__magic_object_id('the_public'), 'read') = 't')
    and apm_package__singleton_p(package_key) = 1
    and not exists (select 1
                    from site_nodes
                    where object_id = package_id)  
  order by name

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/groups/delete.tcl####################
b(object_name):[db_string]
 {select acs_object.name(:group_id) from dual} 
 ------------ 
      select acs_object__name(:group_id) 
       
b(select_counts):[db_1row]
 {
    select (select count(*) from group_element_map where group_id = :group_id) as elements,
           (select count(*) from rel_segments where group_id = :group_id) as segments,
           (select count(*) 
              from rel_constraints cons, rel_segments segs
             where segs.segment_id in (cons.rel_segment,cons.required_rel_segment)
               and segs.group_id = :group_id) as constraints
      from dual
} 
 ------------ 
      
    select (select count(*) from group_element_map where group_id = :group_id) as elements,
           (select count(*) from rel_segments where group_id = :group_id) as segments,
           (select count(*) 
              from rel_constraints cons, rel_segments segs
             where segs.segment_id in (cons.rel_segment,cons.required_rel_segment)
               and segs.group_id = :group_id) as constraints
      

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/delete.tcl####################
b(number_subtypes):[db_string]
 {
    select case when exists (select 1 
                               from acs_object_types t
                              where t.supertype = :rel_type) 
                then 1 else 0 end
      from dual
} 
 ------------ 
      
    select case when exists (select 1 
                               from acs_object_types t
                              where t.supertype = :rel_type) 
                then 1 else 0 end
      

       
b(select_counts):[db_1row]
 {
    select (select count(*) from rel_segments where rel_type = :rel_type) as segments,
           (select count(*) from acs_rels where rel_type = :rel_type) as rels
      from dual
} 
 ------------ 
      
    select (select count(*) from rel_segments where rel_type = :rel_type) as segments,
           (select count(*) from acs_rels where rel_type = :rel_type) as rels
      

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/tcl/subsite-procs.tcl####################
b(select_object_type_path):[db_list]
 {
	select object_type
	from acs_object_types
	start with object_type = :object_type
	connect by object_type = prior supertype
    } 
 ------------ 

	select t2.object_type
	  from acs_object_types t1, acs_object_types t2
	 where t1.object_type = :object_type
	   and t1.tree_sortkey between t2.tree_sortkey and tree_right(t2.tree_sortkey)
	 order by t2.tree_sortkey desc
    
       
b(add_constraint):[db_exec_plsql]
 {
		    BEGIN
			:1 := rel_constraint.new(
			constraint_name => :constraint_name,
			rel_segment => :segment_id,
			rel_side => 'two',
			required_rel_segment => rel_segment.get(:supersite_group_id, 'membership_rel'),
			creation_user => :user_id,
			creation_ip => :creation_ip
			);
		    END;
		} 
 ------------ 

	select rel_constraint__new(
	  null,
	  'rel_constraint',
	  :constraint_name,
	  :segment_id,
	  'two',
	  rel_segment__get(:supersite_group_id, 'membership_rel'),
	  null,
	  :user_id,
	  :creation_ip
	);
		
       
b(select_package_object_names):[db_1row]
 {
	    select t.pretty_name as package_name, acs_object.name(s.object_id) as object_name
	      from site_nodes s, apm_package_types t
	     where s.node_id = :node_id
	       and t.package_key = :package_key
	} 
 ------------ 
      
	    select t.pretty_name as package_name, acs_object__name(s.object_id) as object_name
	      from site_nodes s, apm_package_types t
	     where s.node_id = :node_id
	       and t.package_key = :package_key
	
       
b(sub_type_exists_p):[db_string]
 {
	select case 
                 when exists (select 1 from acs_object_types 
                              where supertype = :object_type)
                 then 1 
                 else 0 
               end
        from dual
    } 
 ------------ 
      
	select case 
                 when exists (select 1 from acs_object_types 
                              where supertype = :object_type)
                 then 1 
                 else 0 
               end
        
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/permissions/grant-2.tcl####################
b(grant):[db_exec_plsql]
 {
  begin
    acs_permission.grant_permission(:object_id, :party_id, :privilege);
  end;
} 
 ------------ 

    select acs_permission__grant_permission(:object_id, :party_id, :privilege)

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/tcl/group-type-procs.tcl####################
q(create_table):[db_exec_plsql]
 "
create table $table_name ( 
    $id_column   integer 
                 constraint $constraint(pk) primary key
                 constraint $constraint(fk) 
                   references $references_table ($references_column)
)" 
 ------------ 

begin      
  create table $table_name ( 
    $id_column   integer 
                 constraint $constraint(pk) primary key
                 constraint $constraint(fk) 
                   references $references_table ($references_column)
  );
  return null;
end;

       
b(group_exists_p):[db_string]
 {
	    select case when exists (select 1 
                                       from acs_objects o
                                      where acs_permission.permission_p(o.object_id, :user_id, 'delete') = 'f'
                                        and o.object_type = :group_type)
                        then 0 else 1 end
              from dual
	} 
 ------------ 
      
	    select case when exists (select 1 
                                       from acs_objects o
                                      where acs_permission__permission_p(o.object_id, :user_id, 'delete') = 'f'
                                        and o.object_type = :group_type)
                        then 0 else 1 end
              
	
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/site-map/package-new.tcl####################
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/new-2.tcl####################
Parse Error: 
undefined entity at line 9, column 19, byte 186 at D:/Perl/site/lib/XML/Parser.pm line 168

FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/tcl/package-procs.tcl####################
b(select_all_attributes):[db_foreach]
 {
	select upper(nvl(attr.table_name,t.table_name)) as attr_table_name, 
	       upper(nvl(attr.column_name, attr.attribute_name)) as attr_column_name, 
	       attr.ancestor_type, attr.min_n_values, attr.default_value
	  from acs_object_type_attributes attr, 
	       (select t.object_type, t.table_name, level as type_level
	          from acs_object_types t
	         start with t.object_type = :object_type
	       connect by prior t.supertype = t.object_type) t
         where attr.ancestor_type = t.object_type
           and attr.object_type = :object_type
        order by t.type_level 
    } 
 ------------ 

	select upper(coalesce(attr.table_name,t.table_name)) as attr_table_name, 
	       upper(coalesce(attr.column_name, attr.attribute_name)) as attr_column_name, 
	       attr.ancestor_type, attr.min_n_values, attr.default_value
	  from acs_object_type_attributes attr, 
	       (select t2.object_type, t2.table_name, (tree_level(t1.tree_sortkey) - tree_level(t2.tree_sortkey)) + 1 as type_level
	          from acs_object_types t1, acs_object_types t2
		 where t1.tree_sortkey between t2.tree_sortkey and tree_right(t2.tree_sortkey)
		   and t1.object_type = :object_type) t
         where attr.ancestor_type = t.object_type
           and attr.object_type = :object_type
        order by t.type_level 
    
       
b(object_type_dynamic_p):[db_string]
 {
	select case when exists (select 1 
                                   from acs_object_types t
                                  where t.dynamic_p = 't'
                                    and t.object_type = :object_type)
	            then 1 else 0 end
	  from dual
    } 
 ------------ 
      
	select case when exists (select 1 
                                   from acs_object_types t
                                  where t.dynamic_p = 't'
                                    and t.object_type = :object_type)
	            then 1 else 0 end
	  
    
       
q(create_object):[db_exec_plsql]
 "
    BEGIN
      :1 := ${package_name}.new([plsql_utility::generate_attribute_parameter_call \
	      -prepend " 
 ------------ 

	select ${package_name}__new([plpgsql_utility::generate_attribute_parameter_call \
		-prepend ":" \
		${package_name}__new \
		$pieces])

       
b(select_ancestor_types):[db_foreach]
 {
	select t.object_type as ancestor_type
	  from acs_object_types t 
	 start with t.object_type = :object_type 
       connect by prior t.supertype = t.object_type
    } 
 ------------ 

	select t2.object_type as ancestor_type
	  from acs_object_types t1, acs_object_types t2
	 where t1.tree_sortkey between t2.tree_sortkey and tree_right(t2.tree_sortkey)
	   and t1.object_type = :object_type
    
       
b(select_comments):[db_1row]
 {
	    select 'Unknown' as author,
	           sysdate as creation_date
	      from dual
	} 
 ------------ 
      
	    select acs_object__name(:user_id) as author,
	           current_timestamp as creation_date
	      
	
       
b(select_sub_types):[db_foreach]
 {
	select t.object_type as sub_type
	  from acs_object_types t 
	 start with t.object_type = :object_type 
       connect by prior t.object_type = t.supertype
    } 
 ------------ 

	select t2.object_type as sub_type
	  from acs_object_types t1, acs_object_types t2
	 where t2.tree_sortkey between t1.tree_sortkey and tree_right(t1.tree_sortkey)
	   and t1.object_type = :object_type 
    
       
b(select_object_type_param_list):[db_list_of_lists]
 {
	select cols.table_name, cols.column_name
	  from user_tab_columns cols, 
	       (select upper(t.table_name) as table_name
	          from acs_object_types t
                 start with t.object_type = :object_type
               connect by prior t.supertype = t.object_type) t
	 where cols.column_name in
	          (select args.argument_name
                     from user_arguments args
                    where args.position > 0
	              and args.object_name = upper(:object_name)
	              and args.package_name = upper(:package_name))
	   and cols.table_name = t.table_name
    } 
 ------------ 

	select cols.table_name, cols.column_name
	  from user_tab_columns cols, 
	       (select upper(t2.table_name) as table_name
	          from acs_object_types t1, acs_object_types t2
		 where t1.tree_sortkey between t2.tree_sortkey and tree_right(t2.tree_sortkey)
		   and t1.object_type = :object_type) t
	 where cols.column_name in
	          (select args.arg_name
                     from acs_function_args args
                    where args.function = upper(:package_name) || '__' || upper(:object_name))
	   and cols.table_name = t.table_name
    
       
b(package_valid_p):[db_string]
 {
	    select case when exists (select 1 
                                       from user_objects 
                                      where status = 'INVALID'
                                        and object_name = upper(:package_name)
                                        and object_type = upper(:type))
                        then 0 else 1 end
	      from dual
	} 
 ------------ 

select 1
    
       
q(attributes_select):[db_list_of_lists]
 "
	select a.attribute_id, 
	       nvl(a.table_name, t.table_name) as table_name,
	       nvl(a.column_name, a.attribute_name) as attribute_name, 
	       a.pretty_name, 
	       a.datatype, 
	       decode(a.min_n_values,0,'f','t') as required_p, 
               a.default_value, 
               t.table_name as object_type_table_name, 
               t.id_column as object_type_id_column
          from acs_object_type_attributes a, 
               (select t.object_type, t.table_name, t.id_column, level as type_level
                  from acs_object_types t
                 start with t.object_type=:start_with
               connect by prior t.object_type = t.supertype) t 
         where a.object_type = :object_type
           and t.object_type = a.object_type $storage_clause
         order by type_level" 
 ------------ 

	select a.attribute_id, 
	       coalesce(a.table_name, t.table_name) as table_name,
	       coalesce(a.column_name, a.attribute_name) as attribute_name, 
	       a.pretty_name, 
	       a.datatype, 
	       case when a.min_n_values = 0 then 'f' else 't' end as required_p, 
               a.default_value, 
               t.table_name as object_type_table_name, 
               t.id_column as object_type_id_column
          from acs_object_type_attributes a, 
               (select t.object_type, t.table_name, t.id_column, tree_level(t.tree_sortkey) as type_level
                from acs_object_types t, acs_object_types t2
		where t.tree_sortkey between t2.tree_sortkey and tree_right(t2.tree_sortkey)
		  and t2.object_type = :start_with) t
         where a.object_type = :object_type
           and t.object_type = a.ancestor_type $storage_clause
         order by type_level, attribute_id
       
b(select_supertype_function_params):[db_list]
 {
	select args.argument_name
	  from user_arguments args
         where args.package_name =upper(:supertype_package_name)
	   and args.object_name='NEW'
    } 
 ------------ 
      
	select args.arg_name
	  from acs_function_args args
         where args.function =upper(:supertype_package_name) || '__NEW'
    
       
b(select_object_type_param_list):[db_list_of_lists]
 {


	select cols.table_name, cols.column_name
	  from user_tab_columns cols, 
	       (select upper(t2.table_name) as table_name
	          from acs_object_types t1, acs_object_types t2
		 where t1.tree_sortkey between t2.tree_sortkey and tree_right(t2.tree_sortkey)
		   and t1.object_type = :object_type) t
	 where cols.column_name in
	          (select args.arg_name
                     from acs_function_args args
                    where args.function = upper(:package_name) || '__' || upper(:object_name))
	   and cols.table_name = t.table_name
    
      
} 
 ------------ 
	select args.arg_name
        from acs_function_args args
        where args.function = upper(:package_name) || '__' || upper(:function_name)
       
b(select_object_types):[db_list]
 {
	select t.object_type
	  from acs_object_types t
	 where t.dynamic_p = 't'
	 start with t.object_type = :object_type
       connect by prior t.object_type = t.supertype
    } 
 ------------ 

	select t2.object_type
	  from acs_object_types t1, acs_object_types t2
	 where t2.dynamic_p = 't'
	   and t2.tree_sortkey between t1.tree_sortkey and tree_right(t1.tree_sortkey)
	   and t1.object_type = :object_type
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/pvt/unsubscribe.tcl####################
q(vacation_time):[db_1row]
 "select no_alerts_until, acs_user.receives_alerts_p(:user_id) as on_vacation_p 
from users
where user_id = :user_id" 
 ------------ 
      select no_alerts_until, acs_user__receives_alerts_p(:user_id) as on_vacation_p 
from users
where user_id = :user_id
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/register/awaiting-email-verification.tcl####################
b(register_user_state_properties):[db_0or1row]
 {
    select member_state, email, row_id 
    from cc_users
    where user_id = :user_id and
    email_verified_p = 'f' } 
 ------------ 
      
     select mr.member_state, p.email, u.oid as row_id
     from users u
     JOIN parties p on (p.party_id = u.user_id)
     LEFT JOIN membership_rels mr on (mr.rel_id = u.user_id)
     where u.user_id = :user_id
     and u.email_verified_p = 'f'

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-segments/constraints/one.tcl####################
b(select_constraint_properties):[db_0or1row]
 {
    select c.constraint_id, c.constraint_name, c.rel_side, 
           s.segment_id, s.segment_name, s.rel_type, acs_group.name(s.group_id) as group_name,
           s2.segment_id as req_segment_id, s2.segment_name as req_segment_name, 
           s2.rel_type as req_rel_type, acs_group.name(s2.group_id) as req_group_name
      from application_group_segments s, application_group_segments s2,
           rel_constraints c
     where s.segment_id = c.rel_segment
       and s2.segment_id = c.required_rel_segment
       and c.constraint_id = :constraint_id
       and s.package_id = :package_id
       and s2.package_id = :package_id
} 
 ------------ 
      
    select c.constraint_id, c.constraint_name, c.rel_side, 
           s.segment_id, s.segment_name, s.rel_type, acs_group__name(s.group_id) as group_name,
           s2.segment_id as req_segment_id, s2.segment_name as req_segment_name, 
           s2.rel_type as req_rel_type, acs_group__name(s2.group_id) as req_group_name
      from application_group_segments s, application_group_segments s2,
           rel_constraints c
     where s.segment_id = c.rel_segment
       and s2.segment_id = c.required_rel_segment
       and c.constraint_id = :constraint_id
       and s.package_id = :package_id
       and s2.package_id = :package_id

       
b(select_rel_type_info):[db_1row]
 {
    select role1.role as role_one, 
           nvl(role1.pretty_name,'Object on side one') as role_one_pretty_name,
           nvl(role1.pretty_plural,'Objects on side one') as role_one_pretty_plural,
           role2.role as role_two, 
           nvl(role2.pretty_name,'Object on side two') as role_two_pretty_name,
           nvl(role2.pretty_plural,'Objects on side two') as role_two_pretty_plural,
           acs_object_type.pretty_name(rel.rel_type) as rel_type_pretty_name
      from acs_rel_types rel, acs_rel_roles role1, acs_rel_roles role2
     where rel.rel_type = :rel_type
       and rel.role_one = role1.role(+)
       and rel.role_two = role2.role(+)
} 
 ------------ 

    select role1.role as role_one, 
           coalesce(role1.pretty_name,'Object on side one') as role_one_pretty_name,
           coalesce(role1.pretty_plural,'Objects on side one') as role_one_pretty_plural,
           role2.role as role_two, 
           coalesce(role2.pretty_name,'Object on side two') as role_two_pretty_name,
           coalesce(role2.pretty_plural,'Objects on side two') as role_two_pretty_plural,
           acs_object_type__pretty_name(rel.rel_type) as rel_type_pretty_name
      from acs_rel_types rel
	     left outer join  acs_rel_roles role1 on (rel.role_one = role1.role)
	     left outer join  acs_rel_roles role2 on (rel.role_two = role2.role)
     where rel.rel_type = :rel_type

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/site-map/mount.tcl####################
b(packages_unmounted_select):[db_foreach]
 {
  select package_id, acs_object.name(package_id) as name
  from
  apm_packages
  where (acs_permission.permission_p(package_id, :user_id, 'read') = 't' or
         acs_permission.permission_p(package_id, acs.magic_object_id('the_public'), 'read') = 't')
        and apm_package.singleton_p(package_key) = 0
        and not exists (select 1
                           from site_nodes
                           where object_id = package_id)  

  order by name
} 
 ------------ 
      
  select package_id, acs_object__name(package_id) as name
  from
  apm_packages
  where (acs_permission__permission_p(package_id, :user_id, 'read') = 't' or
         acs_permission__permission_p(package_id, acs__magic_object_id('the_public'), 'read') = 't')
        and apm_package__singleton_p(package_key) = 0
        and not exists (select 1
                           from site_nodes
                           where object_id = package_id)  

  order by name

       
b(url):[db_string]
 {
  select site_node.url(:node_id) from dual
} 
 ------------ 
      
  select site_node__url(:node_id) 

       
b(packages_mounted_select):[db_foreach]
 {
  select package_id, acs_object.name(package_id) as name
  from
  apm_packages
  where (acs_permission.permission_p(package_id, :user_id, 'read') = 't' or
         acs_permission.permission_p(package_id, acs.magic_object_id('the_public'), 'read') = 't')
        and exists (select 1
                       from site_nodes
                       where object_id = package_id)  
  order by name
} 
 ------------ 
      
  select package_id, acs_object__name(package_id) as name
  from
  apm_packages
  where (acs_permission__permission_p(package_id, :user_id, 'read') = 't' or
         acs_permission__permission_p(package_id, acs__magic_object_id('the_public'), 'read') = 't')
        and exists (select 1
                       from site_nodes
                       where object_id = package_id)  
  order by name

       
b(packages_singleton_select):[db_foreach]
 {
  select package_id, acs_object.name(package_id) as name
  from
  apm_packages
  where (acs_permission.permission_p(package_id, :user_id, 'read') = 't' or
         acs_permission.permission_p(package_id, acs.magic_object_id('the_public'), 'read') = 't')
        and apm_package.singleton_p(package_key) = 1
        and not exists (select 1
                           from site_nodes
                           where object_id = package_id)  
  order by name
} 
 ------------ 
      
  select package_id, acs_object__name(package_id) as name
  from
  apm_packages
  where (acs_permission__permission_p(package_id, :user_id, 'read') = 't' or
         acs_permission__permission_p(package_id, acs__magic_object_id('the_public'), 'read') = 't')
        and apm_package__singleton_p(package_key) = 1
        and not exists (select 1
                           from site_nodes
                           where object_id = package_id)  
  order by name

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/tcl/rel-segments-procs.tcl####################
b(rel_segment_delete):[db_exec_plsql]
 {
	begin rel_segment.delete(:segment_id); end;
    } 
 ------------ 

	select rel_segment__delete(:segment_id)
    
       
b(create_rel_segment):[db_exec_plsql]
 {
      declare
      begin 
	:1 := rel_segment.new(segment_name => :segment_name,
                                  group_id => :group_id,
                                  context_id => :context_id,
                                  rel_type => :rel_type,
                                  creation_user => :creation_user,
                                  creation_ip => :creation_ip
                                 );
      end;
    } 
 ------------ 

	select rel_segment__new(
		null,
		'rel_segment',
		now(),
		:creation_user,
		:creation_ip,
		null,
		null,
		:segment_name,
		:group_id,
		:rel_type,
		:context_id
)
    
       
b(constraint_delete):[db_exec_plsql]
 {
	    begin rel_segment.delete(:constraint_id); end;
	} 
 ------------ 

	    select rel_segment__delete(:constraint_id)
	
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-segments/elements.tcl####################
b(select_segment_info):[db_1row]
 {
    select s.segment_name, s.group_id,
           acs_rel_type.role_pretty_plural(r.role_two) as role_pretty_plural
      from rel_segments s, acs_rel_types r
     where s.segment_id = :segment_id
       and s.rel_type = r.rel_type
} 
 ------------ 
      
    select s.segment_name, s.group_id,
           acs_rel_type__role_pretty_plural(r.role_two) as role_pretty_plural
      from rel_segments s, acs_rel_types r
     where s.segment_id = :segment_id
       and s.rel_type = r.rel_type

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/permissions/grant.tcl####################
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/permissions/revoke.tcl####################
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/object-types/one.tcl####################
b(package_index):[db_foreach]
 {
    select replace (replace (text, ' ', '&nbsp;'), chr(9), '&nbsp;&nbsp;&nbsp;&nbsp;') as text
      from user_source
     where lower(name) = :package_name
       and type = 'PACKAGE BODY'
     order by line
} 
 ------------ 

	select definition || '\n' as text
	  from acs_func_defs
	 where fname ilike :package_name || '__%'
	 order by fname
      
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/new.tcl####################
Parse Error: 
undefined entity at line 9, column 19, byte 180 at D:/Perl/site/lib/XML/Parser.pm line 168

FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/parties/one.tcl####################
b(party_info):[db_1row]
 {
    select acs_object.name(:party_id) as party_name,
           object_type as party_type
      from acs_objects
     where object_id = :party_id
} 
 ------------ 
      
    select acs_object__name(:party_id) as party_name,
           object_type as party_type
      from acs_objects
     where object_id = :party_id

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/site-map/new.tcl####################
b(node_new):[db_exec_plsql]
 {
        begin
        :1 := site_node.new (
        node_id => :new_node_id,
        parent_id => :parent_id,
        name => :name,
        directory_p => :directory_p,
        pattern_p => :pattern_p,
        creation_user => :user_id,
        creation_ip => :ip_address
        );
        end;
    } 
 ------------ 

        select site_node__new (
         :new_node_id,
         :parent_id,
         :name,
	 null,
         :directory_p,
         :pattern_p,
         :user_id,
         :ip_address
        )
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/shared/community-member.tcl####################
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/index.tcl####################
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/register/email-confirm.tcl####################
b(register_email_user_info_get):[db_0or1row]
 {
    select member_state, email, user_id, email_verified_p
    from cc_users
    where rowid = :row_id
} 
 ------------ 
      
	select c.member_state,
	       c.email,
	       c.user_id,
	       c.email_verified_p
	  from users u, cc_users c
	 where u.user_id = c.user_id
	   and u.oid = :row_id

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/site-map/auto-mount.tcl####################
b(select_node_url):[db_1row]
 {
	select site_node.url(s.node_id) as return_url
	  from site_nodes s, apm_packages p
	 where s.object_id = p.package_id
	   and s.node_id = :node_id
    } 
 ------------ 
      
	select site_node__url(s.node_id) as return_url
	  from site_nodes s, apm_packages p
	 where s.object_id = p.package_id
	   and s.node_id = :node_id
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/group-types/one.tcl####################
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/group-types/groups-list.tcl####################
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/permissions/one.tcl####################
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/groups/elements-display.tcl####################
b(group_and_rel_info):[db_1row]
 {
    select acs_group.name(:group_id) as group_name,
           acs_object_type.pretty_name(:rel_type) as rel_type_pretty_name,
           acs_rel_type.role_pretty_plural(rel_types.role_two) as role_pretty_plural,
           acs_rel_type.role_pretty_name(rel_types.role_two) as role_pretty_name
      from acs_rel_types rel_types
     where rel_types.rel_type = :rel_type
} 
 ------------ 
      
    select acs_group__name(:group_id) as group_name,
           acs_object_type__pretty_name(:rel_type) as rel_type_pretty_name,
           acs_rel_type__role_pretty_plural(rel_types.role_two) as role_pretty_plural,
           acs_rel_type__role_pretty_name(rel_types.role_two) as role_pretty_name
      from acs_rel_types rel_types
     where rel_types.rel_type = :rel_type

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/relations/one.tcl####################
b(select_rel_info):[db_0or1row]
 {
    select r.rel_type, acs_object_type.pretty_name(t.rel_type) as rel_type_pretty_name,
           acs_rel_type.role_pretty_name(t.role_one) as role_one_pretty_name,
           acs_rel_type.role_pretty_name(t.role_two) as role_two_pretty_name,
           t.object_type_two as object_type_two,
           acs_object.name(r.object_id_one) as object_id_one_name,
           r.object_id_one,
           acs_object.name(r.object_id_two) as object_id_two_name,
           r.object_id_two
      from acs_rels r, acs_rel_types t
     where r.rel_id = :rel_id
       and r.rel_type = t.rel_type} 
 ------------ 
      
    select r.rel_type, acs_object_type__pretty_name(t.rel_type) as rel_type_pretty_name,
           acs_rel_type__role_pretty_name(t.role_one) as role_one_pretty_name,
           acs_rel_type__role_pretty_name(t.role_two) as role_two_pretty_name,
           t.object_type_two as object_type_two,
           acs_object__name(r.object_id_one) as object_id_one_name,
           r.object_id_one,
           acs_object__name(r.object_id_two) as object_id_two_name,
           r.object_id_two
      from acs_rels r, acs_rel_types t
     where r.rel_id = :rel_id
       and r.rel_type = t.rel_type
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/tcl/group-procs.tcl####################
q(user_is_member):[db_string]
 "
	  select acs_group.member_p(:user_id,:group_id, :cascade) 
            from dual" 
 ------------ 
	  select acs_group__member_p(:user_id,:group_id, :cascade) from dual
       
q(delete_group):[db_exec_plsql]
 "
	  BEGIN 
            -- the acs_group package takes care of segments referred
  	    -- to by rel_constraints.rel_segment. We delete the ones
	    -- references by rel_constraints.required_rel_segment here.

	    for row in (select cons.constraint_id
                          from rel_constraints cons, rel_segments segs
                         where segs.segment_id = cons.required_rel_segment
                           and segs.group_id = :group_id) loop

                rel_segment.delete(row.constraint_id);

            end loop;

	    -- delete the actual group
	    ${package_name}.delete(:group_id); 
	  END;
        " 
 ------------ 
	  DECLARE
	    row record;
	  BEGIN 
            -- the acs_group package takes care of segments referred
  	    -- to by rel_constraints.rel_segment. We delete the ones
	    -- references by rel_constraints.required_rel_segment here.

	    for row in select cons.constraint_id
                          from rel_constraints cons, rel_segments segs
                         where segs.segment_id = cons.required_rel_segment
                           and segs.group_id = :group_id loop

                perform rel_segment__delete(row.constraint_id);

            end loop;

	    -- delete the actual group
	    perform ${package_name}__delete(:group_id);

	    return 1;
	  END;
        
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/groups/elements-display-list.tcl####################
b(rel_type_info):[db_1row]
 {
    select object_type as ancestor_rel_type
      from acs_object_types
     where supertype = 'relationship'
       and object_type in (
               select object_type from acs_object_types
               start with object_type = :rel_type
               connect by object_type = prior supertype
           )
} 
 ------------ 

    select object_type as ancestor_rel_type
      from acs_object_types
     where supertype = 'relationship'
       and object_type in (
               select t2.object_type
	         from acs_object_types t1, acs_object_types t2
		where t1.tree_sortkey between t2.tree_sortkey and tree_right(t2.tree_sortkey)
		  and t1.object_type = :rel_type
	   )

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/group-types/index.tcl####################
Parse Error: 
undefined entity at line 11, column 12, byte 285 at D:/Perl/site/lib/XML/Parser.pm line 168

FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-segments/constraints/new.tcl####################
b(select_violated_rels):[db_foreach]
 {
	    select viol.rel_id, acs_object.name(viol.party_id) as name
	      from rel_constraints_violated_one viol
	     where viol.constraint_id = :constraint_id
	    UNION ALL
	    select viol.rel_id, acs_object.name(viol.party_id) as name
	      from rel_constraints_violated_two viol
	     where viol.constraint_id = :constraint_id
	} 
 ------------ 
      
	    select viol.rel_id, acs_object__name(viol.party_id) as name
	      from rel_constraints_violated_one viol
	     where viol.constraint_id = :constraint_id
	    UNION ALL
	    select viol.rel_id, acs_object__name(viol.party_id) as name
	      from rel_constraints_violated_two viol
	     where viol.constraint_id = :constraint_id
	
       
b(add_constraint):[db_exec_plsql]
 {
	 BEGIN
	  :1 := rel_constraint.new(constraint_name => :constraint_name,
                                   rel_segment => :rel_segment,
                                   rel_side => :rel_side,
                                   required_rel_segment => :required_rel_segment,
                                   creation_user => :creation_user,
                                   creation_ip => :creation_ip
                                  );
	 END;
	} 
 ------------ 

	  select rel_constraint__new(
	    null,
	    'rel_constraint',
	    :constraint_name,
	    :rel_segment,
	    :rel_side,
	    :required_rel_segment,
	    null,
	    :creation_user,
	    :creation_ip
	  );
	
       
b(select_rel_properties):[db_1row]
 {
    select s.segment_name, 
           acs_rel_type.role_pretty_name(t.role_one) as role_one_name,
           acs_rel_type.role_pretty_name(t.role_two) as role_two_name
      from rel_segments s, acs_rel_types t
     where s.rel_type = t.rel_type
       and s.segment_id = :rel_segment
} 
 ------------ 
      
    select s.segment_name, 
           acs_rel_type__role_pretty_name(t.role_one) as role_one_name,
           acs_rel_type__role_pretty_name(t.role_two) as role_two_name
      from rel_segments s, acs_rel_types t
     where s.rel_type = t.rel_type
       and s.segment_id = :rel_segment

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-segments/new-3.tcl####################
Parse Error: 
not well-formed at line 10, column 69, byte 265 at D:/Perl/site/lib/XML/Parser.pm line 168

FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/pvt/toggle-dont-spam-me-p.tcl####################
q(unused):[db_dml]
 "update user_preferences set dont_spam_me_p = util.logical_negation(dont_spam_me_p) where user_id = :user_id" 
 ------------ 
      update user_preferences set dont_spam_me_p = util__logical_negation(dont_spam_me_p) where user_id = :user_id
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/group-types/rel-type-add-2.tcl####################
b(types_match_p):[db_string]
 {
	    select count(*)
	      from acs_rel_types t
	     where (t.object_type_one = :group_type 
                    or acs_object_type.is_subtype_p(t.object_type_one, :group_type) = 't')
               and t.rel_type = :rel_type
	} 
 ------------ 
      
	    select count(*)
	      from acs_rel_types t
	     where (t.object_type_one = :group_type 
                    or acs_object_type__is_subtype_p(t.object_type_one, :group_type) = 't')
               and t.rel_type = :rel_type
	
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/groups/rel-type-remove.tcl####################
b(select_info):[db_0or1row]
 {
    select g.rel_type, g.group_id, acs_object.name(g.group_id) as group_name,
           t.pretty_name as rel_pretty_name
      from acs_object_types t, group_rels g
     where g.group_rel_id = :group_rel_id
       and t.object_type = g.rel_type
} 
 ------------ 
      
    select g.rel_type, g.group_id, acs_object__name(g.group_id) as group_name,
           t.pretty_name as rel_pretty_name
      from acs_object_types t, group_rels g
     where g.group_rel_id = :group_rel_id
       and t.object_type = g.rel_type

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/parties/new.tcl####################
b(rel_type_info):[db_1row]
 {
    select object_type as ancestor_rel_type
      from acs_object_types
     where supertype = 'relationship'
       and object_type in (
               select object_type from acs_object_types
               start with object_type = :add_with_rel_type
               connect by object_type = prior supertype
           )
} 
 ------------ 

         select t2.object_type as ancestor_rel_type
         from acs_object_types t1, acs_object_types t2
         where t1.object_type = :add_with_rel_type
           and t1.tree_sortkey between t2.tree_sortkey and tree_right(t2.tree_sortkey)
           and t2.supertype = 'relationship'

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/shared/portrait-bits.tcl####################
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/group-types/new.tcl####################
Parse Error: 
undefined entity at line 20, column 21, byte 441 at D:/Perl/site/lib/XML/Parser.pm line 168

FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/site-map/instance-delete.tcl####################
b(package_instance_delete):[db_exec_plsql]
 {
	begin
	apm_package.delete(package_id => :package_id);
	end;
    } 
 ------------ 

	select apm_package__delete(:package_id)
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/relations/add.tcl####################
b(rel_type_info):[db_1row]
 {
    select t.object_type_two, t.role_two as role, 
           acs_rel_type.role_pretty_name(t.role_two) as role_pretty_name,
           acs_object_type.pretty_name(t.object_type_two) as object_type_two_name,
           ancestor_rel_types.object_type as ancestor_rel_type
      from acs_rel_types t, acs_object_types obj_types, 
           acs_object_types ancestor_rel_types
     where t.rel_type = :rel_type
       and t.rel_type = obj_types.object_type
       and ancestor_rel_types.supertype = 'relationship'
       and ancestor_rel_types.object_type in (
               select object_type from acs_object_types
               start with object_type = :rel_type
               connect by object_type = prior supertype
           )
} 
 ------------ 
    select t.object_type_two, t.role_two as role, 
           acs_rel_type__role_pretty_name(t.role_two) as role_pretty_name,
           acs_object_type__pretty_name(t.object_type_two) as object_type_two_name,
           ancestor_rel_types.object_type as ancestor_rel_type
      from acs_rel_types t, acs_object_types obj_types, 
           acs_object_types ancestor_rel_types
     where t.rel_type = :rel_type
       and t.rel_type = obj_types.object_type
       and ancestor_rel_types.supertype = 'relationship'
       and ancestor_rel_types.object_type in (
	      	select t2.object_type from 
		acs_object_types t1, acs_object_types t2
		where t1.object_type= :rel_type
		and t1.tree_sortkey between t2.tree_sortkey and tree_right(t2.tree_sortkey)
	)

       
q(select_parties):[db_list_of_lists]
 "
            select DISTINCT
                   decode(groups.group_id,
                          null, decode(persons.person_id, 
                                       null, 'INVALID',
                                       persons.first_names || ' ' || persons.last_name),
                          groups.group_name) as party_name,
                   p.party_id
            from (select o.object_id as party_id
                  from acs_objects o,
                       (select object_type from acs_object_types
                        start with $start_with
                        connect by prior object_type = supertype) t
                  where o.object_type = t.object_type) p,
                 (select element_id
                  from group_element_map
                  where group_id = :group_id and rel_type = :rel_type
                  UNION ALL
                  select to_number(:group_id) from dual) m,
                 (select object_id
                  from all_object_party_privilege_map
                  where party_id = :user_id and privilege = 'read') perm,
                 (select party_id
                  from rc_parties_in_required_segs
                  where group_id = :group_id 
                    and rel_type = :rel_type) pirs $scope_query,
                 groups,
                 persons
            where p.party_id = m.element_id(+)
              and m.element_id is null
              and p.party_id = perm.object_id
              and p.party_id = pirs.party_id $scope_clause
              and p.party_id = groups.group_id(+)
              and p.party_id = persons.person_id(+)
    " 
 ------------ 
            select DISTINCT
                   case when groups.group_id is null then
                          case when persons.person_id is null then 'INVALID' 
				else persons.first_names || ' ' || persons.last_name 
			  end else
                   groups.group_name end as party_name,
                   p.party_id
            from (select o.object_id as party_id
                  from acs_objects o,
                       (select ot2.object_type from acs_object_types ot, acs_object_types ot2
                        where ot2.tree_sortkey between ot.tree_sortkey and tree_right(ot.tree_sortkey)
                          and $start_with) t
                  where o.object_type = t.object_type) p left join
                 (select element_id
                  from group_element_map
                  where group_id = :group_id and rel_type = :rel_type
                  UNION ALL
                  select :group_id::integer ) m on (p.party_id = m.element_id) cross join
                 (select object_id
                  from all_object_party_privilege_map
                  where party_id = :user_id and privilege = 'read') perm cross join
                 (select party_id
                  from rc_parties_in_required_segs
                  where group_id = :group_id 
                    and rel_type = :rel_type) pirs $scope_query left join
                 groups on (p.party_id = groups.group_id) 
		left join persons on (p.party_id = persons.person_id)
            where 
              m.element_id is null
              and p.party_id = perm.object_id
              and p.party_id = pirs.party_id $scope_clause
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/pvt/alerts.tcl####################
Parse Error: 
not well-formed at line 32, column 30, byte 830 at D:/Perl/site/lib/XML/Parser.pm line 168

FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/rels-list.tcl####################
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/groups/constraints-create.tcl####################
b(select_props):[db_1row]
 {
    select acs_group.name(:group_id) as group_name,
           t.pretty_name as rel_type_pretty_name
      from acs_object_types t
     where t.object_type = :rel_type
} 
 ------------ 
      
    select acs_group__name(:group_id) as group_name,
           t.pretty_name as rel_type_pretty_name
      from acs_object_types t
     where t.object_type = :rel_type

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/site-map/index.tcl####################
b(package_types):[db_foreach]
 {
	select package_key, pretty_name
	from apm_package_types
	where not (apm_package.singleton_p(package_key) = 1 and
	      apm_package.num_instances(package_key) >= 1)
	order by pretty_name
      } 
 ------------ 
      
	select package_key, pretty_name
	from apm_package_types
	where not (apm_package__singleton_p(package_key) = 1 and
	      apm_package__num_instances(package_key) >= 1)
	order by pretty_name
      
       
b(services_select):[db_foreach]
 {
  select package_id, ap.package_key, acs_object.name(package_id) instance_name,
  apm_package_type.num_parameters(ap.package_key) parameter_count
  from apm_packages ap, apm_package_types
  where ap.package_key = apm_package_types.package_key
  and package_type = 'apm_service'
  and (acs_permission.permission_p(package_id, :user_id, 'read') = 't' or
       acs_permission.permission_p(package_id, acs.magic_object_id('the_public'), 'read') = 't')
} 
 ------------ 
      
  select package_id, ap.package_key, acs_object__name(package_id) as instance_name,
  apm_package_type__num_parameters(ap.package_key) as parameter_count
  from apm_packages ap, apm_package_types
  where ap.package_key = apm_package_types.package_key
  and package_type = 'apm_service'
  and (acs_permission__permission_p(package_id, :user_id, 'read') = 't' or
       acs_permission__permission_p(package_id, acs__magic_object_id('the_public'), 'read') = 't')
  order by instance_name

       
q(nodes_select):[db_foreach]
 "
select package_id,
       package_key,
       apm_package_type.num_parameters(package_key) parameter_count,
       node_id, url, parent_url, name, root_p, mylevel - 1 as mylevel, object_id,
       object_name, directory_p, parent_id, n_children,
       (select decode(acs_permission.permission_p(object_id, :user_id, 'admin'),
                      't', 1, 0) from dual) object_admin_p  
from apm_packages p, (
  select node_id, site_node.url(node_id) as url,
         site_node.url(parent_id) as parent_url,
         name,
         (select count(*)
          from site_nodes
          where parent_id = n.node_id) as n_children,
         decode(node_id, site_node.node_id('/'), 1, 0) as root_p,
         level as mylevel,
         object_id,
         acs_object.name(object_id) as object_name,
         directory_p,
         parent_id
  from site_nodes n
  where (object_id is null or
         acs_permission.permission_p(object_id, :user_id, 'read') = 't')
  start with node_id = nvl(:root_id, site_node.node_id('/'))
  connect by prior node_id = parent_id and parent_id in ([join $expand " 
 ------------ 
select package_id,
       package_key,
       apm_package_type__num_parameters(package_key) as parameter_count,
       node_id, url, parent_url, name, root_p, mylevel, object_id,
       object_name, directory_p, parent_id, n_children,
       (select case when acs_permission__permission_p(object_id, :user_id, 'admin') = 't' then 1 else 0 end) as object_admin_p
from apm_packages p right outer join (
  select n.node_id, site_node__url(n.node_id) as url,
         site_node__url(n.parent_id) as parent_url,
         n.name,
         (select count(*)
          from site_nodes
          where parent_id = n.node_id) as n_children,
         case when n.node_id = site_node__node_id('/', null) then 1 else 0 end as root_p,
         (select tree_level(n.tree_sortkey) - tree_level(n2.tree_sortkey)
            from site_nodes n2
           where n2.node_id = coalesce(:root_id, site_node__node_id('/', null))) as mylevel,
         n.object_id,
         acs_object__name(n.object_id) as object_name,
         n.directory_p,
         n.parent_id
  from site_nodes n, site_nodes n2
  where (n.object_id is null or acs_permission__permission_p(n.object_id, :user_id, 'read'))
    and n2.node_id = coalesce(:root_id, site_node__node_id('/', null))
    and n.tree_sortkey between n2.tree_sortkey and tree_right(n2.tree_sortkey)
    and (n.parent_id is null or n.parent_id in ([join $expand ", "]))) site_map
 on site_map.object_id = p.package_id
 order by url

       
b(path_select):[db_foreach]
 {
  select node_id, name, directory_p, level,
         acs_object.name(object_id) as obj_name,
         acs_permission.permission_p(object_id, :user_id, 'admin') as admin_p
  from site_nodes
  start with node_id = :root_id
  connect by node_id = prior parent_id
  order by level desc
} 
 ------------ 
      
  select s2.node_id, s2.name, s2.directory_p, tree_level(s2.tree_sortkey) as level,
	 acs_object__name(s2.object_id) as obj_name,
	 acs_permission__permission_p(s2.object_id, :user_id, 'admin') as admin_p
    from (select tree_ancestor_keys(site_node_get_tree_sortkey(:root_id)) as tree_sortkey) parents,
      site_nodes s2
   where s2.tree_sortkey = parents.tree_sortkey
   order by level

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/tcl/application-group-procs.tcl####################
b(add_group):[db_exec_plsql]
 {
		begin
		:1 := application_group.new (
	            group_id      => :group_id,
	            object_type    => :group_type,
	            group_name    => :group_name,
                    package_id    => :package_id,
	            context_id    => :context_id,
	            creation_user => :creation_user,
	            creation_ip   => :creation_ip,
		    email         => :email,
		    url           => :url
		);
		end;
	    } 
 ------------ 

		select application_group__new (
	            :group_id,
	            :group_type,
		    now(),
	            :creation_user,
	            :creation_ip,
		    :email,
		    :url,
	            :group_name,
                    :package_id,
	            :context_id
		)
	    
       
b(add_composition_rel):[db_exec_plsql]
 {
		    begin
		    :1 := composition_rel.new (
		            rel_type => 'composition_rel',
		            object_id_one => :parent_group_id,
		            object_id_two => :group_id,
		            creation_user => :creation_user,
                            creation_ip   => :creation_ip
		    );
		    end;
		} 
 ------------ 

		    select composition_rel__new (
			    null,
		            'composition_rel',
		            :parent_group_id,
		            :group_id,
		            :creation_user,
                            :creation_ip
		    )
		
       
b(application_group_from_package_id_query):[db_exec_plsql]
 {
	    begin
	    :1 := application_group.group_id_from_package_id (
	        package_id => :package_id,
	        no_complain_p => :no_complain_p
	    );
	    end;
	} 
 ------------ 

	    select application_group__group_id_from_package_id (
	        :package_id,
	        :no_complain_p
	    )
	
       
b(app_group_contains_party_p):[db_string]
 {
	    select case when exists (
	        select 1
	        from application_group_element_map
	        where package_id = :package_id
	          and element_id = :party_id
	    ) then 1 else 0 end
            from dual
	} 
 ------------ 
      
	    select case when exists (
	        select 1
	        from application_group_element_map
	        where package_id = :package_id
	          and element_id = :party_id
	      union all
	        select 1
	        from application_groups
	        where package_id = :package_id
	          and group_id = :party_id
	    ) then 1 else 0 end
            
	
       
b(parent_group_id_query):[db_0or1row]
 {

      
		select parent_id
                from site_nodes
                where object_id = :package_id
	    
      
} 
 ------------ 

	    select ag.group_id as parent_group_id
	    from (select tree_ancestor_keys(site_node_get_tree_sortkey(:parent_node_id)) as tree_sortkey) parents,
                    application_groups ag, site_nodes s, apm_packages a
                  where s.tree_sortkey = parents.tree_sortkey
                    and s.object_id = a.package_id
                    and a.package_id = ag.package_id
            order by s.tree_sortkey desc
            limit 1;
		
       
b(app_group_contains_segment_p):[db_string]
 {
	    select case when exists (
	        select 1
	        from application_group_segments
	        where package_id = :package_id
	          and segment_id = :segment_id
	    ) then 1 else 0 end
            from dual
	} 
 ------------ 
      
	    select case when exists (
	        select 1
	        from application_group_segments
	        where package_id = :package_id
	          and segment_id = :segment_id
	    ) then 1 else 0 end
            
	
       
b(app_group_contains_rel_p):[db_string]
 {
	    select case when exists (
	        select 1
	        from application_group_element_map
	        where package_id = :package_id
	          and rel_id = :rel_id
	    ) then 1 else 0 end
            from dual
	} 
 ------------ 
      
	    select case when exists (
	        select 1
	        from application_group_element_map
	        where package_id = :package_id
	          and rel_id = :rel_id
	    ) then 1 else 0 end
            
	
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-segments/index.tcl####################
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/groups/rel-type-add.tcl####################
Parse Error: 
undefined entity at line 9, column 19, byte 187 at D:/Perl/site/lib/XML/Parser.pm line 168

FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/roles/delete-2.tcl####################
b(role_used_p):[db_string]
 {
		select case when exists (select 1 from acs_rel_types where role_one = :role or role_two = :role) then 1 else 0 end
		from dual
	    } 
 ------------ 
      
		select case when exists (select 1 from acs_rel_types where role_one = :role or role_two = :role) then 1 else 0 end
		
	    
       
b(drop_role):[db_exec_plsql]
 {begin acs_rel_type.drop_role(:role);end;} 
 ------------ 
select acs_rel_type__drop_role(:role)
 
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-segments/constraints/delete-2.tcl####################
b(delete_constraint):[db_exec_plsql]
 {
	begin rel_constraint.delete(constraint_id => :constraint_id); end;
    } 
 ------------ 

	begin perform rel_constraint__delete(:constraint_id); return null; end;
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/groups/rel-type-add-2.tcl####################
b(segment_exists_p):[db_string]
 {
    select case when exists (select 1 
                               from rel_segments s 
                              where s.group_id = :group_id
                                and s.rel_type = :rel_type)
                then 1 else 0 end
      from dual
} 
 ------------ 
      
    select case when exists (select 1 
                               from rel_segments s 
                              where s.group_id = :group_id
                                and s.rel_type = :rel_type)
                then 1 else 0 end
      

       
b(exists_p):[db_string]
 {
	select case when exists (select 1 
                                   from group_rels 
                                  where group_id = :group_id
                                    and rel_type = :rel_type)
                    then 1 else 0 end
	  from dual
    } 
 ------------ 
      
	select case when exists (select 1 
                                   from group_rels 
                                  where group_id = :group_id
                                    and rel_type = :rel_type)
                    then 1 else 0 end
	  
    
       
b(types_match_p):[db_string]
 {
	    select count(*)
	      from acs_rel_types t
	     where (t.object_type_one = :group_type 
                    or acs_object_type.is_subtype_p(t.object_type_one, :group_type) = 't')
               and t.rel_type = :rel_type
	} 
 ------------ 
      
	    select count(*)
	      from acs_rel_types t
	     where (t.object_type_one = :group_type 
                    or acs_object_type__is_subtype_p(t.object_type_one, :group_type) = 't')
               and t.rel_type = :rel_type
	
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/tcl/attribute-procs.tcl####################
b(attr_exists_p):[db_string]
 {
	select case when exists (select 1 
                                   from acs_attributes a
                                  where (a.attribute_name = :attribute
                                         or a.column_name = :attribute)
                                    and a.object_type = :object_type)
                    then 1
                    else 0
                    end
          from dual
    } 
 ------------ 
      
	select case when exists (select 1 
                                   from acs_attributes a
                                  where (a.attribute_name = :attribute
                                         or a.column_name = :attribute)
                                    and a.object_type = :object_type)
                    then 1
                    else 0
                    end
          
    
       
b(attribute_select):[db_foreach]
 {

      
        select * 
          from ($package_object_view) 
         where object_id = :object_id
	
      
} 
 ------------ 	

	select *
	  from ($package_object_view) dummy
	 where object_id = :object_id

       
b(attribute_for_dynamic_object_p):[db_string]
 {
	select case when exists (select 1 
                                   from acs_attributes a, acs_object_types t
                                  where t.dynamic_p = 't'
                                    and a.object_type = t.object_type
                                    and a.attribute_id = :value)
	            then 1 else 0 end
	  from dual
    } 
 ------------ 
      
	select case when exists (select 1 
                                   from acs_attributes a, acs_object_types t
                                  where t.dynamic_p = 't'
                                    and a.object_type = t.object_type
                                    and a.attribute_id = :value)
	            then 1 else 0 end
	  
    
       
q(select_attributes):[db_foreach]
 "
	select nvl(a.column_name, a.attribute_name) as name, 
               a.pretty_name, a.attribute_id, a.datatype, 
               v.enum_value, v.pretty_name as value_pretty_name
	from acs_object_type_attributes a,
               acs_enum_values v,
               (select t.object_type, level as type_level
                  from acs_object_types t
                 start with t.object_type = :start_with
               connect by prior t.object_type = t.supertype) t 
         where a.object_type = :object_type
           and a.attribute_id = v.attribute_id(+)
           and t.object_type = a.ancestor_type $storage_clause
        order by type_level, a.sort_order
    " 
 ------------ 

	select coalesce(a.column_name, a.attribute_name) as name, 
               a.pretty_name, a.attribute_id, a.datatype, 
               v.enum_value, v.pretty_name as value_pretty_name
	from acs_object_type_attributes a left outer join
               acs_enum_values v using (attribute_id),
               (select t.object_type, tree_level(t.tree_sortkey) - tree_level(t2.tree_sortkey) as type_level
                from acs_object_types t, acs_object_types t2
		where t2.object_type = :start_with
                  and t.tree_sortkey between t2.tree_sortkey and tree_right(t2.tree_sortkey)) t
         where a.object_type = :object_type
           and t.object_type = a.ancestor_type $storage_clause
        order by type_level, a.sort_order
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/site-map/delete.tcl####################
b(node_delete):[db_exec_plsql]
 {
    begin
      site_node.delete(:node_id);
    end;
  } 
 ------------ 

      select site_node__delete(:node_id)
  
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-segments/one.tcl####################
b(select_segment_info):[db_1row]
 {

      
    select count(*) as number_elements
      from rel_segment_party_map map, acs_object_party_privilege_map perm
     where perm.object_id = map.party_id
       and perm.party_id = :user_id
       and perm.privilege = 'read' 
       and map.segment_id = :segment_id

      
} 
 ------------ 
      
    select count(*) as number_elements
      from rel_segment_party_map map
     where acs_permission__permission_p(map.party_id, :user_id, 'read')
       and map.segment_id = :segment_id

       
b(select_segment_properties):[db_0or1row]
 {
    select s.segment_id, s.segment_name, s.group_id, acs_object.name(s.group_id) as group_name,
           s.rel_type, acs_object_type.pretty_name(r.rel_type) as rel_type_pretty_name,
           acs_rel_type.role_pretty_plural(r.role_two) as role_pretty_plural
      from rel_segments s, acs_rel_types r
     where s.segment_id = :segment_id
       and s.rel_type = r.rel_type
} 
 ------------ 
      
    select s.segment_id, s.segment_name, s.group_id, acs_object__name(s.group_id) as group_name,
           s.rel_type, acs_object_type__pretty_name(r.rel_type) as rel_type_pretty_name,
           acs_rel_type__role_pretty_plural(r.role_two) as role_pretty_plural
      from rel_segments s, acs_rel_types r
     where s.segment_id = :segment_id
       and s.rel_type = r.rel_type

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/tcl/subsite-callback-procs.tcl####################
Parse Error: 
not well-formed at line 13, column 48, byte 410 at D:/Perl/site/lib/XML/Parser.pm line 168

FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/tcl/party-procs.tcl####################
Parse Error: 
undefined entity at line 29, column 17, byte 935 at D:/Perl/site/lib/XML/Parser.pm line 168

FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/groups/elements-by-group-type.tcl####################
b(select_group_types):[db_foreach]
 {


    select
           t.object_type, t.pretty_name, count(g.group_id) as number_groups
      from groups g, acs_objects o, acs_object_types t,
           application_group_element_map app_group
     where o.object_id = g.group_id
       and o.object_type = t.object_type
       and app_group.package_id = :package_id
       and app_group.element_id = g.group_id
     group by t.object_type, t.pretty_name
     order by lower(t.pretty_name)

      
} 
 ------------ 

    select
           t.object_type, t.pretty_name, count(g.group_id) as number_groups
      from groups g, acs_objects o, acs_object_types t,
           application_group_element_map app_group
     where o.object_id = g.group_id
       and o.object_type = t.object_type
       and app_group.package_id = :package_id
       and app_group.element_id = g.group_id
     group by t.object_type, t.pretty_name
     order by lower(t.pretty_name)

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/tcl/relation-procs.tcl####################
Parse Error: 
undefined entity at line 56, column 18, byte 1469 at D:/Perl/site/lib/XML/Parser.pm line 168

FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/group-types/delete-2.tcl####################
b(package_exists):[db_string]
 {
    select case when exists (select 1 
                               from user_objects o
                              where o.object_type='PACKAGE' 
                                and o.object_name = upper(:package_name))
           then 1 else 0 end
      from dual
} 
 ------------ 
      
    select case when exists (select 1 
                               from pg_proc
                              where proname like :package_name || '%')
           then 1 else 0 end
      

       
b(type_exists):[db_string]
 {
    select case when exists (select 1 from acs_object_types t where t.object_type = :group_type)
                then 1
                else 0
           end
      from dual
} 
 ------------ 
      
    select case when exists (select 1 from acs_object_types t where t.object_type = :group_type)
                then 1
                else 0
           end
      

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/groups/new.tcl####################
b(rel_type_info):[db_1row]
 {
    select object_type as ancestor_rel_type
      from acs_object_types
     where supertype = 'relationship'
       and object_type in (
               select object_type from acs_object_types
               start with object_type = :add_with_rel_type
               connect by object_type = prior supertype
           )
} 
 ------------ 

    select object_type as ancestor_rel_type
      from acs_object_types
     where supertype = 'relationship'
       and object_type in (
               select t2.object_type
		 from acs_object_types t1, acs_object_types t2
		where t1.object_type = :add_with_rel_type
		  and t1.tree_sortkey between t2.tree_sortkey and tree_right(t2.tree_sortkey)
           )

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/group-types/delete.tcl####################
b(number_subtypes):[db_string]
 {
    select case when exists (select 1 
                               from acs_object_types t
                              where t.supertype = :group_type) 
                then 1 else 0 end
      from dual
} 
 ------------ 
      
    select case when exists (select 1 
                               from acs_object_types t
                              where t.supertype = :group_type) 
                then 1 else 0 end
      

       
b(rel_type_exists_p):[db_string]
 {
    select case when exists (select 1 
                               from acs_rel_types t
                              where t.object_type_one = :group_type
                                 or t.object_type_two = :group_type)
                then 1 else 0 end
      from dual
} 
 ------------ 
      
    select case when exists (select 1 
                               from acs_rel_types t
                              where t.object_type_one = :group_type
                                 or t.object_type_two = :group_type)
                then 1 else 0 end
      

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/shared/whos-online.tcl####################
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-types/delete-2.tcl####################
b(drop_relationship_type):[db_exec_plsql]
 {
	    BEGIN
	      acs_rel_type.drop_type( rel_type  => :rel_type,
                                      cascade_p => 't' );
	    END;
	} 
 ------------ 
	      select acs_rel_type__drop_type(:rel_type,'t')
       
q(drop_type_table):[db_exec_plsql]
 "drop table $table_name" 
 ------------ 
drop table $table_name
       
b(select_rel_ids):[db_list]
 {

      
	select r.rel_id
	  from acs_rels r, acs_object_party_privilege_map perm
	 where perm.object_id = r.rel_id
	  and perm.party_id = :user_id
	  and perm.privilege = 'delete'
	  and r.rel_type = :rel_type
    
      
} 
 ------------ 
      
	select r.rel_id
	  from acs_rels r
	 where acs_permission__permission_p(r.rel_id, :user_id, 'delete')
	  and r.rel_type = :rel_type
    
       
b(select_segment_id):[db_string]
 {

      
	select s.segment_id
	  from rel_segments s, acs_object_party_privilege_map perm
	 where perm.object_id = s.segment_id
 	   and perm.party_id = :user_id
	   and perm.privilege = 'delete'
	   and s.rel_type = :rel_type
    
      
} 
 ------------ 
      
	select s.segment_id
	  from rel_segments s
	 where acs_permission__permission_p(s.segment_id, :user_id, 'delete')
	   and s.rel_type = :rel_type
    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/permissions/revoke-2.tcl####################
b(revoke):[db_exec_plsql]
 {
		begin
		    acs_permission.revoke_permission(:object_id, :party_id, :privilege);
		end;
	    } 
 ------------ 

		    select acs_permission__revoke_permission(:object_id, :party_id, :privilege)
	    
       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/groups/elements-by-rel-type.tcl####################
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/rel-segments/new-2.tcl####################
b(select_basic_info):[db_1row]
 {
    select acs_group.name(:group_id) as group_name,
    nvl(acs_rel_type.role_pretty_plural(t.role_two),'Elements') as role_pretty_plural
      from acs_rel_types t
     where t.rel_type = :rel_type
} 
 ------------ 
      
    select acs_group__name(:group_id) as group_name,
    coalesce(acs_rel_type__role_pretty_plural(t.role_two),'Elements') as role_pretty_plural
      from acs_rel_types t
     where t.rel_type = :rel_type

       
FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/group-types/rel-type-add.tcl####################
Parse Error: 
undefined entity at line 9, column 19, byte 187 at D:/Perl/site/lib/XML/Parser.pm line 168

FILE:#############################################d:/projects/portable.nsd/openacs-4/packages/acs-subsite/www/admin/index.tcl####################
b(acs_admin_url_get):[db_0or1row]
 {
    select site_node.url(node_id) acs_admin_url, instance_name
    from site_nodes s, apm_packages p
    where s.object_id = p.package_id
    and p.package_key = 'acs-admin'
    and rownum = 1
} 
 ------------ 

    select site_node__url(node_id) as acs_admin_url, instance_name
    from site_nodes s, apm_packages p
    where s.object_id = p.package_id
    and p.package_key = 'acs-admin'
    limit 1

       
FILE:#############################################d:/projects/portable.nsUse of uninitialized value in concatenation (.) or string at xparse.pl line 144.
d/openacs-4/packages/acs-subsite/www/pvt/unsubscribe-2.tcl####################
q(unused):[db_exec_plsql]
 "
begin
  membership_rel.deleted( rel_id => :rel_id );
end;" 
 ------------ 
      FIX ME PLSQL

begin
  membership_rel__deleted( rel_id => :rel_id );
end;
       
q(rel_id):[]
 "select rel_id
from group_member_map
where group_id = acs.magic_object_id('registered_users')
  and member_id = :user_id" 
 ------------ 
      select rel_id
from group_member_map
where group_id = acs__magic_object_id('registered_users')
  and member_id = :user_id
       

d:\projects\ms_oacs\xql_parser>